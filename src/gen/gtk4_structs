quote
$(Expr(:toplevel, quote
    begin
        mutable struct GtkAccessibleList <: GBoxed
            handle::Ptr{GtkAccessibleList}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkAccessibleList) = begin
                        ccall(("gtk_accessible_list_get_type", libgtk4), GType, ())
                    end
                function GtkAccessibleList(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkAccessibleList)
            end
        end
        const GtkAccessibleListLike = GtkAccessibleList
    end
    begin
        struct _GtkAccessibleTextRange
            start::UInt64
            length::UInt64
        end
        mutable struct GtkAccessibleTextRange
            handle::Ptr{_GtkAccessibleTextRange}
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkAccessibleTextRange}}, box::GtkAccessibleTextRange) = begin
                    convert(Ptr{_GtkAccessibleTextRange}, box.handle)
                end
            convert(::Type{GtkAccessibleTextRange}, p::Ptr{_GtkAccessibleTextRange}, owns = false) = begin
                    GtkAccessibleTextRange(p, owns)
                end
            const GtkAccessibleTextRangeLike = Union{Ref{_GtkAccessibleTextRange}, GtkAccessibleTextRange}
            convert(::Type{GtkAccessibleTextRangeLike}, p, owns) = begin
                    convert(GtkAccessibleTextRange, p, owns)
                end
        end
    end
    begin
        mutable struct GtkBitset <: GBoxed
            handle::Ptr{GtkBitset}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkBitset) = begin
                        ccall(("gtk_bitset_get_type", libgtk4), GType, ())
                    end
                function GtkBitset(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkBitset)
            end
        end
        const GtkBitsetLike = GtkBitset
    end
    begin
        mutable struct GtkBitsetIter <: GBoxed
            handle::Ptr{GtkBitsetIter}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkBitsetIter) = begin
                        ccall(("gtk_bitset_iter_get_type", libgtk4), GType, ())
                    end
                function GtkBitsetIter(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkBitsetIter)
            end
        end
        const GtkBitsetIterLike = GtkBitsetIter
        const _GtkBitsetIter = GtkBitsetIter
    end
    begin
        struct _GtkBorder
            left::Int16
            right::Int16
            top::Int16
            bottom::Int16
        end
        mutable struct GtkBorder <: GBoxed
            handle::Ptr{_GtkBorder}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkBorder) = begin
                        ccall(("gtk_border_get_type", libgtk4), GType, ())
                    end
                function GtkBorder(ref::Ptr{T}, own::Bool = false) where T <: Union{GBoxed, _GtkBorder}
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkBorder)
            end
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkBorder}}, box::GtkBorder) = begin
                    convert(Ptr{_GtkBorder}, box.handle)
                end
            convert(::Type{GtkBorder}, p::Ptr{_GtkBorder}, owns = false) = begin
                    GtkBorder(p, owns)
                end
            const GtkBorderLike = Union{Ref{_GtkBorder}, GtkBorder}
            convert(::Type{GtkBorderLike}, p, owns) = begin
                    convert(GtkBorder, p, owns)
                end
        end
    end
    begin
        mutable struct GtkBuildableParseContext
            handle::Ptr{GtkBuildableParseContext}
        end
        const GtkBuildableParseContextLike = GtkBuildableParseContext
    end
    begin
        mutable struct GtkBuildableParser
            handle::Ptr{GtkBuildableParser}
        end
        const GtkBuildableParserLike = GtkBuildableParser
        const _GtkBuildableParser = GtkBuildableParser
    end
    begin
        struct _GtkCssLocation
            bytes::UInt64
            chars::UInt64
            lines::UInt64
            line_bytes::UInt64
            line_chars::UInt64
        end
        mutable struct GtkCssLocation
            handle::Ptr{_GtkCssLocation}
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkCssLocation}}, box::GtkCssLocation) = begin
                    convert(Ptr{_GtkCssLocation}, box.handle)
                end
            convert(::Type{GtkCssLocation}, p::Ptr{_GtkCssLocation}, owns = false) = begin
                    GtkCssLocation(p, owns)
                end
            const GtkCssLocationLike = Union{Ref{_GtkCssLocation}, GtkCssLocation}
            convert(::Type{GtkCssLocationLike}, p, owns) = begin
                    convert(GtkCssLocation, p, owns)
                end
        end
    end
    begin
        mutable struct GtkCssSection <: GBoxed
            handle::Ptr{GtkCssSection}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkCssSection) = begin
                        ccall(("gtk_css_section_get_type", libgtk4), GType, ())
                    end
                function GtkCssSection(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkCssSection)
            end
        end
        const GtkCssSectionLike = GtkCssSection
    end
    begin
        mutable struct GtkCssStyleChange
            handle::Ptr{GtkCssStyleChange}
        end
        const GtkCssStyleChangeLike = GtkCssStyleChange
    end
    begin
        mutable struct GtkExpressionWatch <: GBoxed
            handle::Ptr{GtkExpressionWatch}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkExpressionWatch) = begin
                        ccall(("gtk_expression_watch_get_type", libgtk4), GType, ())
                    end
                function GtkExpressionWatch(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkExpressionWatch)
            end
        end
        const GtkExpressionWatchLike = GtkExpressionWatch
    end
    begin
        struct _GtkPadActionEntry
            type::UInt32
            index::Int32
            mode::Int32
            label::Cstring
            action_name::Cstring
        end
        mutable struct GtkPadActionEntry
            handle::Ptr{_GtkPadActionEntry}
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkPadActionEntry}}, box::GtkPadActionEntry) = begin
                    convert(Ptr{_GtkPadActionEntry}, box.handle)
                end
            convert(::Type{GtkPadActionEntry}, p::Ptr{_GtkPadActionEntry}, owns = false) = begin
                    GtkPadActionEntry(p, owns)
                end
            const GtkPadActionEntryLike = Union{Ref{_GtkPadActionEntry}, GtkPadActionEntry}
            convert(::Type{GtkPadActionEntryLike}, p, owns) = begin
                    convert(GtkPadActionEntry, p, owns)
                end
        end
    end
    begin
        mutable struct GtkPaperSize <: GBoxed
            handle::Ptr{GtkPaperSize}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkPaperSize) = begin
                        ccall(("gtk_paper_size_get_type", libgtk4), GType, ())
                    end
                function GtkPaperSize(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkPaperSize)
            end
        end
        const GtkPaperSizeLike = GtkPaperSize
    end
    begin
        mutable struct GtkPrintBackend
            handle::Ptr{GtkPrintBackend}
        end
        const GtkPrintBackendLike = GtkPrintBackend
    end
    begin
        mutable struct GtkPrintSetup <: GBoxed
            handle::Ptr{GtkPrintSetup}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkPrintSetup) = begin
                        ccall(("gtk_print_setup_get_type", libgtk4), GType, ())
                    end
                function GtkPrintSetup(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkPrintSetup)
            end
        end
        const GtkPrintSetupLike = GtkPrintSetup
    end
    begin
        struct _GtkRecentData
            display_name::Cstring
            description::Cstring
            mime_type::Cstring
            app_name::Cstring
            app_exec::Cstring
            groups::Ptr{Cstring}
            is_private::Cint
        end
        mutable struct GtkRecentData
            handle::Ptr{_GtkRecentData}
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkRecentData}}, box::GtkRecentData) = begin
                    convert(Ptr{_GtkRecentData}, box.handle)
                end
            convert(::Type{GtkRecentData}, p::Ptr{_GtkRecentData}, owns = false) = begin
                    GtkRecentData(p, owns)
                end
            const GtkRecentDataLike = Union{Ref{_GtkRecentData}, GtkRecentData}
            convert(::Type{GtkRecentDataLike}, p, owns) = begin
                    convert(GtkRecentData, p, owns)
                end
        end
    end
    begin
        mutable struct GtkRecentInfo <: GBoxed
            handle::Ptr{GtkRecentInfo}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkRecentInfo) = begin
                        ccall(("gtk_recent_info_get_type", libgtk4), GType, ())
                    end
                function GtkRecentInfo(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkRecentInfo)
            end
        end
        const GtkRecentInfoLike = GtkRecentInfo
    end
    begin
        struct _GtkRequestedSize
            data::Ptr{Nothing}
            minimum_size::Int32
            natural_size::Int32
        end
        mutable struct GtkRequestedSize
            handle::Ptr{_GtkRequestedSize}
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkRequestedSize}}, box::GtkRequestedSize) = begin
                    convert(Ptr{_GtkRequestedSize}, box.handle)
                end
            convert(::Type{GtkRequestedSize}, p::Ptr{_GtkRequestedSize}, owns = false) = begin
                    GtkRequestedSize(p, owns)
                end
            const GtkRequestedSizeLike = Union{Ref{_GtkRequestedSize}, GtkRequestedSize}
            convert(::Type{GtkRequestedSizeLike}, p, owns) = begin
                    convert(GtkRequestedSize, p, owns)
                end
        end
    end
    begin
        struct _GtkRequisition
            width::Int32
            height::Int32
        end
        mutable struct GtkRequisition <: GBoxed
            handle::Ptr{_GtkRequisition}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkRequisition) = begin
                        ccall(("gtk_requisition_get_type", libgtk4), GType, ())
                    end
                function GtkRequisition(ref::Ptr{T}, own::Bool = false) where T <: Union{GBoxed, _GtkRequisition}
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkRequisition)
            end
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkRequisition}}, box::GtkRequisition) = begin
                    convert(Ptr{_GtkRequisition}, box.handle)
                end
            convert(::Type{GtkRequisition}, p::Ptr{_GtkRequisition}, owns = false) = begin
                    GtkRequisition(p, owns)
                end
            const GtkRequisitionLike = Union{Ref{_GtkRequisition}, GtkRequisition}
            convert(::Type{GtkRequisitionLike}, p, owns) = begin
                    convert(GtkRequisition, p, owns)
                end
        end
    end
    begin
        mutable struct GtkScrollInfo <: GBoxed
            handle::Ptr{GtkScrollInfo}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkScrollInfo) = begin
                        ccall(("gtk_scroll_info_get_type", libgtk4), GType, ())
                    end
                function GtkScrollInfo(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkScrollInfo)
            end
        end
        const GtkScrollInfoLike = GtkScrollInfo
    end
    begin
        struct _GtkTextIter
            dummy1::Ptr{Nothing}
            dummy2::Ptr{Nothing}
            dummy3::Int32
            dummy4::Int32
            dummy5::Int32
            dummy6::Int32
            dummy7::Int32
            dummy8::Int32
            dummy9::Ptr{Nothing}
            dummy10::Ptr{Nothing}
            dummy11::Int32
            dummy12::Int32
            dummy13::Int32
            dummy14::Ptr{Nothing}
        end
        mutable struct GtkTextIter <: GBoxed
            handle::Ptr{_GtkTextIter}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkTextIter) = begin
                        ccall(("gtk_text_iter_get_type", libgtk4), GType, ())
                    end
                function GtkTextIter(ref::Ptr{T}, own::Bool = false) where T <: Union{GBoxed, _GtkTextIter}
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkTextIter)
            end
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkTextIter}}, box::GtkTextIter) = begin
                    convert(Ptr{_GtkTextIter}, box.handle)
                end
            convert(::Type{GtkTextIter}, p::Ptr{_GtkTextIter}, owns = false) = begin
                    GtkTextIter(p, owns)
                end
            const GtkTextIterLike = Union{Ref{_GtkTextIter}, GtkTextIter}
            convert(::Type{GtkTextIterLike}, p, owns) = begin
                    convert(GtkTextIter, p, owns)
                end
        end
    end
    begin
        struct _GtkTreeIter
            stamp::Int32
            user_data::Ptr{Nothing}
            user_data2::Ptr{Nothing}
            user_data3::Ptr{Nothing}
        end
        mutable struct GtkTreeIter <: GBoxed
            handle::Ptr{_GtkTreeIter}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkTreeIter) = begin
                        ccall(("gtk_tree_iter_get_type", libgtk4), GType, ())
                    end
                function GtkTreeIter(ref::Ptr{T}, own::Bool = false) where T <: Union{GBoxed, _GtkTreeIter}
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkTreeIter)
            end
        end
        begin
            unsafe_convert(::Type{Ptr{_GtkTreeIter}}, box::GtkTreeIter) = begin
                    convert(Ptr{_GtkTreeIter}, box.handle)
                end
            convert(::Type{GtkTreeIter}, p::Ptr{_GtkTreeIter}, owns = false) = begin
                    GtkTreeIter(p, owns)
                end
            const GtkTreeIterLike = Union{Ref{_GtkTreeIter}, GtkTreeIter}
            convert(::Type{GtkTreeIterLike}, p, owns) = begin
                    convert(GtkTreeIter, p, owns)
                end
        end
    end
    begin
        mutable struct GtkTreePath <: GBoxed
            handle::Ptr{GtkTreePath}
            begin
                (GLib.g_type(::Type{T}) where T <: GtkTreePath) = begin
                        ccall(("gtk_tree_path_get_type", libgtk4), GType, ())
                    end
                function GtkTreePath(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, GtkTreePath)
            end
        end
        const GtkTreePathLike = GtkTreePath
    end
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.AccessibleList.html)." GtkAccessibleList
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.AccessibleTextRange.html)." GtkAccessibleTextRange
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.Bitset.html)." GtkBitset
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.BitsetIter.html)." GtkBitsetIter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.Border.html)." GtkBorder
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.BuildableParseContext.html)." GtkBuildableParseContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.BuildableParser.html)." GtkBuildableParser
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.CssSection.html)." GtkCssSection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.ExpressionWatch.html)." GtkExpressionWatch
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.PadActionEntry.html)." GtkPadActionEntry
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.PaperSize.html)." GtkPaperSize
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.PrintSetup.html)." GtkPrintSetup
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.RecentData.html)." GtkRecentData
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.RecentInfo.html)." GtkRecentInfo
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.RequestedSize.html)." GtkRequestedSize
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.Requisition.html)." GtkRequisition
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.ScrollInfo.html)." GtkScrollInfo
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.TextIter.html)." GtkTextIter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.TreeIter.html)." GtkTreeIter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/struct.TreePath.html)." GtkTreePath
    GLib.@Giface GtkAccessible libgtk4 gtk_accessible_get_type
    GLib.@Giface GtkAccessibleRange libgtk4 gtk_accessible_range_get_type
    GLib.@Giface GtkAccessibleText libgtk4 gtk_accessible_text_get_type
    GLib.@Giface GtkActionable libgtk4 gtk_actionable_get_type
    GLib.@Giface GtkAppChooser libgtk4 gtk_app_chooser_get_type
    GLib.@Giface GtkBuildable libgtk4 gtk_buildable_get_type
    GLib.@Giface GtkBuilderScope libgtk4 gtk_builder_scope_get_type
    GLib.@Giface GtkCellEditable libgtk4 gtk_cell_editable_get_type
    GLib.@Giface GtkCellLayout libgtk4 gtk_cell_layout_get_type
    GLib.@Giface GtkColorChooser libgtk4 gtk_color_chooser_get_type
    GLib.@Giface GtkConstraintTarget libgtk4 gtk_constraint_target_get_type
    GLib.@Giface GtkEditable libgtk4 gtk_editable_get_type
    GLib.@Giface GtkFileChooser libgtk4 gtk_file_chooser_get_type
    GLib.@Giface GtkFontChooser libgtk4 gtk_font_chooser_get_type
    GLib.@Giface GtkNative libgtk4 gtk_native_get_type
    GLib.@Giface GtkOrientable libgtk4 gtk_orientable_get_type
    GLib.@Giface GtkPrintOperationPreview libgtk4 gtk_print_operation_preview_get_type
    GLib.@Giface GtkRoot libgtk4 gtk_root_get_type
    GLib.@Giface GtkScrollable libgtk4 gtk_scrollable_get_type
    GLib.@Giface GtkSectionModel libgtk4 gtk_section_model_get_type
    GLib.@Giface GtkSelectionModel libgtk4 gtk_selection_model_get_type
    GLib.@Giface GtkShortcutManager libgtk4 gtk_shortcut_manager_get_type
    GLib.@Giface GtkStyleProvider libgtk4 gtk_style_provider_get_type
    GLib.@Giface GtkSymbolicPaintable libgtk4 gtk_symbolic_paintable_get_type
    GLib.@Giface GtkTreeDragDest libgtk4 gtk_tree_drag_dest_get_type
    GLib.@Giface GtkTreeDragSource libgtk4 gtk_tree_drag_source_get_type
    GLib.@Giface GtkTreeModel libgtk4 gtk_tree_model_get_type
    GLib.@Giface GtkTreeSortable libgtk4 gtk_tree_sortable_get_type
    GLib.@Gobject GtkATContext GObject libgtk4 gtk_at_context_get_type
    begin
        function GLib.signalnames(::Type{GtkATContext})
            vcat([:state_change], signalnames(supertype(GtkATContext)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_change => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkATContext
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkATContext
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkWidget GInitiallyUnowned libgtk4 gtk_widget_get_type
    begin
        function GLib.signalnames(::Type{GtkWidget})
            vcat([:destroy, :direction_changed, :hide, :keynav_failed, :map, :mnemonic_activate, :move_focus, :query_tooltip, :realize, :show, :state_flags_changed, :unmap, :unrealize], signalnames(supertype(GtkWidget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkWidget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkWidget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkWindow GtkWidget libgtk4 gtk_window_get_type
    begin
        function GLib.signalnames(::Type{GtkWindow})
            vcat([:activate_default, :activate_focus, :close_request, :enable_debugging, :keys_changed], signalnames(supertype(GtkWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAboutDialog GtkWindow libgtk4 gtk_about_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkAboutDialog})
            vcat([:activate_link], signalnames(supertype(GtkAboutDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :activate_link => (:Cint, [:Cstring]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAboutDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAboutDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkActionBar GtkWidget libgtk4 gtk_action_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkActionBar})
            signalnames(supertype(GtkActionBar))
        end
    end
    GLib.@Gobject GtkShortcutAction GObject libgtk4 gtk_shortcut_action_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutAction})
            signalnames(supertype(GtkShortcutAction))
        end
    end
    GLib.@Gobject GtkActivateAction GtkShortcutAction libgtk4 gtk_activate_action_get_type
    begin
        function GLib.signalnames(::Type{GtkActivateAction})
            signalnames(supertype(GtkActivateAction))
        end
    end
    GLib.@Gobject GtkAdjustment GInitiallyUnowned libgtk4 gtk_adjustment_get_type
    begin
        function GLib.signalnames(::Type{GtkAdjustment})
            vcat([:changed, :value_changed], signalnames(supertype(GtkAdjustment)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, Any[]), :value_changed => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAdjustment
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAdjustment
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAlertDialog GObject libgtk4 gtk_alert_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkAlertDialog})
            signalnames(supertype(GtkAlertDialog))
        end
    end
    GLib.@Gobject GtkShortcutTrigger GObject libgtk4 gtk_shortcut_trigger_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutTrigger})
            signalnames(supertype(GtkShortcutTrigger))
        end
    end
    GLib.@Gobject GtkAlternativeTrigger GtkShortcutTrigger libgtk4 gtk_alternative_trigger_get_type
    begin
        function GLib.signalnames(::Type{GtkAlternativeTrigger})
            signalnames(supertype(GtkAlternativeTrigger))
        end
    end
    GLib.@Gobject GtkFilter GObject libgtk4 gtk_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkFilter})
            vcat([:changed], signalnames(supertype(GtkFilter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFilter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFilter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMultiFilter GtkFilter libgtk4 gtk_multi_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkMultiFilter})
            vcat([:items_changed], signalnames(supertype(GtkMultiFilter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMultiFilter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMultiFilter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAnyFilter GtkMultiFilter libgtk4 gtk_any_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkAnyFilter})
            vcat([:items_changed], signalnames(supertype(GtkAnyFilter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAnyFilter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAnyFilter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAppChooserButton GtkWidget libgtk4 gtk_app_chooser_button_get_type
    begin
        function GLib.signalnames(::Type{GtkAppChooserButton})
            vcat([:activate, :changed, :custom_item_activated], signalnames(supertype(GtkAppChooserButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :changed => (:Nothing, Any[]), :custom_item_activated => (:Nothing, [:Cstring]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAppChooserButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAppChooserButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDialog GtkWindow libgtk4 gtk_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkDialog})
            vcat([:close, :response], signalnames(supertype(GtkDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :close => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :response => (:Nothing, [:Int32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAppChooserDialog GtkDialog libgtk4 gtk_app_chooser_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkAppChooserDialog})
            signalnames(supertype(GtkAppChooserDialog))
        end
    end
    GLib.@Gobject GtkAppChooserWidget GtkWidget libgtk4 gtk_app_chooser_widget_get_type
    begin
        function GLib.signalnames(::Type{GtkAppChooserWidget})
            vcat([:application_activated, :application_selected], signalnames(supertype(GtkAppChooserWidget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :application_selected => (:Nothing, Expr[:(Ptr{GObject})]), :unrealize => (:Nothing, Any[]), :application_activated => (:Nothing, Expr[:(Ptr{GObject})]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAppChooserWidget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAppChooserWidget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkApplication GApplication libgtk4 gtk_application_get_type
    begin
        function GLib.signalnames(::Type{GtkApplication})
            vcat([:query_end, :window_added, :window_removed, :action_added, :action_enabled_changed, :action_removed, :action_state_changed], signalnames(supertype(GtkApplication)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :startup => (:Nothing, Any[]), :command_line => (:Int32, Expr[:(Ptr{GObject})]), :open => (:Nothing, Any[:(Ptr{Ptr{GObject}}), :Int32, :Cstring]), :window_removed => (:Nothing, Expr[:(Ptr{GObject})]), :shutdown => (:Nothing, Any[]), :name_lost => (:Cint, Any[]), :window_added => (:Nothing, Expr[:(Ptr{GObject})]), :activate => (:Nothing, Any[]), :handle_local_options => (:Int32, [:GVariantDict]), :query_end => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkApplication
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkApplication
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkApplicationWindow GtkWindow libgtk4 gtk_application_window_get_type
    begin
        function GLib.signalnames(::Type{GtkApplicationWindow})
            vcat([:action_added, :action_enabled_changed, :action_removed, :action_state_changed], signalnames(supertype(GtkApplicationWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkApplicationWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkApplicationWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAspectFrame GtkWidget libgtk4 gtk_aspect_frame_get_type
    begin
        function GLib.signalnames(::Type{GtkAspectFrame})
            signalnames(supertype(GtkAspectFrame))
        end
    end
    GLib.@Gobject GtkAssistant GtkWindow libgtk4 gtk_assistant_get_type
    begin
        function GLib.signalnames(::Type{GtkAssistant})
            vcat([:apply, :cancel, :close, :escape, :prepare], signalnames(supertype(GtkAssistant)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :map => (:Nothing, Any[]), :escape => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :prepare => (:Nothing, Expr[:(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :cancel => (:Nothing, Any[]), :close => (:Nothing, Any[]), :state_flags_changed => (:Nothing, [:UInt32]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :apply => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkAssistant
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkAssistant
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkAssistantPage GObject libgtk4 gtk_assistant_page_get_type
    begin
        function GLib.signalnames(::Type{GtkAssistantPage})
            signalnames(supertype(GtkAssistantPage))
        end
    end
    GLib.@Gobject GtkLayoutManager GObject libgtk4 gtk_layout_manager_get_type
    begin
        function GLib.signalnames(::Type{GtkLayoutManager})
            signalnames(supertype(GtkLayoutManager))
        end
    end
    GLib.@Gobject GtkBinLayout GtkLayoutManager libgtk4 gtk_bin_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkBinLayout})
            signalnames(supertype(GtkBinLayout))
        end
    end
    GLib.@Gobject GtkBookmarkList GObject libgtk4 gtk_bookmark_list_get_type
    begin
        function GLib.signalnames(::Type{GtkBookmarkList})
            vcat([:items_changed], signalnames(supertype(GtkBookmarkList)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkBookmarkList
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkBookmarkList
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkBoolFilter GtkFilter libgtk4 gtk_bool_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkBoolFilter})
            signalnames(supertype(GtkBoolFilter))
        end
    end
    GLib.@Gobject GtkBox GtkWidget libgtk4 gtk_box_get_type
    begin
        function GLib.signalnames(::Type{GtkBox})
            signalnames(supertype(GtkBox))
        end
    end
    GLib.@Gobject GtkBoxLayout GtkLayoutManager libgtk4 gtk_box_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkBoxLayout})
            signalnames(supertype(GtkBoxLayout))
        end
    end
    GLib.@Gobject GtkBuilder GObject libgtk4 gtk_builder_get_type
    begin
        function GLib.signalnames(::Type{GtkBuilder})
            signalnames(supertype(GtkBuilder))
        end
    end
    GLib.@Gobject GtkBuilderCScope GObject libgtk4 gtk_builder_cscope_get_type
    begin
        function GLib.signalnames(::Type{GtkBuilderCScope})
            signalnames(supertype(GtkBuilderCScope))
        end
    end
    GLib.@Gobject GtkListItemFactory GObject libgtk4 gtk_list_item_factory_get_type
    begin
        function GLib.signalnames(::Type{GtkListItemFactory})
            signalnames(supertype(GtkListItemFactory))
        end
    end
    GLib.@Gobject GtkBuilderListItemFactory GtkListItemFactory libgtk4 gtk_builder_list_item_factory_get_type
    begin
        function GLib.signalnames(::Type{GtkBuilderListItemFactory})
            signalnames(supertype(GtkBuilderListItemFactory))
        end
    end
    GLib.@Gobject GtkButton GtkWidget libgtk4 gtk_button_get_type
    begin
        function GLib.signalnames(::Type{GtkButton})
            vcat([:activate, :clicked], signalnames(supertype(GtkButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :clicked => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCalendar GtkWidget libgtk4 gtk_calendar_get_type
    begin
        function GLib.signalnames(::Type{GtkCalendar})
            vcat([:day_selected, :next_month, :next_year, :prev_month, :prev_year], signalnames(supertype(GtkCalendar)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :next_year => (:Nothing, Any[]), :next_month => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :day_selected => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :prev_year => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :prev_month => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCalendar
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCalendar
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCallbackAction GtkShortcutAction libgtk4 gtk_callback_action_get_type
    begin
        function GLib.signalnames(::Type{GtkCallbackAction})
            signalnames(supertype(GtkCallbackAction))
        end
    end
    GLib.@Gobject GtkCellArea GInitiallyUnowned libgtk4 gtk_cell_area_get_type
    begin
        function GLib.signalnames(::Type{GtkCellArea})
            vcat([:add_editable, :apply_attributes, :focus_changed, :remove_editable], signalnames(supertype(GtkCellArea)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :apply_attributes => (:Nothing, Any[:(Ptr{GObject}), :_GtkTreeIter, :Cint, :Cint]), :remove_editable => (:Nothing, Expr[:(Ptr{GObject}), :(Ptr{GtkWidget})]), :focus_changed => (:Nothing, Any[:(Ptr{GObject}), :Cstring]), :add_editable => (:Nothing, Any[:(Ptr{GObject}), :(Ptr{GtkWidget}), :_GdkRectangle, :Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellArea
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellArea
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellAreaBox GtkCellArea libgtk4 gtk_cell_area_box_get_type
    begin
        function GLib.signalnames(::Type{GtkCellAreaBox})
            signalnames(supertype(GtkCellAreaBox))
        end
    end
    GLib.@Gobject GtkCellAreaContext GObject libgtk4 gtk_cell_area_context_get_type
    begin
        function GLib.signalnames(::Type{GtkCellAreaContext})
            signalnames(supertype(GtkCellAreaContext))
        end
    end
    GLib.@Gobject GtkCellRenderer GInitiallyUnowned libgtk4 gtk_cell_renderer_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRenderer})
            vcat([:editing_canceled, :editing_started], signalnames(supertype(GtkCellRenderer)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :editing_canceled => (:Nothing, Any[]), :editing_started => (:Nothing, Any[:(Ptr{GtkWidget}), :Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellRenderer
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellRenderer
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellRendererText GtkCellRenderer libgtk4 gtk_cell_renderer_text_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererText})
            vcat([:edited], signalnames(supertype(GtkCellRendererText)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :editing_canceled => (:Nothing, Any[]), :editing_started => (:Nothing, Any[:(Ptr{GtkWidget}), :Cstring]), :edited => (:Nothing, [:Cstring, :Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellRendererText
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellRendererText
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellRendererAccel GtkCellRendererText libgtk4 gtk_cell_renderer_accel_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererAccel})
            vcat([:accel_cleared, :accel_edited], signalnames(supertype(GtkCellRendererAccel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :accel_edited => (:Nothing, [:Cstring, :UInt32, :UInt32, :UInt32]), :editing_canceled => (:Nothing, Any[]), :editing_started => (:Nothing, Any[:(Ptr{GtkWidget}), :Cstring]), :accel_cleared => (:Nothing, [:Cstring]), :edited => (:Nothing, [:Cstring, :Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellRendererAccel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellRendererAccel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellRendererCombo GtkCellRendererText libgtk4 gtk_cell_renderer_combo_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererCombo})
            vcat([:changed], signalnames(supertype(GtkCellRendererCombo)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :editing_canceled => (:Nothing, Any[]), :editing_started => (:Nothing, Any[:(Ptr{GtkWidget}), :Cstring]), :changed => (:Nothing, [:Cstring, :_GtkTreeIter]), :edited => (:Nothing, [:Cstring, :Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellRendererCombo
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellRendererCombo
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellRendererPixbuf GtkCellRenderer libgtk4 gtk_cell_renderer_pixbuf_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererPixbuf})
            signalnames(supertype(GtkCellRendererPixbuf))
        end
    end
    GLib.@Gobject GtkCellRendererProgress GtkCellRenderer libgtk4 gtk_cell_renderer_progress_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererProgress})
            signalnames(supertype(GtkCellRendererProgress))
        end
    end
    GLib.@Gobject GtkCellRendererSpin GtkCellRendererText libgtk4 gtk_cell_renderer_spin_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererSpin})
            signalnames(supertype(GtkCellRendererSpin))
        end
    end
    GLib.@Gobject GtkCellRendererSpinner GtkCellRenderer libgtk4 gtk_cell_renderer_spinner_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererSpinner})
            signalnames(supertype(GtkCellRendererSpinner))
        end
    end
    GLib.@Gobject GtkCellRendererToggle GtkCellRenderer libgtk4 gtk_cell_renderer_toggle_get_type
    begin
        function GLib.signalnames(::Type{GtkCellRendererToggle})
            vcat([:toggled], signalnames(supertype(GtkCellRendererToggle)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :editing_canceled => (:Nothing, Any[]), :editing_started => (:Nothing, Any[:(Ptr{GtkWidget}), :Cstring]), :toggled => (:Nothing, [:Cstring]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCellRendererToggle
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCellRendererToggle
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCellView GtkWidget libgtk4 gtk_cell_view_get_type
    begin
        function GLib.signalnames(::Type{GtkCellView})
            signalnames(supertype(GtkCellView))
        end
    end
    GLib.@Gobject GtkCenterBox GtkWidget libgtk4 gtk_center_box_get_type
    begin
        function GLib.signalnames(::Type{GtkCenterBox})
            signalnames(supertype(GtkCenterBox))
        end
    end
    GLib.@Gobject GtkCenterLayout GtkLayoutManager libgtk4 gtk_center_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkCenterLayout})
            signalnames(supertype(GtkCenterLayout))
        end
    end
    GLib.@Gobject GtkCheckButton GtkWidget libgtk4 gtk_check_button_get_type
    begin
        function GLib.signalnames(::Type{GtkCheckButton})
            vcat([:activate, :toggled], signalnames(supertype(GtkCheckButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :toggled => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCheckButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCheckButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColorButton GtkWidget libgtk4 gtk_color_button_get_type
    begin
        function GLib.signalnames(::Type{GtkColorButton})
            vcat([:activate, :color_set, :color_activated], signalnames(supertype(GtkColorButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :color_set => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkColorButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkColorButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColorChooserDialog GtkDialog libgtk4 gtk_color_chooser_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkColorChooserDialog})
            vcat([:color_activated], signalnames(supertype(GtkColorChooserDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :close => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :response => (:Nothing, [:Int32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkColorChooserDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkColorChooserDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColorChooserWidget GtkWidget libgtk4 gtk_color_chooser_widget_get_type
    begin
        function GLib.signalnames(::Type{GtkColorChooserWidget})
            vcat([:color_activated], signalnames(supertype(GtkColorChooserWidget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkColorChooserWidget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkColorChooserWidget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColorDialog GObject libgtk4 gtk_color_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkColorDialog})
            signalnames(supertype(GtkColorDialog))
        end
    end
    GLib.@Gobject GtkColorDialogButton GtkWidget libgtk4 gtk_color_dialog_button_get_type
    begin
        function GLib.signalnames(::Type{GtkColorDialogButton})
            vcat([:activate], signalnames(supertype(GtkColorDialogButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkColorDialogButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkColorDialogButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColumnView GtkWidget libgtk4 gtk_column_view_get_type
    begin
        function GLib.signalnames(::Type{GtkColumnView})
            vcat([:activate], signalnames(supertype(GtkColumnView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkColumnView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkColumnView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkListItem GObject libgtk4 gtk_list_item_get_type
    begin
        function GLib.signalnames(::Type{GtkListItem})
            signalnames(supertype(GtkListItem))
        end
    end
    GLib.@Gobject GtkColumnViewCell GtkListItem libgtk4 gtk_column_view_cell_get_type
    begin
        function GLib.signalnames(::Type{GtkColumnViewCell})
            signalnames(supertype(GtkColumnViewCell))
        end
    end
    GLib.@Gobject GtkColumnViewColumn GObject libgtk4 gtk_column_view_column_get_type
    begin
        function GLib.signalnames(::Type{GtkColumnViewColumn})
            signalnames(supertype(GtkColumnViewColumn))
        end
    end
    GLib.@Gobject GtkColumnViewRow GObject libgtk4 gtk_column_view_row_get_type
    begin
        function GLib.signalnames(::Type{GtkColumnViewRow})
            signalnames(supertype(GtkColumnViewRow))
        end
    end
    GLib.@Gobject GtkSorter GObject libgtk4 gtk_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkSorter})
            vcat([:changed], signalnames(supertype(GtkSorter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSorter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSorter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkColumnViewSorter GtkSorter libgtk4 gtk_column_view_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkColumnViewSorter})
            signalnames(supertype(GtkColumnViewSorter))
        end
    end
    GLib.@Gobject GtkComboBox GtkWidget libgtk4 gtk_combo_box_get_type
    begin
        function GLib.signalnames(::Type{GtkComboBox})
            vcat([:activate, :changed, :format_entry_text, :move_active, :popdown, :popup, :editing_done, :remove_widget], signalnames(supertype(GtkComboBox)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :changed => (:Nothing, Any[]), :popdown => (:Cint, Any[]), :unrealize => (:Nothing, Any[]), :move_active => (:Nothing, [:UInt32]), :popup => (:Nothing, Any[]), :format_entry_text => (:Cstring, [:Cstring]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkComboBox
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkComboBox
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkComboBoxText GtkComboBox libgtk4 gtk_combo_box_text_get_type
    begin
        function GLib.signalnames(::Type{GtkComboBoxText})
            vcat([:editing_done, :remove_widget], signalnames(supertype(GtkComboBoxText)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :changed => (:Nothing, Any[]), :popdown => (:Cint, Any[]), :unrealize => (:Nothing, Any[]), :move_active => (:Nothing, [:UInt32]), :popup => (:Nothing, Any[]), :format_entry_text => (:Cstring, [:Cstring]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkComboBoxText
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkComboBoxText
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    begin
        abstract type GtkExpression <: GTypeInstance end
        Base.convert(::Type{GtkExpression}, ptr::Ptr{GtkExpression}) = begin
                GtkExpressionLeaf(ptr)
            end
        Base.unsafe_convert(::Type{Ptr{GtkExpression}}, o::GtkExpression) = begin
                o.handle
            end
    end
    begin
        mutable struct GtkExpressionLeaf <: GtkExpression
            handle::Ptr{GtkExpression}
        end
    end
    begin
        abstract type GtkConstantExpression <: GtkExpression end
    end
    begin
        mutable struct GtkConstantExpressionLeaf <: GtkConstantExpression
            handle::Ptr{GtkExpression}
        end
    end
    GLib.@Gobject GtkConstraint GObject libgtk4 gtk_constraint_get_type
    begin
        function GLib.signalnames(::Type{GtkConstraint})
            signalnames(supertype(GtkConstraint))
        end
    end
    GLib.@Gobject GtkConstraintGuide GObject libgtk4 gtk_constraint_guide_get_type
    begin
        function GLib.signalnames(::Type{GtkConstraintGuide})
            signalnames(supertype(GtkConstraintGuide))
        end
    end
    GLib.@Gobject GtkConstraintLayout GtkLayoutManager libgtk4 gtk_constraint_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkConstraintLayout})
            signalnames(supertype(GtkConstraintLayout))
        end
    end
    GLib.@Gobject GtkLayoutChild GObject libgtk4 gtk_layout_child_get_type
    begin
        function GLib.signalnames(::Type{GtkLayoutChild})
            signalnames(supertype(GtkLayoutChild))
        end
    end
    GLib.@Gobject GtkConstraintLayoutChild GtkLayoutChild libgtk4 gtk_constraint_layout_child_get_type
    begin
        function GLib.signalnames(::Type{GtkConstraintLayoutChild})
            signalnames(supertype(GtkConstraintLayoutChild))
        end
    end
    GLib.@Gobject GtkCssProvider GObject libgtk4 gtk_css_provider_get_type
    begin
        function GLib.signalnames(::Type{GtkCssProvider})
            vcat([:parsing_error, :gtk_private_changed], signalnames(supertype(GtkCssProvider)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :parsing_error => (:Nothing, Any[:GtkCssSection, :(Ptr{GError})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkCssProvider
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkCssProvider
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkCustomFilter GtkFilter libgtk4 gtk_custom_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkCustomFilter})
            signalnames(supertype(GtkCustomFilter))
        end
    end
    GLib.@Gobject GtkCustomLayout GtkLayoutManager libgtk4 gtk_custom_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkCustomLayout})
            signalnames(supertype(GtkCustomLayout))
        end
    end
    GLib.@Gobject GtkCustomSorter GtkSorter libgtk4 gtk_custom_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkCustomSorter})
            signalnames(supertype(GtkCustomSorter))
        end
    end
    GLib.@Gobject GtkDirectoryList GObject libgtk4 gtk_directory_list_get_type
    begin
        function GLib.signalnames(::Type{GtkDirectoryList})
            vcat([:items_changed], signalnames(supertype(GtkDirectoryList)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDirectoryList
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDirectoryList
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDragIcon GtkWidget libgtk4 gtk_drag_icon_get_type
    begin
        function GLib.signalnames(::Type{GtkDragIcon})
            signalnames(supertype(GtkDragIcon))
        end
    end
    GLib.@Gobject GtkEventController GObject libgtk4 gtk_event_controller_get_type
    begin
        function GLib.signalnames(::Type{GtkEventController})
            signalnames(supertype(GtkEventController))
        end
    end
    GLib.@Gobject GtkGesture GtkEventController libgtk4 gtk_gesture_get_type
    begin
        function GLib.signalnames(::Type{GtkGesture})
            vcat([:begin, :cancel, :end, :sequence_state_changed, :update], signalnames(supertype(GtkGesture)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :update => (:Nothing, [:GdkEventSequence]), :end => (:Nothing, [:GdkEventSequence]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGesture
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGesture
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureSingle GtkGesture libgtk4 gtk_gesture_single_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureSingle})
            signalnames(supertype(GtkGestureSingle))
        end
    end
    GLib.@Gobject GtkDragSource GtkGestureSingle libgtk4 gtk_drag_source_get_type
    begin
        function GLib.signalnames(::Type{GtkDragSource})
            vcat([:drag_begin, :drag_cancel, :drag_end, :prepare], signalnames(supertype(GtkDragSource)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :drag_begin => (:Nothing, Expr[:(Ptr{GObject})]), :drag_cancel => (:Cint, Any[:(Ptr{GObject}), :UInt32]), :prepare => (:(Ptr{GObject}), [:Float64, :Float64]), :update => (:Nothing, [:GdkEventSequence]), :end => (:Nothing, [:GdkEventSequence]), :drag_end => (:Nothing, Any[:(Ptr{GObject}), :Cint]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDragSource
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDragSource
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDrawingArea GtkWidget libgtk4 gtk_drawing_area_get_type
    begin
        function GLib.signalnames(::Type{GtkDrawingArea})
            vcat([:resize], signalnames(supertype(GtkDrawingArea)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :resize => (:Nothing, [:Int32, :Int32]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDrawingArea
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDrawingArea
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDropControllerMotion GtkEventController libgtk4 gtk_drop_controller_motion_get_type
    begin
        function GLib.signalnames(::Type{GtkDropControllerMotion})
            vcat([:enter, :leave, :motion], signalnames(supertype(GtkDropControllerMotion)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :enter => (:Nothing, [:Float64, :Float64]), :motion => (:Nothing, [:Float64, :Float64]), :leave => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDropControllerMotion
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDropControllerMotion
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDropDown GtkWidget libgtk4 gtk_drop_down_get_type
    begin
        function GLib.signalnames(::Type{GtkDropDown})
            vcat([:activate], signalnames(supertype(GtkDropDown)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDropDown
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDropDown
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDropTarget GtkEventController libgtk4 gtk_drop_target_get_type
    begin
        function GLib.signalnames(::Type{GtkDropTarget})
            vcat([:accept, :drop, :enter, :leave, :motion], signalnames(supertype(GtkDropTarget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :accept => (:Cint, Expr[:(Ptr{GObject})]), :enter => (:UInt32, [:Float64, :Float64]), :drop => (:Cint, [:_GValue, :Float64, :Float64]), :motion => (:UInt32, [:Float64, :Float64]), :leave => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDropTarget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDropTarget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkDropTargetAsync GtkEventController libgtk4 gtk_drop_target_async_get_type
    begin
        function GLib.signalnames(::Type{GtkDropTargetAsync})
            vcat([:accept, :drag_enter, :drag_leave, :drag_motion, :drop], signalnames(supertype(GtkDropTargetAsync)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :accept => (:Cint, Expr[:(Ptr{GObject})]), :drag_motion => (:UInt32, Any[:(Ptr{GObject}), :Float64, :Float64]), :drag_leave => (:Nothing, Expr[:(Ptr{GObject})]), :drop => (:Cint, Any[:(Ptr{GObject}), :Float64, :Float64]), :drag_enter => (:UInt32, Any[:(Ptr{GObject}), :Float64, :Float64]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkDropTargetAsync
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkDropTargetAsync
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEditableLabel GtkWidget libgtk4 gtk_editable_label_get_type
    begin
        function GLib.signalnames(::Type{GtkEditableLabel})
            vcat([:changed, :delete_text, :insert_text], signalnames(supertype(GtkEditableLabel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEditableLabel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEditableLabel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkPopover GtkWidget libgtk4 gtk_popover_get_type
    begin
        function GLib.signalnames(::Type{GtkPopover})
            vcat([:activate_default, :closed], signalnames(supertype(GtkPopover)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :closed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPopover
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPopover
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEmojiChooser GtkPopover libgtk4 gtk_emoji_chooser_get_type
    begin
        function GLib.signalnames(::Type{GtkEmojiChooser})
            vcat([:emoji_picked], signalnames(supertype(GtkEmojiChooser)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :closed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :emoji_picked => (:Nothing, [:Cstring]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEmojiChooser
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEmojiChooser
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEntry GtkWidget libgtk4 gtk_entry_get_type
    begin
        function GLib.signalnames(::Type{GtkEntry})
            vcat([:activate, :icon_press, :icon_release, :editing_done, :remove_widget, :changed, :delete_text, :insert_text], signalnames(supertype(GtkEntry)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :icon_release => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :icon_press => (:Nothing, [:UInt32]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEntry
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEntry
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEntryBuffer GObject libgtk4 gtk_entry_buffer_get_type
    begin
        function GLib.signalnames(::Type{GtkEntryBuffer})
            vcat([:deleted_text, :inserted_text], signalnames(supertype(GtkEntryBuffer)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :inserted_text => (:Nothing, [:UInt32, :Cstring, :UInt32]), :deleted_text => (:Nothing, [:UInt32, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEntryBuffer
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEntryBuffer
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEntryCompletion GObject libgtk4 gtk_entry_completion_get_type
    begin
        function GLib.signalnames(::Type{GtkEntryCompletion})
            vcat([:cursor_on_match, :insert_prefix, :match_selected, :no_matches], signalnames(supertype(GtkEntryCompletion)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :cursor_on_match => (:Cint, Any[:(Ptr{GObject}), :_GtkTreeIter]), :match_selected => (:Cint, Any[:(Ptr{GObject}), :_GtkTreeIter]), :insert_prefix => (:Cint, [:Cstring]), :no_matches => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEntryCompletion
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEntryCompletion
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEventControllerFocus GtkEventController libgtk4 gtk_event_controller_focus_get_type
    begin
        function GLib.signalnames(::Type{GtkEventControllerFocus})
            vcat([:enter, :leave], signalnames(supertype(GtkEventControllerFocus)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :enter => (:Nothing, Any[]), :leave => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEventControllerFocus
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEventControllerFocus
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEventControllerKey GtkEventController libgtk4 gtk_event_controller_key_get_type
    begin
        function GLib.signalnames(::Type{GtkEventControllerKey})
            vcat([:im_update, :key_pressed, :key_released, :modifiers], signalnames(supertype(GtkEventControllerKey)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :key_released => (:Nothing, [:UInt32, :UInt32, :UInt32]), :im_update => (:Nothing, Any[]), :key_pressed => (:Cint, [:UInt32, :UInt32, :UInt32]), :modifiers => (:Cint, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEventControllerKey
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEventControllerKey
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEventControllerLegacy GtkEventController libgtk4 gtk_event_controller_legacy_get_type
    begin
        function GLib.signalnames(::Type{GtkEventControllerLegacy})
            vcat([:event], signalnames(supertype(GtkEventControllerLegacy)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :event => (:Cint, [:GdkEvent]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEventControllerLegacy
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEventControllerLegacy
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEventControllerMotion GtkEventController libgtk4 gtk_event_controller_motion_get_type
    begin
        function GLib.signalnames(::Type{GtkEventControllerMotion})
            vcat([:enter, :leave, :motion], signalnames(supertype(GtkEventControllerMotion)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :enter => (:Nothing, [:Float64, :Float64]), :motion => (:Nothing, [:Float64, :Float64]), :leave => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEventControllerMotion
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEventControllerMotion
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEventControllerScroll GtkEventController libgtk4 gtk_event_controller_scroll_get_type
    begin
        function GLib.signalnames(::Type{GtkEventControllerScroll})
            vcat([:decelerate, :scroll, :scroll_begin, :scroll_end], signalnames(supertype(GtkEventControllerScroll)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :scroll => (:Cint, [:Float64, :Float64]), :decelerate => (:Nothing, [:Float64, :Float64]), :scroll_end => (:Nothing, Any[]), :scroll_begin => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEventControllerScroll
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEventControllerScroll
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkEveryFilter GtkMultiFilter libgtk4 gtk_every_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkEveryFilter})
            vcat([:items_changed], signalnames(supertype(GtkEveryFilter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkEveryFilter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkEveryFilter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkExpander GtkWidget libgtk4 gtk_expander_get_type
    begin
        function GLib.signalnames(::Type{GtkExpander})
            vcat([:activate], signalnames(supertype(GtkExpander)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkExpander
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkExpander
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFileChooserDialog GtkDialog libgtk4 gtk_file_chooser_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkFileChooserDialog})
            signalnames(supertype(GtkFileChooserDialog))
        end
    end
    GLib.@Gobject GtkNativeDialog GObject libgtk4 gtk_native_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkNativeDialog})
            vcat([:response], signalnames(supertype(GtkNativeDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :response => (:Nothing, [:Int32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkNativeDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkNativeDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFileChooserNative GtkNativeDialog libgtk4 gtk_file_chooser_native_get_type
    begin
        function GLib.signalnames(::Type{GtkFileChooserNative})
            signalnames(supertype(GtkFileChooserNative))
        end
    end
    GLib.@Gobject GtkFileChooserWidget GtkWidget libgtk4 gtk_file_chooser_widget_get_type
    begin
        function GLib.signalnames(::Type{GtkFileChooserWidget})
            vcat([:desktop_folder, :down_folder, :home_folder, :location_popup, :location_popup_on_paste, :location_toggle_popup, :places_shortcut, :quick_bookmark, :recent_shortcut, :search_shortcut, :show_hidden, :up_folder], signalnames(supertype(GtkFileChooserWidget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :location_popup_on_paste => (:Nothing, Any[]), :map => (:Nothing, Any[]), :show_hidden => (:Nothing, Any[]), :location_popup => (:Nothing, [:Cstring]), :quick_bookmark => (:Nothing, [:Int32]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :home_folder => (:Nothing, Any[]), :down_folder => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :location_toggle_popup => (:Nothing, Any[]), :desktop_folder => (:Nothing, Any[]), :places_shortcut => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :recent_shortcut => (:Nothing, Any[]), :up_folder => (:Nothing, Any[]), :mnemonic_activate => (:Cint, [:Cint]), :search_shortcut => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFileChooserWidget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFileChooserWidget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFileDialog GObject libgtk4 gtk_file_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkFileDialog})
            signalnames(supertype(GtkFileDialog))
        end
    end
    GLib.@Gobject GtkFileFilter GtkFilter libgtk4 gtk_file_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkFileFilter})
            signalnames(supertype(GtkFileFilter))
        end
    end
    GLib.@Gobject GtkFileLauncher GObject libgtk4 gtk_file_launcher_get_type
    begin
        function GLib.signalnames(::Type{GtkFileLauncher})
            signalnames(supertype(GtkFileLauncher))
        end
    end
    GLib.@Gobject GtkFilterListModel GObject libgtk4 gtk_filter_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkFilterListModel})
            vcat([:items_changed, :sections_changed], signalnames(supertype(GtkFilterListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFilterListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFilterListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFixed GtkWidget libgtk4 gtk_fixed_get_type
    begin
        function GLib.signalnames(::Type{GtkFixed})
            signalnames(supertype(GtkFixed))
        end
    end
    GLib.@Gobject GtkFixedLayout GtkLayoutManager libgtk4 gtk_fixed_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkFixedLayout})
            signalnames(supertype(GtkFixedLayout))
        end
    end
    GLib.@Gobject GtkFixedLayoutChild GtkLayoutChild libgtk4 gtk_fixed_layout_child_get_type
    begin
        function GLib.signalnames(::Type{GtkFixedLayoutChild})
            signalnames(supertype(GtkFixedLayoutChild))
        end
    end
    GLib.@Gobject GtkFlattenListModel GObject libgtk4 gtk_flatten_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkFlattenListModel})
            vcat([:items_changed, :sections_changed], signalnames(supertype(GtkFlattenListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFlattenListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFlattenListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFlowBox GtkWidget libgtk4 gtk_flow_box_get_type
    begin
        function GLib.signalnames(::Type{GtkFlowBox})
            vcat([:activate_cursor_child, :child_activated, :move_cursor, :select_all, :selected_children_changed, :toggle_cursor_child, :unselect_all], signalnames(supertype(GtkFlowBox)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :select_all => (:Nothing, Any[]), :activate_cursor_child => (:Nothing, Any[]), :child_activated => (:Nothing, Expr[:(Ptr{GObject})]), :selected_children_changed => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :unselect_all => (:Nothing, Any[]), :move_cursor => (:Cint, [:UInt32, :Int32, :Cint, :Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :toggle_cursor_child => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFlowBox
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFlowBox
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFlowBoxChild GtkWidget libgtk4 gtk_flow_box_child_get_type
    begin
        function GLib.signalnames(::Type{GtkFlowBoxChild})
            vcat([:activate], signalnames(supertype(GtkFlowBoxChild)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFlowBoxChild
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFlowBoxChild
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFontButton GtkWidget libgtk4 gtk_font_button_get_type
    begin
        function GLib.signalnames(::Type{GtkFontButton})
            vcat([:activate, :font_set, :font_activated], signalnames(supertype(GtkFontButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :font_set => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFontButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFontButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFontChooserDialog GtkDialog libgtk4 gtk_font_chooser_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkFontChooserDialog})
            vcat([:font_activated], signalnames(supertype(GtkFontChooserDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :close => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :response => (:Nothing, [:Int32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFontChooserDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFontChooserDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFontChooserWidget GtkWidget libgtk4 gtk_font_chooser_widget_get_type
    begin
        function GLib.signalnames(::Type{GtkFontChooserWidget})
            vcat([:font_activated], signalnames(supertype(GtkFontChooserWidget)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFontChooserWidget
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFontChooserWidget
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFontDialog GObject libgtk4 gtk_font_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkFontDialog})
            signalnames(supertype(GtkFontDialog))
        end
    end
    GLib.@Gobject GtkFontDialogButton GtkWidget libgtk4 gtk_font_dialog_button_get_type
    begin
        function GLib.signalnames(::Type{GtkFontDialogButton})
            vcat([:activate], signalnames(supertype(GtkFontDialogButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkFontDialogButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkFontDialogButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkFrame GtkWidget libgtk4 gtk_frame_get_type
    begin
        function GLib.signalnames(::Type{GtkFrame})
            signalnames(supertype(GtkFrame))
        end
    end
    GLib.@Gobject GtkGLArea GtkWidget libgtk4 gtk_gl_area_get_type
    begin
        function GLib.signalnames(::Type{GtkGLArea})
            vcat([:create_context, :render, :resize], signalnames(supertype(GtkGLArea)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :render => (:Cint, Expr[:(Ptr{GObject})]), :create_context => (:(Ptr{GObject}), Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :resize => (:Nothing, [:Int32, :Int32]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGLArea
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGLArea
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureClick GtkGestureSingle libgtk4 gtk_gesture_click_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureClick})
            vcat([:pressed, :released, :stopped, :unpaired_release], signalnames(supertype(GtkGestureClick)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :released => (:Nothing, [:Int32, :Float64, :Float64]), :unpaired_release => (:Nothing, [:Float64, :Float64, :UInt32, :GdkEventSequence]), :update => (:Nothing, [:GdkEventSequence]), :stopped => (:Nothing, Any[]), :end => (:Nothing, [:GdkEventSequence]), :pressed => (:Nothing, [:Int32, :Float64, :Float64]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureClick
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureClick
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureDrag GtkGestureSingle libgtk4 gtk_gesture_drag_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureDrag})
            vcat([:drag_begin, :drag_end, :drag_update], signalnames(supertype(GtkGestureDrag)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :drag_begin => (:Nothing, [:Float64, :Float64]), :drag_update => (:Nothing, [:Float64, :Float64]), :update => (:Nothing, [:GdkEventSequence]), :end => (:Nothing, [:GdkEventSequence]), :drag_end => (:Nothing, [:Float64, :Float64]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureDrag
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureDrag
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureLongPress GtkGestureSingle libgtk4 gtk_gesture_long_press_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureLongPress})
            vcat([:cancelled, :pressed], signalnames(supertype(GtkGestureLongPress)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :update => (:Nothing, [:GdkEventSequence]), :pressed => (:Nothing, [:Float64, :Float64]), :end => (:Nothing, [:GdkEventSequence]), :cancelled => (:Nothing, Any[]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureLongPress
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureLongPress
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGesturePan GtkGestureDrag libgtk4 gtk_gesture_pan_get_type
    begin
        function GLib.signalnames(::Type{GtkGesturePan})
            vcat([:pan], signalnames(supertype(GtkGesturePan)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :drag_begin => (:Nothing, [:Float64, :Float64]), :drag_update => (:Nothing, [:Float64, :Float64]), :update => (:Nothing, [:GdkEventSequence]), :pan => (:Nothing, [:UInt32, :Float64]), :end => (:Nothing, [:GdkEventSequence]), :drag_end => (:Nothing, [:Float64, :Float64]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGesturePan
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGesturePan
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureRotate GtkGesture libgtk4 gtk_gesture_rotate_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureRotate})
            vcat([:angle_changed], signalnames(supertype(GtkGestureRotate)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :update => (:Nothing, [:GdkEventSequence]), :angle_changed => (:Nothing, [:Float64, :Float64]), :end => (:Nothing, [:GdkEventSequence]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureRotate
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureRotate
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureStylus GtkGestureSingle libgtk4 gtk_gesture_stylus_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureStylus})
            vcat([:down, :motion, :proximity, :up], signalnames(supertype(GtkGestureStylus)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :down => (:Nothing, [:Float64, :Float64]), :update => (:Nothing, [:GdkEventSequence]), :proximity => (:Nothing, [:Float64, :Float64]), :end => (:Nothing, [:GdkEventSequence]), :motion => (:Nothing, [:Float64, :Float64]), :up => (:Nothing, [:Float64, :Float64]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureStylus
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureStylus
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureSwipe GtkGestureSingle libgtk4 gtk_gesture_swipe_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureSwipe})
            vcat([:swipe], signalnames(supertype(GtkGestureSwipe)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :swipe => (:Nothing, [:Float64, :Float64]), :update => (:Nothing, [:GdkEventSequence]), :end => (:Nothing, [:GdkEventSequence]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureSwipe
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureSwipe
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGestureZoom GtkGesture libgtk4 gtk_gesture_zoom_get_type
    begin
        function GLib.signalnames(::Type{GtkGestureZoom})
            vcat([:scale_changed], signalnames(supertype(GtkGestureZoom)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :begin => (:Nothing, [:GdkEventSequence]), :scale_changed => (:Nothing, [:Float64]), :update => (:Nothing, [:GdkEventSequence]), :end => (:Nothing, [:GdkEventSequence]), :cancel => (:Nothing, [:GdkEventSequence]), :sequence_state_changed => (:Nothing, [:GdkEventSequence, :UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGestureZoom
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGestureZoom
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkGraphicsOffload GtkWidget libgtk4 gtk_graphics_offload_get_type
    begin
        function GLib.signalnames(::Type{GtkGraphicsOffload})
            signalnames(supertype(GtkGraphicsOffload))
        end
    end
    GLib.@Gobject GtkGrid GtkWidget libgtk4 gtk_grid_get_type
    begin
        function GLib.signalnames(::Type{GtkGrid})
            signalnames(supertype(GtkGrid))
        end
    end
    GLib.@Gobject GtkGridLayout GtkLayoutManager libgtk4 gtk_grid_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkGridLayout})
            signalnames(supertype(GtkGridLayout))
        end
    end
    GLib.@Gobject GtkGridLayoutChild GtkLayoutChild libgtk4 gtk_grid_layout_child_get_type
    begin
        function GLib.signalnames(::Type{GtkGridLayoutChild})
            signalnames(supertype(GtkGridLayoutChild))
        end
    end
    GLib.@Gobject GtkListBase GtkWidget libgtk4 gtk_list_base_get_type
    begin
        function GLib.signalnames(::Type{GtkListBase})
            signalnames(supertype(GtkListBase))
        end
    end
    GLib.@Gobject GtkGridView GtkListBase libgtk4 gtk_grid_view_get_type
    begin
        function GLib.signalnames(::Type{GtkGridView})
            vcat([:activate], signalnames(supertype(GtkGridView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkGridView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkGridView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkHeaderBar GtkWidget libgtk4 gtk_header_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkHeaderBar})
            signalnames(supertype(GtkHeaderBar))
        end
    end
    GLib.@Gobject GtkIMContext GObject libgtk4 gtk_im_context_get_type
    begin
        function GLib.signalnames(::Type{GtkIMContext})
            vcat([:commit, :delete_surrounding, :preedit_changed, :preedit_end, :preedit_start, :retrieve_surrounding], signalnames(supertype(GtkIMContext)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :preedit_changed => (:Nothing, Any[]), :delete_surrounding => (:Cint, [:Int32, :Int32]), :preedit_start => (:Nothing, Any[]), :commit => (:Nothing, [:Cstring]), :preedit_end => (:Nothing, Any[]), :retrieve_surrounding => (:Cint, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkIMContext
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkIMContext
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkIMContextSimple GtkIMContext libgtk4 gtk_im_context_simple_get_type
    begin
        function GLib.signalnames(::Type{GtkIMContextSimple})
            signalnames(supertype(GtkIMContextSimple))
        end
    end
    GLib.@Gobject GtkIMMulticontext GtkIMContext libgtk4 gtk_im_multicontext_get_type
    begin
        function GLib.signalnames(::Type{GtkIMMulticontext})
            signalnames(supertype(GtkIMMulticontext))
        end
    end
    GLib.@Gobject GtkIconPaintable GObject libgtk4 gtk_icon_paintable_get_type
    begin
        function GLib.signalnames(::Type{GtkIconPaintable})
            vcat([:invalidate_contents, :invalidate_size], signalnames(supertype(GtkIconPaintable)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkIconPaintable
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkIconPaintable
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkIconTheme GObject libgtk4 gtk_icon_theme_get_type
    begin
        function GLib.signalnames(::Type{GtkIconTheme})
            vcat([:changed], signalnames(supertype(GtkIconTheme)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkIconTheme
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkIconTheme
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkIconView GtkWidget libgtk4 gtk_icon_view_get_type
    begin
        function GLib.signalnames(::Type{GtkIconView})
            vcat([:activate_cursor_item, :item_activated, :move_cursor, :select_all, :select_cursor_item, :selection_changed, :toggle_cursor_item, :unselect_all], signalnames(supertype(GtkIconView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :map => (:Nothing, Any[]), :selection_changed => (:Nothing, Any[]), :toggle_cursor_item => (:Nothing, Any[]), :activate_cursor_item => (:Cint, Any[]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :select_all => (:Nothing, Any[]), :select_cursor_item => (:Nothing, Any[]), :item_activated => (:Nothing, [:GtkTreePath]), :unrealize => (:Nothing, Any[]), :unselect_all => (:Nothing, Any[]), :move_cursor => (:Cint, [:UInt32, :Int32, :Cint, :Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkIconView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkIconView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkImage GtkWidget libgtk4 gtk_image_get_type
    begin
        function GLib.signalnames(::Type{GtkImage})
            signalnames(supertype(GtkImage))
        end
    end
    GLib.@Gobject GtkInfoBar GtkWidget libgtk4 gtk_info_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkInfoBar})
            vcat([:close, :response], signalnames(supertype(GtkInfoBar)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :close => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :response => (:Nothing, [:Int32]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkInfoBar
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkInfoBar
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkInscription GtkWidget libgtk4 gtk_inscription_get_type
    begin
        function GLib.signalnames(::Type{GtkInscription})
            signalnames(supertype(GtkInscription))
        end
    end
    GLib.@Gobject GtkKeyvalTrigger GtkShortcutTrigger libgtk4 gtk_keyval_trigger_get_type
    begin
        function GLib.signalnames(::Type{GtkKeyvalTrigger})
            signalnames(supertype(GtkKeyvalTrigger))
        end
    end
    GLib.@Gobject GtkLabel GtkWidget libgtk4 gtk_label_get_type
    begin
        function GLib.signalnames(::Type{GtkLabel})
            vcat([:activate_current_link, :activate_link, :copy_clipboard, :move_cursor], signalnames(supertype(GtkLabel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :activate_link => (:Cint, [:Cstring]), :unrealize => (:Nothing, Any[]), :move_cursor => (:Nothing, [:UInt32, :Int32, :Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :copy_clipboard => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate_current_link => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkLabel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkLabel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkLevelBar GtkWidget libgtk4 gtk_level_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkLevelBar})
            vcat([:offset_changed], signalnames(supertype(GtkLevelBar)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :offset_changed => (:Nothing, [:Cstring]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkLevelBar
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkLevelBar
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkLinkButton GtkButton libgtk4 gtk_link_button_get_type
    begin
        function GLib.signalnames(::Type{GtkLinkButton})
            vcat([:activate_link], signalnames(supertype(GtkLinkButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :activate_link => (:Cint, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :clicked => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkLinkButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkLinkButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkListBox GtkWidget libgtk4 gtk_list_box_get_type
    begin
        function GLib.signalnames(::Type{GtkListBox})
            vcat([:activate_cursor_row, :move_cursor, :row_activated, :row_selected, :select_all, :selected_rows_changed, :toggle_cursor_row, :unselect_all], signalnames(supertype(GtkListBox)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :map => (:Nothing, Any[]), :activate_cursor_row => (:Nothing, Any[]), :row_activated => (:Nothing, Expr[:(Ptr{GObject})]), :row_selected => (:Nothing, Expr[:(Ptr{GObject})]), :selected_rows_changed => (:Nothing, Any[]), :toggle_cursor_row => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :select_all => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :unselect_all => (:Nothing, Any[]), :move_cursor => (:Nothing, [:UInt32, :Int32, :Cint, :Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkListBox
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkListBox
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkListBoxRow GtkWidget libgtk4 gtk_list_box_row_get_type
    begin
        function GLib.signalnames(::Type{GtkListBoxRow})
            vcat([:activate], signalnames(supertype(GtkListBoxRow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkListBoxRow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkListBoxRow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkListHeader GObject libgtk4 gtk_list_header_get_type
    begin
        function GLib.signalnames(::Type{GtkListHeader})
            signalnames(supertype(GtkListHeader))
        end
    end
    GLib.@Gobject GtkListStore GObject libgtk4 gtk_list_store_get_type
    begin
        function GLib.signalnames(::Type{GtkListStore})
            vcat([:row_changed, :row_deleted, :row_has_child_toggled, :row_inserted, :sort_column_changed], signalnames(supertype(GtkListStore)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkListStore
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkListStore
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkListView GtkListBase libgtk4 gtk_list_view_get_type
    begin
        function GLib.signalnames(::Type{GtkListView})
            vcat([:activate], signalnames(supertype(GtkListView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkListView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkListView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkLockButton GtkButton libgtk4 gtk_lock_button_get_type
    begin
        function GLib.signalnames(::Type{GtkLockButton})
            signalnames(supertype(GtkLockButton))
        end
    end
    GLib.@Gobject GtkMapListModel GObject libgtk4 gtk_map_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkMapListModel})
            vcat([:items_changed, :sections_changed], signalnames(supertype(GtkMapListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMapListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMapListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMediaControls GtkWidget libgtk4 gtk_media_controls_get_type
    begin
        function GLib.signalnames(::Type{GtkMediaControls})
            signalnames(supertype(GtkMediaControls))
        end
    end
    GLib.@Gobject GtkMediaStream GObject libgtk4 gtk_media_stream_get_type
    begin
        function GLib.signalnames(::Type{GtkMediaStream})
            vcat([:invalidate_contents, :invalidate_size], signalnames(supertype(GtkMediaStream)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMediaStream
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMediaStream
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMediaFile GtkMediaStream libgtk4 gtk_media_file_get_type
    begin
        function GLib.signalnames(::Type{GtkMediaFile})
            vcat([:invalidate_contents, :invalidate_size], signalnames(supertype(GtkMediaFile)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMediaFile
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMediaFile
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMenuButton GtkWidget libgtk4 gtk_menu_button_get_type
    begin
        function GLib.signalnames(::Type{GtkMenuButton})
            vcat([:activate], signalnames(supertype(GtkMenuButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMenuButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMenuButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMessageDialog GtkDialog libgtk4 gtk_message_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkMessageDialog})
            signalnames(supertype(GtkMessageDialog))
        end
    end
    GLib.@Gobject GtkMnemonicAction GtkShortcutAction libgtk4 gtk_mnemonic_action_get_type
    begin
        function GLib.signalnames(::Type{GtkMnemonicAction})
            signalnames(supertype(GtkMnemonicAction))
        end
    end
    GLib.@Gobject GtkMnemonicTrigger GtkShortcutTrigger libgtk4 gtk_mnemonic_trigger_get_type
    begin
        function GLib.signalnames(::Type{GtkMnemonicTrigger})
            signalnames(supertype(GtkMnemonicTrigger))
        end
    end
    GLib.@Gobject GtkMountOperation GMountOperation libgtk4 gtk_mount_operation_get_type
    begin
        function GLib.signalnames(::Type{GtkMountOperation})
            signalnames(supertype(GtkMountOperation))
        end
    end
    GLib.@Gobject GtkMultiSelection GObject libgtk4 gtk_multi_selection_get_type
    begin
        function GLib.signalnames(::Type{GtkMultiSelection})
            vcat([:items_changed, :sections_changed, :selection_changed], signalnames(supertype(GtkMultiSelection)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMultiSelection
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMultiSelection
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkMultiSorter GtkSorter libgtk4 gtk_multi_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkMultiSorter})
            vcat([:items_changed], signalnames(supertype(GtkMultiSorter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, [:UInt32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkMultiSorter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkMultiSorter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkNamedAction GtkShortcutAction libgtk4 gtk_named_action_get_type
    begin
        function GLib.signalnames(::Type{GtkNamedAction})
            signalnames(supertype(GtkNamedAction))
        end
    end
    GLib.@Gobject GtkNeverTrigger GtkShortcutTrigger libgtk4 gtk_never_trigger_get_type
    begin
        function GLib.signalnames(::Type{GtkNeverTrigger})
            signalnames(supertype(GtkNeverTrigger))
        end
    end
    GLib.@Gobject GtkNoSelection GObject libgtk4 gtk_no_selection_get_type
    begin
        function GLib.signalnames(::Type{GtkNoSelection})
            vcat([:items_changed, :sections_changed, :selection_changed], signalnames(supertype(GtkNoSelection)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkNoSelection
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkNoSelection
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkNotebook GtkWidget libgtk4 gtk_notebook_get_type
    begin
        function GLib.signalnames(::Type{GtkNotebook})
            vcat([:change_current_page, :create_window, :focus_tab, :move_focus_out, :page_added, :page_removed, :page_reordered, :reorder_tab, :select_page, :switch_page], signalnames(supertype(GtkNotebook)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :page_reordered => (:Nothing, Any[:(Ptr{GObject}), :UInt32]), :map => (:Nothing, Any[]), :page_removed => (:Nothing, Any[:(Ptr{GObject}), :UInt32]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :focus_tab => (:Cint, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :reorder_tab => (:Cint, [:UInt32, :Cint]), :move_focus_out => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :create_window => (:(Ptr{GObject}), Expr[:(Ptr{GObject})]), :select_page => (:Cint, [:Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :change_current_page => (:Cint, [:Int32]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :page_added => (:Nothing, Any[:(Ptr{GObject}), :UInt32]), :switch_page => (:Nothing, Any[:(Ptr{GObject}), :UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkNotebook
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkNotebook
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkNotebookPage GObject libgtk4 gtk_notebook_page_get_type
    begin
        function GLib.signalnames(::Type{GtkNotebookPage})
            signalnames(supertype(GtkNotebookPage))
        end
    end
    GLib.@Gobject GtkNothingAction GtkShortcutAction libgtk4 gtk_nothing_action_get_type
    begin
        function GLib.signalnames(::Type{GtkNothingAction})
            signalnames(supertype(GtkNothingAction))
        end
    end
    GLib.@Gobject GtkNumericSorter GtkSorter libgtk4 gtk_numeric_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkNumericSorter})
            signalnames(supertype(GtkNumericSorter))
        end
    end
    begin
        abstract type GtkObjectExpression <: GtkExpression end
    end
    begin
        mutable struct GtkObjectExpressionLeaf <: GtkObjectExpression
            handle::Ptr{GtkExpression}
        end
    end
    GLib.@Gobject GtkOverlay GtkWidget libgtk4 gtk_overlay_get_type
    begin
        function GLib.signalnames(::Type{GtkOverlay})
            vcat([:get_child_position], signalnames(supertype(GtkOverlay)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :get_child_position => (:Cint, Any[:(Ptr{GObject}), :_GdkRectangle]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkOverlay
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkOverlay
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkOverlayLayout GtkLayoutManager libgtk4 gtk_overlay_layout_get_type
    begin
        function GLib.signalnames(::Type{GtkOverlayLayout})
            signalnames(supertype(GtkOverlayLayout))
        end
    end
    GLib.@Gobject GtkOverlayLayoutChild GtkLayoutChild libgtk4 gtk_overlay_layout_child_get_type
    begin
        function GLib.signalnames(::Type{GtkOverlayLayoutChild})
            signalnames(supertype(GtkOverlayLayoutChild))
        end
    end
    GLib.@Gobject GtkPadController GtkEventController libgtk4 gtk_pad_controller_get_type
    begin
        function GLib.signalnames(::Type{GtkPadController})
            signalnames(supertype(GtkPadController))
        end
    end
    GLib.@Gobject GtkPageSetup GObject libgtk4 gtk_page_setup_get_type
    begin
        function GLib.signalnames(::Type{GtkPageSetup})
            signalnames(supertype(GtkPageSetup))
        end
    end
    GLib.@Gobject GtkPaned GtkWidget libgtk4 gtk_paned_get_type
    begin
        function GLib.signalnames(::Type{GtkPaned})
            vcat([:accept_position, :cancel_position, :cycle_child_focus, :cycle_handle_focus, :move_handle, :toggle_handle_focus], signalnames(supertype(GtkPaned)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :toggle_handle_focus => (:Cint, Any[]), :cancel_position => (:Cint, Any[]), :cycle_handle_focus => (:Cint, [:Cint]), :cycle_child_focus => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :accept_position => (:Cint, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :move_handle => (:Cint, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPaned
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPaned
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkPasswordEntry GtkWidget libgtk4 gtk_password_entry_get_type
    begin
        function GLib.signalnames(::Type{GtkPasswordEntry})
            vcat([:activate, :changed, :delete_text, :insert_text], signalnames(supertype(GtkPasswordEntry)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPasswordEntry
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPasswordEntry
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkPasswordEntryBuffer GtkEntryBuffer libgtk4 gtk_password_entry_buffer_get_type
    begin
        function GLib.signalnames(::Type{GtkPasswordEntryBuffer})
            signalnames(supertype(GtkPasswordEntryBuffer))
        end
    end
    GLib.@Gobject GtkPicture GtkWidget libgtk4 gtk_picture_get_type
    begin
        function GLib.signalnames(::Type{GtkPicture})
            signalnames(supertype(GtkPicture))
        end
    end
    GLib.@Gobject GtkPopoverMenu GtkPopover libgtk4 gtk_popover_menu_get_type
    begin
        function GLib.signalnames(::Type{GtkPopoverMenu})
            signalnames(supertype(GtkPopoverMenu))
        end
    end
    GLib.@Gobject GtkPopoverMenuBar GtkWidget libgtk4 gtk_popover_menu_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkPopoverMenuBar})
            signalnames(supertype(GtkPopoverMenuBar))
        end
    end
    GLib.@Gobject GtkPrintContext GObject libgtk4 gtk_print_context_get_type
    begin
        function GLib.signalnames(::Type{GtkPrintContext})
            signalnames(supertype(GtkPrintContext))
        end
    end
    GLib.@Gobject GtkPrintDialog GObject libgtk4 gtk_print_dialog_get_type
    begin
        function GLib.signalnames(::Type{GtkPrintDialog})
            signalnames(supertype(GtkPrintDialog))
        end
    end
    GLib.@Gobject GtkPrintJob GObject libgtk4 gtk_print_job_get_type
    begin
        function GLib.signalnames(::Type{GtkPrintJob})
            vcat([:status_changed], signalnames(supertype(GtkPrintJob)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :status_changed => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPrintJob
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPrintJob
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkPrintOperation GObject libgtk4 gtk_print_operation_get_type
    begin
        function GLib.signalnames(::Type{GtkPrintOperation})
            vcat([:begin_print, :create_custom_widget, :custom_widget_apply, :done, :draw_page, :end_print, :paginate, :preview, :request_page_setup, :status_changed, :update_custom_widget, :got_page_size, :ready], signalnames(supertype(GtkPrintOperation)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :create_custom_widget => (:(Ptr{GObject}), Any[]), :status_changed => (:Nothing, Any[]), :end_print => (:Nothing, Expr[:(Ptr{GObject})]), :update_custom_widget => (:Nothing, Expr[:(Ptr{GObject}), :(Ptr{GObject}), :(Ptr{GObject})]), :paginate => (:Cint, Expr[:(Ptr{GObject})]), :request_page_setup => (:Nothing, Any[:(Ptr{GObject}), :Int32, :(Ptr{GObject})]), :begin_print => (:Nothing, Expr[:(Ptr{GObject})]), :done => (:Nothing, [:UInt32]), :preview => (:Cint, Expr[:(Ptr{GObject}), :(Ptr{GObject}), :(Ptr{GObject})]), :custom_widget_apply => (:Nothing, Expr[:(Ptr{GObject})]), :draw_page => (:Nothing, Any[:(Ptr{GObject}), :Int32]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPrintOperation
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPrintOperation
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkPrintSettings GObject libgtk4 gtk_print_settings_get_type
    begin
        function GLib.signalnames(::Type{GtkPrintSettings})
            signalnames(supertype(GtkPrintSettings))
        end
    end
    GLib.@Gobject GtkPrinter GObject libgtk4 gtk_printer_get_type
    begin
        function GLib.signalnames(::Type{GtkPrinter})
            vcat([:details_acquired], signalnames(supertype(GtkPrinter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :details_acquired => (:Nothing, [:Cint]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkPrinter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkPrinter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkProgressBar GtkWidget libgtk4 gtk_progress_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkProgressBar})
            signalnames(supertype(GtkProgressBar))
        end
    end
    begin
        abstract type GtkPropertyExpression <: GtkExpression end
    end
    begin
        mutable struct GtkPropertyExpressionLeaf <: GtkPropertyExpression
            handle::Ptr{GtkExpression}
        end
    end
    GLib.@Gobject GtkRange GtkWidget libgtk4 gtk_range_get_type
    begin
        function GLib.signalnames(::Type{GtkRange})
            vcat([:adjust_bounds, :change_value, :move_slider, :value_changed], signalnames(supertype(GtkRange)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :change_value => (:Cint, [:UInt32, :Float64]), :move_slider => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :value_changed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :adjust_bounds => (:Nothing, [:Float64]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkRange
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkRange
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkRecentManager GObject libgtk4 gtk_recent_manager_get_type
    begin
        function GLib.signalnames(::Type{GtkRecentManager})
            vcat([:changed], signalnames(supertype(GtkRecentManager)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkRecentManager
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkRecentManager
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkRevealer GtkWidget libgtk4 gtk_revealer_get_type
    begin
        function GLib.signalnames(::Type{GtkRevealer})
            signalnames(supertype(GtkRevealer))
        end
    end
    GLib.@Gobject GtkScale GtkRange libgtk4 gtk_scale_get_type
    begin
        function GLib.signalnames(::Type{GtkScale})
            signalnames(supertype(GtkScale))
        end
    end
    GLib.@Gobject GtkScaleButton GtkWidget libgtk4 gtk_scale_button_get_type
    begin
        function GLib.signalnames(::Type{GtkScaleButton})
            vcat([:popdown, :popup, :value_changed], signalnames(supertype(GtkScaleButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :popdown => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :value_changed => (:Nothing, [:Float64]), :popup => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkScaleButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkScaleButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkScrollbar GtkWidget libgtk4 gtk_scrollbar_get_type
    begin
        function GLib.signalnames(::Type{GtkScrollbar})
            signalnames(supertype(GtkScrollbar))
        end
    end
    GLib.@Gobject GtkScrolledWindow GtkWidget libgtk4 gtk_scrolled_window_get_type
    begin
        function GLib.signalnames(::Type{GtkScrolledWindow})
            vcat([:edge_overshot, :edge_reached, :move_focus_out, :scroll_child], signalnames(supertype(GtkScrolledWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :move_focus_out => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :edge_overshot => (:Nothing, [:UInt32]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :edge_reached => (:Nothing, [:UInt32]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :scroll_child => (:Cint, [:UInt32, :Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkScrolledWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkScrolledWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSearchBar GtkWidget libgtk4 gtk_search_bar_get_type
    begin
        function GLib.signalnames(::Type{GtkSearchBar})
            signalnames(supertype(GtkSearchBar))
        end
    end
    GLib.@Gobject GtkSearchEntry GtkWidget libgtk4 gtk_search_entry_get_type
    begin
        function GLib.signalnames(::Type{GtkSearchEntry})
            vcat([:activate, :next_match, :previous_match, :search_changed, :search_started, :stop_search, :changed, :delete_text, :insert_text], signalnames(supertype(GtkSearchEntry)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :previous_match => (:Nothing, Any[]), :search_started => (:Nothing, Any[]), :search_changed => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :stop_search => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :next_match => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSearchEntry
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSearchEntry
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSelectionFilterModel GObject libgtk4 gtk_selection_filter_model_get_type
    begin
        function GLib.signalnames(::Type{GtkSelectionFilterModel})
            vcat([:items_changed], signalnames(supertype(GtkSelectionFilterModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSelectionFilterModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSelectionFilterModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSeparator GtkWidget libgtk4 gtk_separator_get_type
    begin
        function GLib.signalnames(::Type{GtkSeparator})
            signalnames(supertype(GtkSeparator))
        end
    end
    GLib.@Gobject GtkSettings GObject libgtk4 gtk_settings_get_type
    begin
        function GLib.signalnames(::Type{GtkSettings})
            vcat([:gtk_private_changed], signalnames(supertype(GtkSettings)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSettings
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSettings
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkShortcut GObject libgtk4 gtk_shortcut_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcut})
            signalnames(supertype(GtkShortcut))
        end
    end
    GLib.@Gobject GtkShortcutController GtkEventController libgtk4 gtk_shortcut_controller_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutController})
            vcat([:items_changed], signalnames(supertype(GtkShortcutController)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkShortcutController
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkShortcutController
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkShortcutLabel GtkWidget libgtk4 gtk_shortcut_label_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutLabel})
            signalnames(supertype(GtkShortcutLabel))
        end
    end
    GLib.@Gobject GtkShortcutsGroup GtkBox libgtk4 gtk_shortcuts_group_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutsGroup})
            signalnames(supertype(GtkShortcutsGroup))
        end
    end
    GLib.@Gobject GtkShortcutsSection GtkBox libgtk4 gtk_shortcuts_section_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutsSection})
            vcat([:change_current_page], signalnames(supertype(GtkShortcutsSection)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :change_current_page => (:Cint, [:Int32]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkShortcutsSection
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkShortcutsSection
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkShortcutsShortcut GtkWidget libgtk4 gtk_shortcuts_shortcut_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutsShortcut})
            signalnames(supertype(GtkShortcutsShortcut))
        end
    end
    GLib.@Gobject GtkShortcutsWindow GtkWindow libgtk4 gtk_shortcuts_window_get_type
    begin
        function GLib.signalnames(::Type{GtkShortcutsWindow})
            vcat([:close, :search], signalnames(supertype(GtkShortcutsWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :search => (:Nothing, Any[]), :close => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkShortcutsWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkShortcutsWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSignalAction GtkShortcutAction libgtk4 gtk_signal_action_get_type
    begin
        function GLib.signalnames(::Type{GtkSignalAction})
            signalnames(supertype(GtkSignalAction))
        end
    end
    GLib.@Gobject GtkSignalListItemFactory GtkListItemFactory libgtk4 gtk_signal_list_item_factory_get_type
    begin
        function GLib.signalnames(::Type{GtkSignalListItemFactory})
            vcat([:bind, :setup, :teardown, :unbind], signalnames(supertype(GtkSignalListItemFactory)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :setup => (:Nothing, Expr[:(Ptr{GObject})]), :unbind => (:Nothing, Expr[:(Ptr{GObject})]), :teardown => (:Nothing, Expr[:(Ptr{GObject})]), :bind => (:Nothing, Expr[:(Ptr{GObject})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSignalListItemFactory
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSignalListItemFactory
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSingleSelection GObject libgtk4 gtk_single_selection_get_type
    begin
        function GLib.signalnames(::Type{GtkSingleSelection})
            vcat([:items_changed, :sections_changed, :selection_changed], signalnames(supertype(GtkSingleSelection)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSingleSelection
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSingleSelection
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSizeGroup GObject libgtk4 gtk_size_group_get_type
    begin
        function GLib.signalnames(::Type{GtkSizeGroup})
            signalnames(supertype(GtkSizeGroup))
        end
    end
    GLib.@Gobject GtkSliceListModel GObject libgtk4 gtk_slice_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkSliceListModel})
            vcat([:items_changed, :sections_changed], signalnames(supertype(GtkSliceListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSliceListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSliceListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSnapshot GdkSnapshot libgtk4 gtk_snapshot_get_type
    begin
        function GLib.signalnames(::Type{GtkSnapshot})
            signalnames(supertype(GtkSnapshot))
        end
    end
    GLib.@Gobject GtkSortListModel GObject libgtk4 gtk_sort_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkSortListModel})
            vcat([:items_changed, :sections_changed], signalnames(supertype(GtkSortListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSortListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSortListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSpinButton GtkWidget libgtk4 gtk_spin_button_get_type
    begin
        function GLib.signalnames(::Type{GtkSpinButton})
            vcat([:activate, :change_value, :input, :output, :value_changed, :wrapped, :editing_done, :remove_widget, :changed, :delete_text, :insert_text], signalnames(supertype(GtkSpinButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :change_value => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :input => (:Int32, [:Float64]), :value_changed => (:Nothing, Any[]), :wrapped => (:Nothing, Any[]), :output => (:Cint, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSpinButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSpinButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkSpinner GtkWidget libgtk4 gtk_spinner_get_type
    begin
        function GLib.signalnames(::Type{GtkSpinner})
            signalnames(supertype(GtkSpinner))
        end
    end
    GLib.@Gobject GtkStack GtkWidget libgtk4 gtk_stack_get_type
    begin
        function GLib.signalnames(::Type{GtkStack})
            signalnames(supertype(GtkStack))
        end
    end
    GLib.@Gobject GtkStackPage GObject libgtk4 gtk_stack_page_get_type
    begin
        function GLib.signalnames(::Type{GtkStackPage})
            signalnames(supertype(GtkStackPage))
        end
    end
    GLib.@Gobject GtkStackSidebar GtkWidget libgtk4 gtk_stack_sidebar_get_type
    begin
        function GLib.signalnames(::Type{GtkStackSidebar})
            signalnames(supertype(GtkStackSidebar))
        end
    end
    GLib.@Gobject GtkStackSwitcher GtkWidget libgtk4 gtk_stack_switcher_get_type
    begin
        function GLib.signalnames(::Type{GtkStackSwitcher})
            signalnames(supertype(GtkStackSwitcher))
        end
    end
    GLib.@Gobject GtkStatusbar GtkWidget libgtk4 gtk_statusbar_get_type
    begin
        function GLib.signalnames(::Type{GtkStatusbar})
            vcat([:text_popped, :text_pushed], signalnames(supertype(GtkStatusbar)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :text_popped => (:Nothing, [:UInt32, :Cstring]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :text_pushed => (:Nothing, [:UInt32, :Cstring]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkStatusbar
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkStatusbar
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkStringFilter GtkFilter libgtk4 gtk_string_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkStringFilter})
            signalnames(supertype(GtkStringFilter))
        end
    end
    GLib.@Gobject GtkStringList GObject libgtk4 gtk_string_list_get_type
    begin
        function GLib.signalnames(::Type{GtkStringList})
            vcat([:items_changed], signalnames(supertype(GtkStringList)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkStringList
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkStringList
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkStringObject GObject libgtk4 gtk_string_object_get_type
    begin
        function GLib.signalnames(::Type{GtkStringObject})
            signalnames(supertype(GtkStringObject))
        end
    end
    GLib.@Gobject GtkStringSorter GtkSorter libgtk4 gtk_string_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkStringSorter})
            signalnames(supertype(GtkStringSorter))
        end
    end
    GLib.@Gobject GtkStyleContext GObject libgtk4 gtk_style_context_get_type
    begin
        function GLib.signalnames(::Type{GtkStyleContext})
            signalnames(supertype(GtkStyleContext))
        end
    end
    GLib.@Gobject GtkSwitch GtkWidget libgtk4 gtk_switch_get_type
    begin
        function GLib.signalnames(::Type{GtkSwitch})
            vcat([:activate, :state_set], signalnames(supertype(GtkSwitch)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :state_set => (:Cint, [:Cint]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkSwitch
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkSwitch
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkText GtkWidget libgtk4 gtk_text_get_type
    begin
        function GLib.signalnames(::Type{GtkText})
            vcat([:activate, :backspace, :copy_clipboard, :cut_clipboard, :delete_from_cursor, :insert_at_cursor, :insert_emoji, :move_cursor, :paste_clipboard, :preedit_changed, :toggle_overwrite, :changed, :delete_text, :insert_text], signalnames(supertype(GtkText)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :insert_at_cursor => (:Nothing, [:Cstring]), :map => (:Nothing, Any[]), :preedit_changed => (:Nothing, [:Cstring]), :cut_clipboard => (:Nothing, Any[]), :insert_emoji => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :direction_changed => (:Nothing, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :delete_from_cursor => (:Nothing, [:UInt32, :Int32]), :unrealize => (:Nothing, Any[]), :toggle_overwrite => (:Nothing, Any[]), :backspace => (:Nothing, Any[]), :paste_clipboard => (:Nothing, Any[]), :move_cursor => (:Nothing, [:UInt32, :Int32, :Cint]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :copy_clipboard => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkText
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkText
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTextBuffer GObject libgtk4 gtk_text_buffer_get_type
    begin
        function GLib.signalnames(::Type{GtkTextBuffer})
            vcat([:apply_tag, :begin_user_action, :changed, :delete_range, :end_user_action, :insert_child_anchor, :insert_paintable, :insert_text, :mark_deleted, :mark_set, :modified_changed, :paste_done, :redo, :remove_tag, :undo], signalnames(supertype(GtkTextBuffer)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :undo => (:Nothing, Any[]), :remove_tag => (:Nothing, Any[:(Ptr{GObject}), :_GtkTextIter, :_GtkTextIter]), :insert_child_anchor => (:Nothing, Any[:_GtkTextIter, :(Ptr{GObject})]), :redo => (:Nothing, Any[]), :begin_user_action => (:Nothing, Any[]), :delete_range => (:Nothing, [:_GtkTextIter, :_GtkTextIter]), :mark_deleted => (:Nothing, Expr[:(Ptr{GObject})]), :end_user_action => (:Nothing, Any[]), :modified_changed => (:Nothing, Any[]), :mark_set => (:Nothing, Any[:_GtkTextIter, :(Ptr{GObject})]), :insert_paintable => (:Nothing, Any[:_GtkTextIter, :(Ptr{GObject})]), :apply_tag => (:Nothing, Any[:(Ptr{GObject}), :_GtkTextIter, :_GtkTextIter]), :changed => (:Nothing, Any[]), :insert_text => (:Nothing, [:_GtkTextIter, :Cstring, :Int32]), :paste_done => (:Nothing, Expr[:(Ptr{GObject})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTextBuffer
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTextBuffer
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTextChildAnchor GObject libgtk4 gtk_text_child_anchor_get_type
    begin
        function GLib.signalnames(::Type{GtkTextChildAnchor})
            signalnames(supertype(GtkTextChildAnchor))
        end
    end
    GLib.@Gobject GtkTextMark GObject libgtk4 gtk_text_mark_get_type
    begin
        function GLib.signalnames(::Type{GtkTextMark})
            signalnames(supertype(GtkTextMark))
        end
    end
    GLib.@Gobject GtkTextTag GObject libgtk4 gtk_text_tag_get_type
    begin
        function GLib.signalnames(::Type{GtkTextTag})
            signalnames(supertype(GtkTextTag))
        end
    end
    GLib.@Gobject GtkTextTagTable GObject libgtk4 gtk_text_tag_table_get_type
    begin
        function GLib.signalnames(::Type{GtkTextTagTable})
            vcat([:tag_added, :tag_changed, :tag_removed], signalnames(supertype(GtkTextTagTable)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :tag_added => (:Nothing, Expr[:(Ptr{GObject})]), :tag_removed => (:Nothing, Expr[:(Ptr{GObject})]), :tag_changed => (:Nothing, Any[:(Ptr{GObject}), :Cint]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTextTagTable
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTextTagTable
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTextView GtkWidget libgtk4 gtk_text_view_get_type
    begin
        function GLib.signalnames(::Type{GtkTextView})
            vcat([:backspace, :copy_clipboard, :cut_clipboard, :delete_from_cursor, :extend_selection, :insert_at_cursor, :insert_emoji, :move_cursor, :move_viewport, :paste_clipboard, :preedit_changed, :select_all, :set_anchor, :toggle_cursor_visible, :toggle_overwrite], signalnames(supertype(GtkTextView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :insert_at_cursor => (:Nothing, [:Cstring]), :map => (:Nothing, Any[]), :preedit_changed => (:Nothing, [:Cstring]), :cut_clipboard => (:Nothing, Any[]), :insert_emoji => (:Nothing, Any[]), :toggle_cursor_visible => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :state_flags_changed => (:Nothing, [:UInt32]), :select_all => (:Nothing, [:Cint]), :extend_selection => (:Cint, [:UInt32, :_GtkTextIter, :_GtkTextIter, :_GtkTextIter]), :delete_from_cursor => (:Nothing, [:UInt32, :Int32]), :unrealize => (:Nothing, Any[]), :set_anchor => (:Nothing, Any[]), :toggle_overwrite => (:Nothing, Any[]), :backspace => (:Nothing, Any[]), :move_viewport => (:Nothing, [:UInt32, :Int32]), :move_cursor => (:Nothing, [:UInt32, :Int32, :Cint]), :paste_clipboard => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :copy_clipboard => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTextView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTextView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkToggleButton GtkButton libgtk4 gtk_toggle_button_get_type
    begin
        function GLib.signalnames(::Type{GtkToggleButton})
            vcat([:toggled], signalnames(supertype(GtkToggleButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :toggled => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :clicked => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkToggleButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkToggleButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTooltip GObject libgtk4 gtk_tooltip_get_type
    begin
        function GLib.signalnames(::Type{GtkTooltip})
            signalnames(supertype(GtkTooltip))
        end
    end
    GLib.@Gobject GtkTreeExpander GtkWidget libgtk4 gtk_tree_expander_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeExpander})
            signalnames(supertype(GtkTreeExpander))
        end
    end
    GLib.@Gobject GtkTreeListModel GObject libgtk4 gtk_tree_list_model_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeListModel})
            vcat([:items_changed], signalnames(supertype(GtkTreeListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeListRow GObject libgtk4 gtk_tree_list_row_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeListRow})
            signalnames(supertype(GtkTreeListRow))
        end
    end
    GLib.@Gobject GtkTreeListRowSorter GtkSorter libgtk4 gtk_tree_list_row_sorter_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeListRowSorter})
            signalnames(supertype(GtkTreeListRowSorter))
        end
    end
    GLib.@Gobject GtkTreeModelFilter GObject libgtk4 gtk_tree_model_filter_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeModelFilter})
            vcat([:row_changed, :row_deleted, :row_has_child_toggled, :row_inserted], signalnames(supertype(GtkTreeModelFilter)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeModelFilter
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeModelFilter
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeModelSort GObject libgtk4 gtk_tree_model_sort_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeModelSort})
            vcat([:row_changed, :row_deleted, :row_has_child_toggled, :row_inserted, :sort_column_changed], signalnames(supertype(GtkTreeModelSort)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeModelSort
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeModelSort
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeSelection GObject libgtk4 gtk_tree_selection_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeSelection})
            vcat([:changed], signalnames(supertype(GtkTreeSelection)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :changed => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeSelection
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeSelection
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeStore GObject libgtk4 gtk_tree_store_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeStore})
            vcat([:row_changed, :row_deleted, :row_has_child_toggled, :row_inserted, :sort_column_changed], signalnames(supertype(GtkTreeStore)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeStore
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeStore
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeView GtkWidget libgtk4 gtk_tree_view_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeView})
            vcat([:columns_changed, :cursor_changed, :expand_collapse_cursor_row, :move_cursor, :row_activated, :row_collapsed, :row_expanded, :select_all, :select_cursor_parent, :select_cursor_row, :start_interactive_search, :test_collapse_row, :test_expand_row, :toggle_cursor_row, :unselect_all], signalnames(supertype(GtkTreeView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :select_cursor_row => (:Cint, [:Cint]), :map => (:Nothing, Any[]), :start_interactive_search => (:Cint, Any[]), :row_activated => (:Nothing, Any[:GtkTreePath, :(Ptr{GObject})]), :test_expand_row => (:Cint, [:_GtkTreeIter, :GtkTreePath]), :row_expanded => (:Nothing, [:_GtkTreeIter, :GtkTreePath]), :select_cursor_parent => (:Cint, Any[]), :toggle_cursor_row => (:Cint, Any[]), :move_focus => (:Nothing, [:UInt32]), :direction_changed => (:Nothing, [:UInt32]), :test_collapse_row => (:Cint, [:_GtkTreeIter, :GtkTreePath]), :state_flags_changed => (:Nothing, [:UInt32]), :select_all => (:Cint, Any[]), :cursor_changed => (:Nothing, Any[]), :expand_collapse_cursor_row => (:Cint, [:Cint, :Cint, :Cint]), :unrealize => (:Nothing, Any[]), :unselect_all => (:Cint, Any[]), :move_cursor => (:Cint, [:UInt32, :Int32, :Cint, :Cint]), :row_collapsed => (:Nothing, [:_GtkTreeIter, :GtkTreePath]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :columns_changed => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :mnemonic_activate => (:Cint, [:Cint]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkTreeViewColumn GInitiallyUnowned libgtk4 gtk_tree_view_column_get_type
    begin
        function GLib.signalnames(::Type{GtkTreeViewColumn})
            vcat([:clicked], signalnames(supertype(GtkTreeViewColumn)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :clicked => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkTreeViewColumn
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkTreeViewColumn
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkUriLauncher GObject libgtk4 gtk_uri_launcher_get_type
    begin
        function GLib.signalnames(::Type{GtkUriLauncher})
            signalnames(supertype(GtkUriLauncher))
        end
    end
    GLib.@Gobject GtkVideo GtkWidget libgtk4 gtk_video_get_type
    begin
        function GLib.signalnames(::Type{GtkVideo})
            signalnames(supertype(GtkVideo))
        end
    end
    GLib.@Gobject GtkViewport GtkWidget libgtk4 gtk_viewport_get_type
    begin
        function GLib.signalnames(::Type{GtkViewport})
            signalnames(supertype(GtkViewport))
        end
    end
    GLib.@Gobject GtkVolumeButton GtkScaleButton libgtk4 gtk_volume_button_get_type
    begin
        function GLib.signalnames(::Type{GtkVolumeButton})
            signalnames(supertype(GtkVolumeButton))
        end
    end
    GLib.@Gobject GtkWidgetPaintable GObject libgtk4 gtk_widget_paintable_get_type
    begin
        function GLib.signalnames(::Type{GtkWidgetPaintable})
            vcat([:invalidate_contents, :invalidate_size], signalnames(supertype(GtkWidgetPaintable)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: GtkWidgetPaintable
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: GtkWidgetPaintable
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject GtkWindowControls GtkWidget libgtk4 gtk_window_controls_get_type
    begin
        function GLib.signalnames(::Type{GtkWindowControls})
            signalnames(supertype(GtkWindowControls))
        end
    end
    GLib.@Gobject GtkWindowGroup GObject libgtk4 gtk_window_group_get_type
    begin
        function GLib.signalnames(::Type{GtkWindowGroup})
            signalnames(supertype(GtkWindowGroup))
        end
    end
    GLib.@Gobject GtkWindowHandle GtkWidget libgtk4 gtk_window_handle_get_type
    begin
        function GLib.signalnames(::Type{GtkWindowHandle})
            signalnames(supertype(GtkWindowHandle))
        end
    end
    function GtkATContext(_accessible_role, _accessible::GtkAccessible, _display::GdkDisplay; kwargs...)
        obj = G_.ATContext_create(_accessible_role, _accessible, _display)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAboutDialog(; kwargs...)
        obj = G_.AboutDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkActionBar(; kwargs...)
        obj = G_.ActionBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAdjustment(_value::Real, _lower::Real, _upper::Real, _step_increment::Real, _page_increment::Real, _page_size::Real; kwargs...)
        obj = G_.Adjustment_new(_value, _lower, _upper, _step_increment, _page_increment, _page_size)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAlternativeTrigger(_first::GtkShortcutTrigger, _second::GtkShortcutTrigger; kwargs...)
        obj = G_.AlternativeTrigger_new(_first, _second)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAnyFilter()
        G_.AnyFilter_new()
    end
    function GtkAppChooserButton(_content_type::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.AppChooserButton_new(_content_type)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAppChooserDialog(_parent::Maybe(GtkWindow), _flags, _file::GFile; kwargs...)
        obj = G_.AppChooserDialog_new(_parent, _flags, _file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAppChooserDialog(_parent::Maybe(GtkWindow), _flags, _content_type::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.AppChooserDialog_new_for_content_type(_parent, _flags, _content_type)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAppChooserWidget(_content_type::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.AppChooserWidget_new(_content_type)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkApplication(_application_id::Maybe(Union{AbstractString, Symbol}), _flags; kwargs...)
        obj = G_.Application_new(_application_id, _flags)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkApplicationWindow(_application::GtkApplication; kwargs...)
        obj = G_.ApplicationWindow_new(_application)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAspectFrame(_xalign::Real, _yalign::Real, _ratio::Real, _obey_child::Bool; kwargs...)
        obj = G_.AspectFrame_new(_xalign, _yalign, _ratio, _obey_child)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAssistant(; kwargs...)
        obj = G_.Assistant_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBinLayout()
        G_.BinLayout_new()
    end
    function GtkBookmarkList(_filename::Maybe(Union{AbstractString, Symbol}), _attributes::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.BookmarkList_new(_filename, _attributes)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBoolFilter(_expression::Maybe(GtkExpression); kwargs...)
        obj = G_.BoolFilter_new(_expression)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBox(_orientation, _spacing::Integer; kwargs...)
        obj = G_.Box_new(_orientation, _spacing)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBoxLayout(_orientation; kwargs...)
        obj = G_.BoxLayout_new(_orientation)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBuilder(; kwargs...)
        obj = G_.Builder_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBuilder(_filename::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.Builder_new_from_file(_filename)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBuilder(_string::Union{AbstractString, Symbol}, _length::Integer; kwargs...)
        obj = G_.Builder_new_from_string(_string, _length)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkBuilderCScope()
        G_.BuilderCScope_new()
    end
    function GtkBuilderListItemFactory(_scope::Maybe(GtkBuilderScope), _bytes::GBytes; kwargs...)
        obj = G_.BuilderListItemFactory_new_from_bytes(_scope, _bytes)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkButton(; kwargs...)
        obj = G_.Button_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkButton(_label::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.Button_new_with_label(_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCalendar(; kwargs...)
        obj = G_.Calendar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCallbackAction(_callback::Maybe(Function), _destroy::Function)
        G_.CallbackAction_new(_callback, _destroy)
    end
    function GtkCellAreaBox(; kwargs...)
        obj = G_.CellAreaBox_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererAccel(; kwargs...)
        obj = G_.CellRendererAccel_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererCombo(; kwargs...)
        obj = G_.CellRendererCombo_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererPixbuf(; kwargs...)
        obj = G_.CellRendererPixbuf_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererProgress(; kwargs...)
        obj = G_.CellRendererProgress_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererSpin(; kwargs...)
        obj = G_.CellRendererSpin_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererSpinner(; kwargs...)
        obj = G_.CellRendererSpinner_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererText(; kwargs...)
        obj = G_.CellRendererText_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellRendererToggle(; kwargs...)
        obj = G_.CellRendererToggle_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellView(; kwargs...)
        obj = G_.CellView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellView(_area::GtkCellArea, _context::GtkCellAreaContext; kwargs...)
        obj = G_.CellView_new_with_context(_area, _context)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellView(_markup::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.CellView_new_with_markup(_markup)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCellView(_texture::GdkTexture; kwargs...)
        obj = G_.CellView_new_with_texture(_texture)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCenterBox(; kwargs...)
        obj = G_.CenterBox_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCenterLayout(; kwargs...)
        obj = G_.CenterLayout_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCheckButton(; kwargs...)
        obj = G_.CheckButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkCheckButton(_label::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.CheckButton_new_with_label(_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorButton(; kwargs...)
        obj = G_.ColorButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorButton(_rgba::GdkRGBALike; kwargs...)
        obj = G_.ColorButton_new_with_rgba(_rgba)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorChooserDialog(_title::Maybe(Union{AbstractString, Symbol}), _parent::Maybe(GtkWindow); kwargs...)
        obj = G_.ColorChooserDialog_new(_title, _parent)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorChooserWidget(; kwargs...)
        obj = G_.ColorChooserWidget_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorDialog(; kwargs...)
        obj = G_.ColorDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColorDialogButton(_dialog::Maybe(GtkColorDialog); kwargs...)
        obj = G_.ColorDialogButton_new(_dialog)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColumnView(_model::Maybe(GtkSelectionModel); kwargs...)
        obj = G_.ColumnView_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkColumnViewColumn(_title::Maybe(Union{AbstractString, Symbol}), _factory::Maybe(GtkListItemFactory); kwargs...)
        obj = G_.ColumnViewColumn_new(_title, _factory)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkComboBox(; kwargs...)
        obj = G_.ComboBox_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkComboBox(_model::GtkTreeModel; kwargs...)
        obj = G_.ComboBox_new_with_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkComboBoxText()
        G_.ComboBoxText_new()
    end
    function GtkConstantExpression(_value::GValueLike)
        G_.ConstantExpression_new_for_value(_value)
    end
    function GtkConstraint(_target::Maybe(GtkConstraintTarget), _target_attribute, _relation, _source::Maybe(GtkConstraintTarget), _source_attribute, _multiplier::Real, _constant::Real, _strength::Integer; kwargs...)
        obj = G_.Constraint_new(_target, _target_attribute, _relation, _source, _source_attribute, _multiplier, _constant, _strength)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkConstraint(_target::Maybe(GtkConstraintTarget), _target_attribute, _relation, _constant::Real, _strength::Integer; kwargs...)
        obj = G_.Constraint_new_constant(_target, _target_attribute, _relation, _constant, _strength)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkConstraintGuide(; kwargs...)
        obj = G_.ConstraintGuide_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkConstraintLayout()
        G_.ConstraintLayout_new()
    end
    function GtkCssProvider()
        G_.CssProvider_new()
    end
    function GtkCustomFilter(_match_func::Maybe(Function), _user_destroy::Function)
        G_.CustomFilter_new(_match_func, _user_destroy)
    end
    function GtkCustomLayout(_request_mode::Maybe(Function), _measure::Function, _allocate::Function)
        G_.CustomLayout_new(_request_mode, _measure, _allocate)
    end
    function GtkCustomSorter(_sort_func::Maybe(Function), _user_destroy::Maybe(Function))
        G_.CustomSorter_new(_sort_func, _user_destroy)
    end
    function GtkDialog(; kwargs...)
        obj = G_.Dialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDirectoryList(_attributes::Maybe(Union{AbstractString, Symbol}), _file::Maybe(GFile); kwargs...)
        obj = G_.DirectoryList_new(_attributes, _file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDragSource(; kwargs...)
        obj = G_.DragSource_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDrawingArea(; kwargs...)
        obj = G_.DrawingArea_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDropControllerMotion(; kwargs...)
        obj = G_.DropControllerMotion_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDropDown(_model::Maybe(GListModel), _expression::Maybe(GtkExpression); kwargs...)
        obj = G_.DropDown_new(_model, _expression)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDropDown(_strings; kwargs...)
        obj = G_.DropDown_new_from_strings(_strings)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDropTarget(_type::Integer, _actions; kwargs...)
        obj = G_.DropTarget_new(_type, _actions)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkDropTargetAsync(_formats::Maybe(GdkContentFormats), _actions; kwargs...)
        obj = G_.DropTargetAsync_new(_formats, _actions)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEditableLabel(_str::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.EditableLabel_new(_str)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEmojiChooser()
        G_.EmojiChooser_new()
    end
    function GtkEntry(; kwargs...)
        obj = G_.Entry_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEntry(_buffer::GtkEntryBuffer; kwargs...)
        obj = G_.Entry_new_with_buffer(_buffer)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEntryBuffer(_initial_chars::Maybe(Union{AbstractString, Symbol}), _n_initial_chars::Integer; kwargs...)
        obj = G_.EntryBuffer_new(_initial_chars, _n_initial_chars)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEntryCompletion(; kwargs...)
        obj = G_.EntryCompletion_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEntryCompletion(_area::GtkCellArea; kwargs...)
        obj = G_.EntryCompletion_new_with_area(_area)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEventControllerFocus(; kwargs...)
        obj = G_.EventControllerFocus_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEventControllerKey()
        G_.EventControllerKey_new()
    end
    function GtkEventControllerLegacy()
        G_.EventControllerLegacy_new()
    end
    function GtkEventControllerMotion(; kwargs...)
        obj = G_.EventControllerMotion_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEventControllerScroll(_flags; kwargs...)
        obj = G_.EventControllerScroll_new(_flags)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkEveryFilter()
        G_.EveryFilter_new()
    end
    function GtkExpander(_label::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Expander_new(_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileChooserNative(_title::Maybe(Union{AbstractString, Symbol}), _parent::Maybe(GtkWindow), _action, _accept_label::Maybe(Union{AbstractString, Symbol}), _cancel_label::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.FileChooserNative_new(_title, _parent, _action, _accept_label, _cancel_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileChooserWidget(_action; kwargs...)
        obj = G_.FileChooserWidget_new(_action)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileDialog(; kwargs...)
        obj = G_.FileDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileFilter(; kwargs...)
        obj = G_.FileFilter_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileFilter(_variant::GVariant; kwargs...)
        obj = G_.FileFilter_new_from_gvariant(_variant)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFileLauncher(_file::Maybe(GFile); kwargs...)
        obj = G_.FileLauncher_new(_file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFilterListModel(_model::Maybe(GListModel), _filter::Maybe(GtkFilter); kwargs...)
        obj = G_.FilterListModel_new(_model, _filter)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFixed()
        G_.Fixed_new()
    end
    function GtkFixedLayout()
        G_.FixedLayout_new()
    end
    function GtkFlattenListModel(_model::Maybe(GListModel); kwargs...)
        obj = G_.FlattenListModel_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFlowBox(; kwargs...)
        obj = G_.FlowBox_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFlowBoxChild(; kwargs...)
        obj = G_.FlowBoxChild_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFontButton(; kwargs...)
        obj = G_.FontButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFontButton(_fontname::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.FontButton_new_with_font(_fontname)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFontChooserDialog(_title::Maybe(Union{AbstractString, Symbol}), _parent::Maybe(GtkWindow))
        G_.FontChooserDialog_new(_title, _parent)
    end
    function GtkFontChooserWidget(; kwargs...)
        obj = G_.FontChooserWidget_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFontDialog(; kwargs...)
        obj = G_.FontDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFontDialogButton(_dialog::Maybe(GtkFontDialog); kwargs...)
        obj = G_.FontDialogButton_new(_dialog)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkFrame(_label::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Frame_new(_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGLArea(; kwargs...)
        obj = G_.GLArea_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGestureClick()
        G_.GestureClick_new()
    end
    function GtkGestureDrag()
        G_.GestureDrag_new()
    end
    function GtkGestureLongPress(; kwargs...)
        obj = G_.GestureLongPress_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGesturePan(_orientation; kwargs...)
        obj = G_.GesturePan_new(_orientation)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGestureRotate()
        G_.GestureRotate_new()
    end
    function GtkGestureStylus(; kwargs...)
        obj = G_.GestureStylus_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGestureSwipe()
        G_.GestureSwipe_new()
    end
    function GtkGestureZoom()
        G_.GestureZoom_new()
    end
    function GtkGraphicsOffload(_child::Maybe(GtkWidget); kwargs...)
        obj = G_.GraphicsOffload_new(_child)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGrid(; kwargs...)
        obj = G_.Grid_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGridLayout(; kwargs...)
        obj = G_.GridLayout_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkGridView(_model::Maybe(GtkSelectionModel), _factory::Maybe(GtkListItemFactory); kwargs...)
        obj = G_.GridView_new(_model, _factory)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkHeaderBar(; kwargs...)
        obj = G_.HeaderBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkIMContextSimple()
        G_.IMContextSimple_new()
    end
    function GtkIMMulticontext()
        G_.IMMulticontext_new()
    end
    function GtkIconPaintable(_file::GFile, _size::Integer, _scale::Integer; kwargs...)
        obj = G_.IconPaintable_new_for_file(_file, _size, _scale)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkIconTheme(; kwargs...)
        obj = G_.IconTheme_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkIconView(; kwargs...)
        obj = G_.IconView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkIconView(_area::GtkCellArea; kwargs...)
        obj = G_.IconView_new_with_area(_area)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkIconView(_model::GtkTreeModel; kwargs...)
        obj = G_.IconView_new_with_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkImage(; kwargs...)
        obj = G_.Image_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkImage(_filename::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.Image_new_from_file(_filename)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkImage(_icon::GIcon; kwargs...)
        obj = G_.Image_new_from_gicon(_icon)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkImage(_paintable::Maybe(GdkPaintable); kwargs...)
        obj = G_.Image_new_from_paintable(_paintable)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkImage(_pixbuf::Maybe(GdkPixbuf); kwargs...)
        obj = G_.Image_new_from_pixbuf(_pixbuf)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkInfoBar(; kwargs...)
        obj = G_.InfoBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkInscription(_text::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Inscription_new(_text)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkKeyvalTrigger(_keyval::Integer, _modifiers; kwargs...)
        obj = G_.KeyvalTrigger_new(_keyval, _modifiers)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLabel(_str::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Label_new(_str)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLevelBar(; kwargs...)
        obj = G_.LevelBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLevelBar(_min_value::Real, _max_value::Real; kwargs...)
        obj = G_.LevelBar_new_for_interval(_min_value, _max_value)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLinkButton(_uri::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.LinkButton_new(_uri)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLinkButton(_uri::Union{AbstractString, Symbol}, _label::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.LinkButton_new_with_label(_uri, _label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkListBox(; kwargs...)
        obj = G_.ListBox_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkListBoxRow(; kwargs...)
        obj = G_.ListBoxRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkListStore(_types)
        G_.ListStore_new(_types)
    end
    function GtkListView(_model::Maybe(GtkSelectionModel), _factory::Maybe(GtkListItemFactory); kwargs...)
        obj = G_.ListView_new(_model, _factory)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkLockButton(_permission::Maybe(GPermission); kwargs...)
        obj = G_.LockButton_new(_permission)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMapListModel(_model::Maybe(GListModel), _map_func::Maybe(Function), _user_destroy::Function; kwargs...)
        obj = G_.MapListModel_new(_model, _map_func, _user_destroy)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMediaControls(_stream::Maybe(GtkMediaStream); kwargs...)
        obj = G_.MediaControls_new(_stream)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMediaFile(; kwargs...)
        obj = G_.MediaFile_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMediaFile(_file::GFile; kwargs...)
        obj = G_.MediaFile_new_for_file(_file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMediaFile(_filename::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.MediaFile_new_for_filename(_filename)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMediaFile(_stream::GInputStream; kwargs...)
        obj = G_.MediaFile_new_for_input_stream(_stream)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMenuButton(; kwargs...)
        obj = G_.MenuButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMnemonicTrigger(_keyval::Integer; kwargs...)
        obj = G_.MnemonicTrigger_new(_keyval)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMountOperation(_parent::Maybe(GtkWindow); kwargs...)
        obj = G_.MountOperation_new(_parent)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMultiSelection(_model::Maybe(GListModel); kwargs...)
        obj = G_.MultiSelection_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkMultiSorter(; kwargs...)
        obj = G_.MultiSorter_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkNamedAction(_name::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.NamedAction_new(_name)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkNoSelection(_model::Maybe(GListModel); kwargs...)
        obj = G_.NoSelection_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkNotebook(; kwargs...)
        obj = G_.Notebook_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkNumericSorter(_expression::Maybe(GtkExpression); kwargs...)
        obj = G_.NumericSorter_new(_expression)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkObjectExpression(_object::GObject)
        G_.ObjectExpression_new(_object)
    end
    function GtkOverlay(; kwargs...)
        obj = G_.Overlay_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkOverlayLayout()
        G_.OverlayLayout_new()
    end
    function GtkPadController(_group::GActionGroup, _pad::Maybe(GdkDevice); kwargs...)
        obj = G_.PadController_new(_group, _pad)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPageSetup()
        G_.PageSetup_new()
    end
    function GtkPageSetup(_file_name::Union{AbstractString, Symbol})
        G_.PageSetup_new_from_file(_file_name)
    end
    function GtkPageSetup(_variant::GVariant)
        G_.PageSetup_new_from_gvariant(_variant)
    end
    function GtkPageSetup(_key_file::GKeyFile, _group_name::Maybe(Union{AbstractString, Symbol}))
        G_.PageSetup_new_from_key_file(_key_file, _group_name)
    end
    function GtkPaned(_orientation; kwargs...)
        obj = G_.Paned_new(_orientation)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPasswordEntry(; kwargs...)
        obj = G_.PasswordEntry_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPasswordEntryBuffer()
        G_.PasswordEntryBuffer_new()
    end
    function GtkPicture(; kwargs...)
        obj = G_.Picture_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPicture(_file::Maybe(GFile); kwargs...)
        obj = G_.Picture_new_for_file(_file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPicture(_filename::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Picture_new_for_filename(_filename)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPicture(_paintable::Maybe(GdkPaintable); kwargs...)
        obj = G_.Picture_new_for_paintable(_paintable)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPicture(_pixbuf::Maybe(GdkPixbuf); kwargs...)
        obj = G_.Picture_new_for_pixbuf(_pixbuf)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPopover(; kwargs...)
        obj = G_.Popover_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPopoverMenu(_model::Maybe(GMenuModel); kwargs...)
        obj = G_.PopoverMenu_new_from_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPopoverMenu(_model::GMenuModel, _flags; kwargs...)
        obj = G_.PopoverMenu_new_from_model_full(_model, _flags)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPopoverMenuBar(_model::Maybe(GMenuModel); kwargs...)
        obj = G_.PopoverMenuBar_new_from_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPrintDialog(; kwargs...)
        obj = G_.PrintDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPrintJob(_title::Union{AbstractString, Symbol}, _printer::GtkPrinter, _settings::GtkPrintSettings, _page_setup::GtkPageSetup; kwargs...)
        obj = G_.PrintJob_new(_title, _printer, _settings, _page_setup)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPrintOperation(; kwargs...)
        obj = G_.PrintOperation_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPrintSettings()
        G_.PrintSettings_new()
    end
    function GtkPrintSettings(_file_name::Union{AbstractString, Symbol})
        G_.PrintSettings_new_from_file(_file_name)
    end
    function GtkPrintSettings(_variant::GVariant)
        G_.PrintSettings_new_from_gvariant(_variant)
    end
    function GtkPrintSettings(_key_file::GKeyFile, _group_name::Maybe(Union{AbstractString, Symbol}))
        G_.PrintSettings_new_from_key_file(_key_file, _group_name)
    end
    function GtkPrinter(_name::Union{AbstractString, Symbol}, _backend::GtkPrintBackend, _virtual_::Bool; kwargs...)
        obj = G_.Printer_new(_name, _backend, _virtual_)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkProgressBar(; kwargs...)
        obj = G_.ProgressBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkPropertyExpression(_this_type::Integer, _expression::Maybe(GtkExpression), _property_name::Union{AbstractString, Symbol})
        G_.PropertyExpression_new(_this_type, _expression, _property_name)
    end
    function GtkPropertyExpression(_expression::Maybe(GtkExpression), _pspec::GParam)
        G_.PropertyExpression_new_for_pspec(_expression, _pspec)
    end
    function GtkRecentManager(; kwargs...)
        obj = G_.RecentManager_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkRevealer(; kwargs...)
        obj = G_.Revealer_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkScale(_orientation, _adjustment::Maybe(GtkAdjustment); kwargs...)
        obj = G_.Scale_new(_orientation, _adjustment)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkScale(_orientation, _min::Real, _max::Real, _step::Real; kwargs...)
        obj = G_.Scale_new_with_range(_orientation, _min, _max, _step)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkScaleButton(_min::Real, _max::Real, _step::Real, _icons; kwargs...)
        obj = G_.ScaleButton_new(_min, _max, _step, _icons)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkScrollbar(_orientation, _adjustment::Maybe(GtkAdjustment); kwargs...)
        obj = G_.Scrollbar_new(_orientation, _adjustment)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkScrolledWindow(; kwargs...)
        obj = G_.ScrolledWindow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSearchBar(; kwargs...)
        obj = G_.SearchBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSearchEntry(; kwargs...)
        obj = G_.SearchEntry_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSelectionFilterModel(_model::Maybe(GtkSelectionModel); kwargs...)
        obj = G_.SelectionFilterModel_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSeparator(_orientation)
        G_.Separator_new(_orientation)
    end
    function GtkShortcut(_trigger::Maybe(GtkShortcutTrigger), _action::Maybe(GtkShortcutAction); kwargs...)
        obj = G_.Shortcut_new(_trigger, _action)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkShortcutAction(_string::Union{AbstractString, Symbol})
        G_.ShortcutAction_parse_string(_string)
    end
    function GtkShortcutController(; kwargs...)
        obj = G_.ShortcutController_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkShortcutController(_model::GListModel; kwargs...)
        obj = G_.ShortcutController_new_for_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkShortcutLabel(_accelerator::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.ShortcutLabel_new(_accelerator)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkShortcutTrigger(_string::Union{AbstractString, Symbol})
        G_.ShortcutTrigger_parse_string(_string)
    end
    function GtkSignalAction(_signal_name::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.SignalAction_new(_signal_name)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSignalListItemFactory()
        G_.SignalListItemFactory_new()
    end
    function GtkSingleSelection(_model::Maybe(GListModel); kwargs...)
        obj = G_.SingleSelection_new(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSizeGroup(_mode; kwargs...)
        obj = G_.SizeGroup_new(_mode)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSliceListModel(_model::Maybe(GListModel), _offset::Integer, _size::Integer; kwargs...)
        obj = G_.SliceListModel_new(_model, _offset, _size)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSnapshot()
        G_.Snapshot_new()
    end
    function GtkSortListModel(_model::Maybe(GListModel), _sorter::Maybe(GtkSorter); kwargs...)
        obj = G_.SortListModel_new(_model, _sorter)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSpinButton(_adjustment::Maybe(GtkAdjustment), _climb_rate::Real, _digits::Integer; kwargs...)
        obj = G_.SpinButton_new(_adjustment, _climb_rate, _digits)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSpinButton(_min::Real, _max::Real, _step::Real; kwargs...)
        obj = G_.SpinButton_new_with_range(_min, _max, _step)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSpinner(; kwargs...)
        obj = G_.Spinner_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStack(; kwargs...)
        obj = G_.Stack_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStackSidebar(; kwargs...)
        obj = G_.StackSidebar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStackSwitcher(; kwargs...)
        obj = G_.StackSwitcher_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStatusbar()
        G_.Statusbar_new()
    end
    function GtkStringFilter(_expression::Maybe(GtkExpression); kwargs...)
        obj = G_.StringFilter_new(_expression)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStringList(_strings; kwargs...)
        obj = G_.StringList_new(_strings)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStringObject(_string::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.StringObject_new(_string)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkStringSorter(_expression::Maybe(GtkExpression); kwargs...)
        obj = G_.StringSorter_new(_expression)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkSwitch(; kwargs...)
        obj = G_.Switch_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkText(; kwargs...)
        obj = G_.Text_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkText(_buffer::GtkEntryBuffer; kwargs...)
        obj = G_.Text_new_with_buffer(_buffer)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTextBuffer(_table::Maybe(GtkTextTagTable); kwargs...)
        obj = G_.TextBuffer_new(_table)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTextChildAnchor()
        G_.TextChildAnchor_new()
    end
    function GtkTextChildAnchor(_character::Union{AbstractString, Symbol})
        G_.TextChildAnchor_new_with_replacement(_character)
    end
    function GtkTextMark(_name::Maybe(Union{AbstractString, Symbol}), _left_gravity::Bool; kwargs...)
        obj = G_.TextMark_new(_name, _left_gravity)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTextTag(_name::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.TextTag_new(_name)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTextTagTable()
        G_.TextTagTable_new()
    end
    function GtkTextView(; kwargs...)
        obj = G_.TextView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTextView(_buffer::GtkTextBuffer; kwargs...)
        obj = G_.TextView_new_with_buffer(_buffer)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkToggleButton(; kwargs...)
        obj = G_.ToggleButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkToggleButton(_label::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.ToggleButton_new_with_label(_label)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeExpander(; kwargs...)
        obj = G_.TreeExpander_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeListModel(_root::GListModel, _passthrough::Bool, _autoexpand::Bool, _create_func::Function, _user_destroy::Function; kwargs...)
        obj = G_.TreeListModel_new(_root, _passthrough, _autoexpand, _create_func, _user_destroy)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeListRowSorter(_sorter::Maybe(GtkSorter); kwargs...)
        obj = G_.TreeListRowSorter_new(_sorter)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeModelSort(_child_model::GtkTreeModel; kwargs...)
        obj = G_.TreeModelSort_new_with_model(_child_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeStore(_types)
        G_.TreeStore_new(_types)
    end
    function GtkTreeView(; kwargs...)
        obj = G_.TreeView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeView(_model::GtkTreeModel; kwargs...)
        obj = G_.TreeView_new_with_model(_model)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeViewColumn(; kwargs...)
        obj = G_.TreeViewColumn_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkTreeViewColumn(_area::GtkCellArea; kwargs...)
        obj = G_.TreeViewColumn_new_with_area(_area)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkUriLauncher(_uri::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.UriLauncher_new(_uri)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkVideo(; kwargs...)
        obj = G_.Video_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkVideo(_file::Maybe(GFile); kwargs...)
        obj = G_.Video_new_for_file(_file)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkVideo(_filename::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.Video_new_for_filename(_filename)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkVideo(_stream::Maybe(GtkMediaStream); kwargs...)
        obj = G_.Video_new_for_media_stream(_stream)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkViewport(_hadjustment::Maybe(GtkAdjustment), _vadjustment::Maybe(GtkAdjustment); kwargs...)
        obj = G_.Viewport_new(_hadjustment, _vadjustment)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkVolumeButton(; kwargs...)
        obj = G_.VolumeButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkWidgetPaintable(_widget::Maybe(GtkWidget); kwargs...)
        obj = G_.WidgetPaintable_new(_widget)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkWindow(; kwargs...)
        obj = G_.Window_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkWindowControls(_side; kwargs...)
        obj = G_.WindowControls_new(_side)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkWindowGroup()
        G_.WindowGroup_new()
    end
    function GtkWindowHandle(; kwargs...)
        obj = G_.WindowHandle_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function GtkAccessibleList(_accessibles)
        G_.AccessibleList_new_from_array(_accessibles)
    end
    function GtkAccessibleList(_list::GLib.LList{GLib._GList{Ptr{GObject}}})
        G_.AccessibleList_new_from_list(_list)
    end
    function GtkBitset()
        G_.Bitset_new_empty()
    end
    function GtkBitset(_start::Integer, _n_items::Integer)
        G_.Bitset_new_range(_start, _n_items)
    end
    function GtkBorder()
        G_.Border_new()
    end
    function GtkCssSection(_file::Maybe(GFile), _start::GtkCssLocationLike, _end::GtkCssLocationLike)
        G_.CssSection_new(_file, _start, _end)
    end
    function GtkPaperSize(_name::Maybe(Union{AbstractString, Symbol}))
        G_.PaperSize_new(_name)
    end
    function GtkPaperSize(_name::Union{AbstractString, Symbol}, _display_name::Union{AbstractString, Symbol}, _width::Real, _height::Real, _unit)
        G_.PaperSize_new_custom(_name, _display_name, _width, _height, _unit)
    end
    function GtkPaperSize(_variant::GVariant)
        G_.PaperSize_new_from_gvariant(_variant)
    end
    function GtkPaperSize(_ipp_name::Union{AbstractString, Symbol}, _width::Real, _height::Real)
        G_.PaperSize_new_from_ipp(_ipp_name, _width, _height)
    end
    function GtkPaperSize(_key_file::GKeyFile, _group_name::Maybe(Union{AbstractString, Symbol}))
        G_.PaperSize_new_from_key_file(_key_file, _group_name)
    end
    function GtkPaperSize(_ppd_name::Union{AbstractString, Symbol}, _ppd_display_name::Union{AbstractString, Symbol}, _width::Real, _height::Real)
        G_.PaperSize_new_from_ppd(_ppd_name, _ppd_display_name, _width, _height)
    end
    function GtkRequisition()
        G_.Requisition_new()
    end
    function GtkScrollInfo()
        G_.ScrollInfo_new()
    end
    function GtkTreePath()
        G_.TreePath_new()
    end
    function GtkTreePath(_indices)
        G_.TreePath_new_from_indices(_indices)
    end
    function GtkTreePath(_path::Union{AbstractString, Symbol})
        G_.TreePath_new_from_string(_path)
    end
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ATContext.html)." GtkATContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AboutDialog.html)." GtkAboutDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ActionBar.html)." GtkActionBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ActivateAction.html)." GtkActivateAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Adjustment.html)." GtkAdjustment
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AlertDialog.html)." GtkAlertDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AlternativeTrigger.html)." GtkAlternativeTrigger
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AnyFilter.html)." GtkAnyFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AppChooserButton.html)." GtkAppChooserButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AppChooserDialog.html)." GtkAppChooserDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AppChooserWidget.html)." GtkAppChooserWidget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Application.html)." GtkApplication
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ApplicationWindow.html)." GtkApplicationWindow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AspectFrame.html)." GtkAspectFrame
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Assistant.html)." GtkAssistant
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.AssistantPage.html)." GtkAssistantPage
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BinLayout.html)." GtkBinLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BookmarkList.html)." GtkBookmarkList
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BoolFilter.html)." GtkBoolFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Box.html)." GtkBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BoxLayout.html)." GtkBoxLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BuilderCScope.html)." GtkBuilderCScope
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.BuilderListItemFactory.html)." GtkBuilderListItemFactory
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Button.html)." GtkButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Calendar.html)." GtkCalendar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CallbackAction.html)." GtkCallbackAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellArea.html)." GtkCellArea
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellAreaBox.html)." GtkCellAreaBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellAreaContext.html)." GtkCellAreaContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRenderer.html)." GtkCellRenderer
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererAccel.html)." GtkCellRendererAccel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererCombo.html)." GtkCellRendererCombo
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererPixbuf.html)." GtkCellRendererPixbuf
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererProgress.html)." GtkCellRendererProgress
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererSpin.html)." GtkCellRendererSpin
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererSpinner.html)." GtkCellRendererSpinner
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererText.html)." GtkCellRendererText
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellRendererToggle.html)." GtkCellRendererToggle
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CellView.html)." GtkCellView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CenterBox.html)." GtkCenterBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CenterLayout.html)." GtkCenterLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CheckButton.html)." GtkCheckButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColorButton.html)." GtkColorButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColorChooserDialog.html)." GtkColorChooserDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColorChooserWidget.html)." GtkColorChooserWidget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColorDialog.html)." GtkColorDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColorDialogButton.html)." GtkColorDialogButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColumnView.html)." GtkColumnView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColumnViewCell.html)." GtkColumnViewCell
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColumnViewColumn.html)." GtkColumnViewColumn
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColumnViewRow.html)." GtkColumnViewRow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ColumnViewSorter.html)." GtkColumnViewSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ComboBox.html)." GtkComboBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ComboBoxText.html)." GtkComboBoxText
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ConstantExpression.html)." GtkConstantExpression
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Constraint.html)." GtkConstraint
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ConstraintGuide.html)." GtkConstraintGuide
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ConstraintLayout.html)." GtkConstraintLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ConstraintLayoutChild.html)." GtkConstraintLayoutChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CssProvider.html)." GtkCssProvider
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CustomFilter.html)." GtkCustomFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CustomLayout.html)." GtkCustomLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.CustomSorter.html)." GtkCustomSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Dialog.html)." GtkDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DirectoryList.html)." GtkDirectoryList
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DragIcon.html)." GtkDragIcon
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DragSource.html)." GtkDragSource
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DrawingArea.html)." GtkDrawingArea
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DropControllerMotion.html)." GtkDropControllerMotion
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DropDown.html)." GtkDropDown
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DropTarget.html)." GtkDropTarget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.DropTargetAsync.html)." GtkDropTargetAsync
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EditableLabel.html)." GtkEditableLabel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EmojiChooser.html)." GtkEmojiChooser
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Entry.html)." GtkEntry
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EntryBuffer.html)." GtkEntryBuffer
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EntryCompletion.html)." GtkEntryCompletion
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventController.html)." GtkEventController
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventControllerFocus.html)." GtkEventControllerFocus
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventControllerKey.html)." GtkEventControllerKey
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventControllerLegacy.html)." GtkEventControllerLegacy
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventControllerMotion.html)." GtkEventControllerMotion
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EventControllerScroll.html)." GtkEventControllerScroll
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.EveryFilter.html)." GtkEveryFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Expander.html)." GtkExpander
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Expression.html)." GtkExpression
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileChooserDialog.html)." GtkFileChooserDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileChooserNative.html)." GtkFileChooserNative
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileChooserWidget.html)." GtkFileChooserWidget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileDialog.html)." GtkFileDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileFilter.html)." GtkFileFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FileLauncher.html)." GtkFileLauncher
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Filter.html)." GtkFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FilterListModel.html)." GtkFilterListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Fixed.html)." GtkFixed
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FixedLayout.html)." GtkFixedLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FixedLayoutChild.html)." GtkFixedLayoutChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FlattenListModel.html)." GtkFlattenListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FlowBox.html)." GtkFlowBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FlowBoxChild.html)." GtkFlowBoxChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FontButton.html)." GtkFontButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FontChooserDialog.html)." GtkFontChooserDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FontChooserWidget.html)." GtkFontChooserWidget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FontDialog.html)." GtkFontDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.FontDialogButton.html)." GtkFontDialogButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Frame.html)." GtkFrame
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GLArea.html)." GtkGLArea
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Gesture.html)." GtkGesture
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureClick.html)." GtkGestureClick
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureDrag.html)." GtkGestureDrag
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureLongPress.html)." GtkGestureLongPress
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GesturePan.html)." GtkGesturePan
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureRotate.html)." GtkGestureRotate
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureSingle.html)." GtkGestureSingle
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureStylus.html)." GtkGestureStylus
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureSwipe.html)." GtkGestureSwipe
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GestureZoom.html)." GtkGestureZoom
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GraphicsOffload.html)." GtkGraphicsOffload
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Grid.html)." GtkGrid
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GridLayout.html)." GtkGridLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GridLayoutChild.html)." GtkGridLayoutChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.GridView.html)." GtkGridView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.HeaderBar.html)." GtkHeaderBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IMContext.html)." GtkIMContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IMContextSimple.html)." GtkIMContextSimple
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IMMulticontext.html)." GtkIMMulticontext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IconPaintable.html)." GtkIconPaintable
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IconTheme.html)." GtkIconTheme
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.IconView.html)." GtkIconView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Image.html)." GtkImage
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.InfoBar.html)." GtkInfoBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Inscription.html)." GtkInscription
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.KeyvalTrigger.html)." GtkKeyvalTrigger
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Label.html)." GtkLabel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.LayoutChild.html)." GtkLayoutChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.LayoutManager.html)." GtkLayoutManager
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.LevelBar.html)." GtkLevelBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.LinkButton.html)." GtkLinkButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListBase.html)." GtkListBase
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListBox.html)." GtkListBox
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListBoxRow.html)." GtkListBoxRow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListHeader.html)." GtkListHeader
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListItem.html)." GtkListItem
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListItemFactory.html)." GtkListItemFactory
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListStore.html)." GtkListStore
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ListView.html)." GtkListView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.LockButton.html)." GtkLockButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MapListModel.html)." GtkMapListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MediaControls.html)." GtkMediaControls
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MediaFile.html)." GtkMediaFile
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MediaStream.html)." GtkMediaStream
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MenuButton.html)." GtkMenuButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MessageDialog.html)." GtkMessageDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MnemonicAction.html)." GtkMnemonicAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MnemonicTrigger.html)." GtkMnemonicTrigger
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MountOperation.html)." GtkMountOperation
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MultiFilter.html)." GtkMultiFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MultiSelection.html)." GtkMultiSelection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.MultiSorter.html)." GtkMultiSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NamedAction.html)." GtkNamedAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NativeDialog.html)." GtkNativeDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NeverTrigger.html)." GtkNeverTrigger
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NoSelection.html)." GtkNoSelection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Notebook.html)." GtkNotebook
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NotebookPage.html)." GtkNotebookPage
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NothingAction.html)." GtkNothingAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.NumericSorter.html)." GtkNumericSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ObjectExpression.html)." GtkObjectExpression
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Overlay.html)." GtkOverlay
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.OverlayLayout.html)." GtkOverlayLayout
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.OverlayLayoutChild.html)." GtkOverlayLayoutChild
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PadController.html)." GtkPadController
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PageSetup.html)." GtkPageSetup
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Paned.html)." GtkPaned
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PasswordEntry.html)." GtkPasswordEntry
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PasswordEntryBuffer.html)." GtkPasswordEntryBuffer
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Picture.html)." GtkPicture
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Popover.html)." GtkPopover
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PopoverMenu.html)." GtkPopoverMenu
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PopoverMenuBar.html)." GtkPopoverMenuBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PrintContext.html)." GtkPrintContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PrintDialog.html)." GtkPrintDialog
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PrintJob.html)." GtkPrintJob
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PrintOperation.html)." GtkPrintOperation
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PrintSettings.html)." GtkPrintSettings
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Printer.html)." GtkPrinter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ProgressBar.html)." GtkProgressBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.PropertyExpression.html)." GtkPropertyExpression
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Range.html)." GtkRange
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.RecentManager.html)." GtkRecentManager
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Revealer.html)." GtkRevealer
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Scale.html)." GtkScale
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ScaleButton.html)." GtkScaleButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Scrollbar.html)." GtkScrollbar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ScrolledWindow.html)." GtkScrolledWindow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SearchBar.html)." GtkSearchBar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SearchEntry.html)." GtkSearchEntry
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SelectionFilterModel.html)." GtkSelectionFilterModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Separator.html)." GtkSeparator
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Settings.html)." GtkSettings
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Shortcut.html)." GtkShortcut
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutAction.html)." GtkShortcutAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutController.html)." GtkShortcutController
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutLabel.html)." GtkShortcutLabel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutTrigger.html)." GtkShortcutTrigger
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutsGroup.html)." GtkShortcutsGroup
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutsSection.html)." GtkShortcutsSection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutsShortcut.html)." GtkShortcutsShortcut
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ShortcutsWindow.html)." GtkShortcutsWindow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SignalAction.html)." GtkSignalAction
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SignalListItemFactory.html)." GtkSignalListItemFactory
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SingleSelection.html)." GtkSingleSelection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SizeGroup.html)." GtkSizeGroup
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SliceListModel.html)." GtkSliceListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Snapshot.html)." GtkSnapshot
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SortListModel.html)." GtkSortListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Sorter.html)." GtkSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.SpinButton.html)." GtkSpinButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Spinner.html)." GtkSpinner
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Stack.html)." GtkStack
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StackPage.html)." GtkStackPage
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StackSidebar.html)." GtkStackSidebar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StackSwitcher.html)." GtkStackSwitcher
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Statusbar.html)." GtkStatusbar
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StringFilter.html)." GtkStringFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StringList.html)." GtkStringList
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StringObject.html)." GtkStringObject
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StringSorter.html)." GtkStringSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.StyleContext.html)." GtkStyleContext
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Switch.html)." GtkSwitch
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Text.html)." GtkText
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextBuffer.html)." GtkTextBuffer
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextChildAnchor.html)." GtkTextChildAnchor
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextMark.html)." GtkTextMark
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextTag.html)." GtkTextTag
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextTagTable.html)." GtkTextTagTable
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TextView.html)." GtkTextView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.ToggleButton.html)." GtkToggleButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Tooltip.html)." GtkTooltip
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeExpander.html)." GtkTreeExpander
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeListModel.html)." GtkTreeListModel
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeListRow.html)." GtkTreeListRow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeListRowSorter.html)." GtkTreeListRowSorter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeModelFilter.html)." GtkTreeModelFilter
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeModelSort.html)." GtkTreeModelSort
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeSelection.html)." GtkTreeSelection
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeStore.html)." GtkTreeStore
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeView.html)." GtkTreeView
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.TreeViewColumn.html)." GtkTreeViewColumn
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.UriLauncher.html)." GtkUriLauncher
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Video.html)." GtkVideo
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Viewport.html)." GtkViewport
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.VolumeButton.html)." GtkVolumeButton
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Widget.html)." GtkWidget
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.WidgetPaintable.html)." GtkWidgetPaintable
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.Window.html)." GtkWindow
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.WindowControls.html)." GtkWindowControls
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.WindowGroup.html)." GtkWindowGroup
    @doc "See the [GTK docs](https://docs.gtk.org/gtk4/class.WindowHandle.html)." GtkWindowHandle
    function on_state_change(f, object::GtkATContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "state-change", Nothing, (), after, user_data)
    end
    function on_activate_link(f, object::GtkAboutDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-link", Cint, (Cstring,), after, user_data)
    end
    function on_changed(f, object::GtkAdjustment, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_value_changed(f, object::GtkAdjustment, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "value-changed", Nothing, (), after, user_data)
    end
    function on_items_changed(f, object::GtkAnyFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_activate(f, object::GtkAppChooserButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkAppChooserButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_custom_item_activated(f, object::GtkAppChooserButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "custom-item-activated", Nothing, (Cstring,), after, user_data)
    end
    function on_application_activated(f, object::GtkAppChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "application-activated", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_application_selected(f, object::GtkAppChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "application-selected", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_query_end(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "query-end", Nothing, (), after, user_data)
    end
    function on_window_added(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "window-added", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_window_removed(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "window-removed", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_action_added(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-added", Nothing, (Cstring,), after, user_data)
    end
    function on_action_enabled_changed(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-enabled-changed", Nothing, (Cstring, Cint), after, user_data)
    end
    function on_action_removed(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-removed", Nothing, (Cstring,), after, user_data)
    end
    function on_action_state_changed(f, object::GtkApplication, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-state-changed", Nothing, (Cstring, GVariant), after, user_data)
    end
    function on_action_added(f, object::GtkApplicationWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-added", Nothing, (Cstring,), after, user_data)
    end
    function on_action_enabled_changed(f, object::GtkApplicationWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-enabled-changed", Nothing, (Cstring, Cint), after, user_data)
    end
    function on_action_removed(f, object::GtkApplicationWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-removed", Nothing, (Cstring,), after, user_data)
    end
    function on_action_state_changed(f, object::GtkApplicationWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "action-state-changed", Nothing, (Cstring, GVariant), after, user_data)
    end
    function on_apply(f, object::GtkAssistant, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "apply", Nothing, (), after, user_data)
    end
    function on_cancel(f, object::GtkAssistant, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cancel", Nothing, (), after, user_data)
    end
    function on_close(f, object::GtkAssistant, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "close", Nothing, (), after, user_data)
    end
    function on_escape(f, object::GtkAssistant, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "escape", Nothing, (), after, user_data)
    end
    function on_prepare(f, object::GtkAssistant, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "prepare", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_items_changed(f, object::GtkBookmarkList, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_activate(f, object::GtkButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_clicked(f, object::GtkButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "clicked", Nothing, (), after, user_data)
    end
    function on_day_selected(f, object::GtkCalendar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "day-selected", Nothing, (), after, user_data)
    end
    function on_next_month(f, object::GtkCalendar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "next-month", Nothing, (), after, user_data)
    end
    function on_next_year(f, object::GtkCalendar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "next-year", Nothing, (), after, user_data)
    end
    function on_prev_month(f, object::GtkCalendar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "prev-month", Nothing, (), after, user_data)
    end
    function on_prev_year(f, object::GtkCalendar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "prev-year", Nothing, (), after, user_data)
    end
    function on_add_editable(f, object::GtkCellArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "add-editable", Nothing, (Ptr{GObject}, Ptr{GtkWidget}, _GdkRectangle, Cstring), after, user_data)
    end
    function on_apply_attributes(f, object::GtkCellArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "apply-attributes", Nothing, (Ptr{GObject}, _GtkTreeIter, Cint, Cint), after, user_data)
    end
    function on_focus_changed(f, object::GtkCellArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "focus-changed", Nothing, (Ptr{GObject}, Cstring), after, user_data)
    end
    function on_remove_editable(f, object::GtkCellArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-editable", Nothing, (Ptr{GObject}, Ptr{GtkWidget}), after, user_data)
    end
    function on_editing_canceled(f, object::GtkCellRenderer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-canceled", Nothing, (), after, user_data)
    end
    function on_editing_started(f, object::GtkCellRenderer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-started", Nothing, (Ptr{GtkWidget}, Cstring), after, user_data)
    end
    function on_accel_cleared(f, object::GtkCellRendererAccel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "accel-cleared", Nothing, (Cstring,), after, user_data)
    end
    function on_accel_edited(f, object::GtkCellRendererAccel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "accel-edited", Nothing, (Cstring, UInt32, UInt32, UInt32), after, user_data)
    end
    function on_changed(f, object::GtkCellRendererCombo, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (Cstring, _GtkTreeIter), after, user_data)
    end
    function on_edited(f, object::GtkCellRendererText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "edited", Nothing, (Cstring, Cstring), after, user_data)
    end
    function on_toggled(f, object::GtkCellRendererToggle, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggled", Nothing, (Cstring,), after, user_data)
    end
    function on_activate(f, object::GtkCheckButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_toggled(f, object::GtkCheckButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggled", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkColorButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_color_set(f, object::GtkColorButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "color-set", Nothing, (), after, user_data)
    end
    function on_color_activated(f, object::GtkColorButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "color-activated", Nothing, (_GdkRGBA,), after, user_data)
    end
    function on_color_activated(f, object::GtkColorChooserDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "color-activated", Nothing, (_GdkRGBA,), after, user_data)
    end
    function on_color_activated(f, object::GtkColorChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "color-activated", Nothing, (_GdkRGBA,), after, user_data)
    end
    function on_activate(f, object::GtkColorDialogButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkColumnView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (UInt32,), after, user_data)
    end
    function on_activate(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_format_entry_text(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "format-entry-text", Cstring, (Cstring,), after, user_data)
    end
    function on_move_active(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-active", Nothing, (UInt32,), after, user_data)
    end
    function on_popdown(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "popdown", Cint, (), after, user_data)
    end
    function on_popup(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "popup", Nothing, (), after, user_data)
    end
    function on_editing_done(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-done", Nothing, (), after, user_data)
    end
    function on_remove_widget(f, object::GtkComboBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-widget", Nothing, (), after, user_data)
    end
    function on_editing_done(f, object::GtkComboBoxText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-done", Nothing, (), after, user_data)
    end
    function on_remove_widget(f, object::GtkComboBoxText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-widget", Nothing, (), after, user_data)
    end
    function on_parsing_error(f, object::GtkCssProvider, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "parsing-error", Nothing, (GtkCssSection, Ptr{GError}), after, user_data)
    end
    function on_gtk_private_changed(f, object::GtkCssProvider, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "gtk-private-changed", Nothing, (), after, user_data)
    end
    function on_close(f, object::GtkDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "close", Nothing, (), after, user_data)
    end
    function on_response(f, object::GtkDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "response", Nothing, (Int32,), after, user_data)
    end
    function on_items_changed(f, object::GtkDirectoryList, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_drag_begin(f, object::GtkDragSource, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-begin", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_drag_cancel(f, object::GtkDragSource, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-cancel", Cint, (Ptr{GObject}, UInt32), after, user_data)
    end
    function on_drag_end(f, object::GtkDragSource, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-end", Nothing, (Ptr{GObject}, Cint), after, user_data)
    end
    function on_prepare(f, object::GtkDragSource, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "prepare", Ptr{GObject}, (Float64, Float64), after, user_data)
    end
    function on_resize(f, object::GtkDrawingArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "resize", Nothing, (Int32, Int32), after, user_data)
    end
    function on_enter(f, object::GtkDropControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "enter", Nothing, (Float64, Float64), after, user_data)
    end
    function on_leave(f, object::GtkDropControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "leave", Nothing, (), after, user_data)
    end
    function on_motion(f, object::GtkDropControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "motion", Nothing, (Float64, Float64), after, user_data)
    end
    function on_activate(f, object::GtkDropDown, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_accept(f, object::GtkDropTarget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "accept", Cint, (Ptr{GObject},), after, user_data)
    end
    function on_drop(f, object::GtkDropTarget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drop", Cint, (_GValue, Float64, Float64), after, user_data)
    end
    function on_enter(f, object::GtkDropTarget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "enter", UInt32, (Float64, Float64), after, user_data)
    end
    function on_leave(f, object::GtkDropTarget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "leave", Nothing, (), after, user_data)
    end
    function on_motion(f, object::GtkDropTarget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "motion", UInt32, (Float64, Float64), after, user_data)
    end
    function on_accept(f, object::GtkDropTargetAsync, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "accept", Cint, (Ptr{GObject},), after, user_data)
    end
    function on_drag_enter(f, object::GtkDropTargetAsync, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-enter", UInt32, (Ptr{GObject}, Float64, Float64), after, user_data)
    end
    function on_drag_leave(f, object::GtkDropTargetAsync, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-leave", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_drag_motion(f, object::GtkDropTargetAsync, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-motion", UInt32, (Ptr{GObject}, Float64, Float64), after, user_data)
    end
    function on_drop(f, object::GtkDropTargetAsync, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drop", Cint, (Ptr{GObject}, Float64, Float64), after, user_data)
    end
    function on_changed(f, object::GtkEditableLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkEditableLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkEditableLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_emoji_picked(f, object::GtkEmojiChooser, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "emoji-picked", Nothing, (Cstring,), after, user_data)
    end
    function on_activate(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_icon_press(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "icon-press", Nothing, (UInt32,), after, user_data)
    end
    function on_icon_release(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "icon-release", Nothing, (UInt32,), after, user_data)
    end
    function on_editing_done(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-done", Nothing, (), after, user_data)
    end
    function on_remove_widget(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-widget", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_deleted_text(f, object::GtkEntryBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "deleted-text", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_inserted_text(f, object::GtkEntryBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "inserted-text", Nothing, (UInt32, Cstring, UInt32), after, user_data)
    end
    function on_cursor_on_match(f, object::GtkEntryCompletion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cursor-on-match", Cint, (Ptr{GObject}, _GtkTreeIter), after, user_data)
    end
    function on_insert_prefix(f, object::GtkEntryCompletion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-prefix", Cint, (Cstring,), after, user_data)
    end
    function on_match_selected(f, object::GtkEntryCompletion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "match-selected", Cint, (Ptr{GObject}, _GtkTreeIter), after, user_data)
    end
    function on_no_matches(f, object::GtkEntryCompletion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "no-matches", Nothing, (), after, user_data)
    end
    function on_enter(f, object::GtkEventControllerFocus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "enter", Nothing, (), after, user_data)
    end
    function on_leave(f, object::GtkEventControllerFocus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "leave", Nothing, (), after, user_data)
    end
    function on_im_update(f, object::GtkEventControllerKey, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "im-update", Nothing, (), after, user_data)
    end
    function on_key_pressed(f, object::GtkEventControllerKey, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "key-pressed", Cint, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_key_released(f, object::GtkEventControllerKey, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "key-released", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_modifiers(f, object::GtkEventControllerKey, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "modifiers", Cint, (UInt32,), after, user_data)
    end
    function on_event(f, object::GtkEventControllerLegacy, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "event", Cint, (GdkEvent,), after, user_data)
    end
    function on_enter(f, object::GtkEventControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "enter", Nothing, (Float64, Float64), after, user_data)
    end
    function on_leave(f, object::GtkEventControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "leave", Nothing, (), after, user_data)
    end
    function on_motion(f, object::GtkEventControllerMotion, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "motion", Nothing, (Float64, Float64), after, user_data)
    end
    function on_decelerate(f, object::GtkEventControllerScroll, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "decelerate", Nothing, (Float64, Float64), after, user_data)
    end
    function on_scroll(f, object::GtkEventControllerScroll, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "scroll", Cint, (Float64, Float64), after, user_data)
    end
    function on_scroll_begin(f, object::GtkEventControllerScroll, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "scroll-begin", Nothing, (), after, user_data)
    end
    function on_scroll_end(f, object::GtkEventControllerScroll, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "scroll-end", Nothing, (), after, user_data)
    end
    function on_items_changed(f, object::GtkEveryFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_activate(f, object::GtkExpander, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_desktop_folder(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "desktop-folder", Nothing, (), after, user_data)
    end
    function on_down_folder(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "down-folder", Nothing, (), after, user_data)
    end
    function on_home_folder(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "home-folder", Nothing, (), after, user_data)
    end
    function on_location_popup(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "location-popup", Nothing, (Cstring,), after, user_data)
    end
    function on_location_popup_on_paste(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "location-popup-on-paste", Nothing, (), after, user_data)
    end
    function on_location_toggle_popup(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "location-toggle-popup", Nothing, (), after, user_data)
    end
    function on_places_shortcut(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "places-shortcut", Nothing, (), after, user_data)
    end
    function on_quick_bookmark(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "quick-bookmark", Nothing, (Int32,), after, user_data)
    end
    function on_recent_shortcut(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "recent-shortcut", Nothing, (), after, user_data)
    end
    function on_search_shortcut(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "search-shortcut", Nothing, (), after, user_data)
    end
    function on_show_hidden(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "show-hidden", Nothing, (), after, user_data)
    end
    function on_up_folder(f, object::GtkFileChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "up-folder", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (UInt32,), after, user_data)
    end
    function on_items_changed(f, object::GtkFilterListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkFilterListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_items_changed(f, object::GtkFlattenListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkFlattenListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_activate_cursor_child(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-cursor-child", Nothing, (), after, user_data)
    end
    function on_child_activated(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "child-activated", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_move_cursor(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Cint, (UInt32, Int32, Cint, Cint), after, user_data)
    end
    function on_select_all(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-all", Nothing, (), after, user_data)
    end
    function on_selected_children_changed(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selected-children-changed", Nothing, (), after, user_data)
    end
    function on_toggle_cursor_child(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-cursor-child", Nothing, (), after, user_data)
    end
    function on_unselect_all(f, object::GtkFlowBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unselect-all", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkFlowBoxChild, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkFontButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_font_set(f, object::GtkFontButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "font-set", Nothing, (), after, user_data)
    end
    function on_font_activated(f, object::GtkFontButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "font-activated", Nothing, (Cstring,), after, user_data)
    end
    function on_font_activated(f, object::GtkFontChooserDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "font-activated", Nothing, (Cstring,), after, user_data)
    end
    function on_font_activated(f, object::GtkFontChooserWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "font-activated", Nothing, (Cstring,), after, user_data)
    end
    function on_activate(f, object::GtkFontDialogButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_create_context(f, object::GtkGLArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "create-context", Ptr{GObject}, (), after, user_data)
    end
    function on_render(f, object::GtkGLArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "render", Cint, (Ptr{GObject},), after, user_data)
    end
    function on_resize(f, object::GtkGLArea, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "resize", Nothing, (Int32, Int32), after, user_data)
    end
    function on_begin(f, object::GtkGesture, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "begin", Nothing, (GdkEventSequence,), after, user_data)
    end
    function on_cancel(f, object::GtkGesture, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cancel", Nothing, (GdkEventSequence,), after, user_data)
    end
    function on_end(f, object::GtkGesture, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "end", Nothing, (GdkEventSequence,), after, user_data)
    end
    function on_sequence_state_changed(f, object::GtkGesture, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sequence-state-changed", Nothing, (GdkEventSequence, UInt32), after, user_data)
    end
    function on_update(f, object::GtkGesture, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "update", Nothing, (GdkEventSequence,), after, user_data)
    end
    function on_pressed(f, object::GtkGestureClick, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "pressed", Nothing, (Int32, Float64, Float64), after, user_data)
    end
    function on_released(f, object::GtkGestureClick, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "released", Nothing, (Int32, Float64, Float64), after, user_data)
    end
    function on_stopped(f, object::GtkGestureClick, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "stopped", Nothing, (), after, user_data)
    end
    function on_unpaired_release(f, object::GtkGestureClick, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unpaired-release", Nothing, (Float64, Float64, UInt32, GdkEventSequence), after, user_data)
    end
    function on_drag_begin(f, object::GtkGestureDrag, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-begin", Nothing, (Float64, Float64), after, user_data)
    end
    function on_drag_end(f, object::GtkGestureDrag, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-end", Nothing, (Float64, Float64), after, user_data)
    end
    function on_drag_update(f, object::GtkGestureDrag, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "drag-update", Nothing, (Float64, Float64), after, user_data)
    end
    function on_cancelled(f, object::GtkGestureLongPress, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cancelled", Nothing, (), after, user_data)
    end
    function on_pressed(f, object::GtkGestureLongPress, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "pressed", Nothing, (Float64, Float64), after, user_data)
    end
    function on_pan(f, object::GtkGesturePan, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "pan", Nothing, (UInt32, Float64), after, user_data)
    end
    function on_angle_changed(f, object::GtkGestureRotate, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "angle-changed", Nothing, (Float64, Float64), after, user_data)
    end
    function on_down(f, object::GtkGestureStylus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "down", Nothing, (Float64, Float64), after, user_data)
    end
    function on_motion(f, object::GtkGestureStylus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "motion", Nothing, (Float64, Float64), after, user_data)
    end
    function on_proximity(f, object::GtkGestureStylus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "proximity", Nothing, (Float64, Float64), after, user_data)
    end
    function on_up(f, object::GtkGestureStylus, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "up", Nothing, (Float64, Float64), after, user_data)
    end
    function on_swipe(f, object::GtkGestureSwipe, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "swipe", Nothing, (Float64, Float64), after, user_data)
    end
    function on_scale_changed(f, object::GtkGestureZoom, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "scale-changed", Nothing, (Float64,), after, user_data)
    end
    function on_activate(f, object::GtkGridView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (UInt32,), after, user_data)
    end
    function on_commit(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "commit", Nothing, (Cstring,), after, user_data)
    end
    function on_delete_surrounding(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-surrounding", Cint, (Int32, Int32), after, user_data)
    end
    function on_preedit_changed(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preedit-changed", Nothing, (), after, user_data)
    end
    function on_preedit_end(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preedit-end", Nothing, (), after, user_data)
    end
    function on_preedit_start(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preedit-start", Nothing, (), after, user_data)
    end
    function on_retrieve_surrounding(f, object::GtkIMContext, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "retrieve-surrounding", Cint, (), after, user_data)
    end
    function on_invalidate_contents(f, object::GtkIconPaintable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-contents", Nothing, (), after, user_data)
    end
    function on_invalidate_size(f, object::GtkIconPaintable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-size", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkIconTheme, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_activate_cursor_item(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-cursor-item", Cint, (), after, user_data)
    end
    function on_item_activated(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "item-activated", Nothing, (GtkTreePath,), after, user_data)
    end
    function on_move_cursor(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Cint, (UInt32, Int32, Cint, Cint), after, user_data)
    end
    function on_select_all(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-all", Nothing, (), after, user_data)
    end
    function on_select_cursor_item(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-cursor-item", Nothing, (), after, user_data)
    end
    function on_selection_changed(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selection-changed", Nothing, (), after, user_data)
    end
    function on_toggle_cursor_item(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-cursor-item", Nothing, (), after, user_data)
    end
    function on_unselect_all(f, object::GtkIconView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unselect-all", Nothing, (), after, user_data)
    end
    function on_close(f, object::GtkInfoBar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "close", Nothing, (), after, user_data)
    end
    function on_response(f, object::GtkInfoBar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "response", Nothing, (Int32,), after, user_data)
    end
    function on_activate_current_link(f, object::GtkLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-current-link", Nothing, (), after, user_data)
    end
    function on_activate_link(f, object::GtkLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-link", Cint, (Cstring,), after, user_data)
    end
    function on_copy_clipboard(f, object::GtkLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "copy-clipboard", Nothing, (), after, user_data)
    end
    function on_move_cursor(f, object::GtkLabel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Nothing, (UInt32, Int32, Cint), after, user_data)
    end
    function on_offset_changed(f, object::GtkLevelBar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "offset-changed", Nothing, (Cstring,), after, user_data)
    end
    function on_activate_link(f, object::GtkLinkButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-link", Cint, (), after, user_data)
    end
    function on_activate_cursor_row(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-cursor-row", Nothing, (), after, user_data)
    end
    function on_move_cursor(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Nothing, (UInt32, Int32, Cint, Cint), after, user_data)
    end
    function on_row_activated(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-activated", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_row_selected(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-selected", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_select_all(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-all", Nothing, (), after, user_data)
    end
    function on_selected_rows_changed(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selected-rows-changed", Nothing, (), after, user_data)
    end
    function on_toggle_cursor_row(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-cursor-row", Nothing, (), after, user_data)
    end
    function on_unselect_all(f, object::GtkListBox, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unselect-all", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkListBoxRow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_row_changed(f, object::GtkListStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-changed", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_deleted(f, object::GtkListStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-deleted", Nothing, (GtkTreePath,), after, user_data)
    end
    function on_row_has_child_toggled(f, object::GtkListStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-has-child-toggled", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_inserted(f, object::GtkListStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-inserted", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_sort_column_changed(f, object::GtkListStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sort-column-changed", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkListView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (UInt32,), after, user_data)
    end
    function on_items_changed(f, object::GtkMapListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkMapListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_invalidate_contents(f, object::GtkMediaFile, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-contents", Nothing, (), after, user_data)
    end
    function on_invalidate_size(f, object::GtkMediaFile, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-size", Nothing, (), after, user_data)
    end
    function on_invalidate_contents(f, object::GtkMediaStream, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-contents", Nothing, (), after, user_data)
    end
    function on_invalidate_size(f, object::GtkMediaStream, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-size", Nothing, (), after, user_data)
    end
    function on_activate(f, object::GtkMenuButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_items_changed(f, object::GtkMultiFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_items_changed(f, object::GtkMultiSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkMultiSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_selection_changed(f, object::GtkMultiSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selection-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_items_changed(f, object::GtkMultiSorter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_response(f, object::GtkNativeDialog, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "response", Nothing, (Int32,), after, user_data)
    end
    function on_items_changed(f, object::GtkNoSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkNoSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_selection_changed(f, object::GtkNoSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selection-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_change_current_page(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "change-current-page", Cint, (Int32,), after, user_data)
    end
    function on_create_window(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "create-window", Ptr{GObject}, (Ptr{GObject},), after, user_data)
    end
    function on_focus_tab(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "focus-tab", Cint, (UInt32,), after, user_data)
    end
    function on_move_focus_out(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-focus-out", Nothing, (UInt32,), after, user_data)
    end
    function on_page_added(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "page-added", Nothing, (Ptr{GObject}, UInt32), after, user_data)
    end
    function on_page_removed(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "page-removed", Nothing, (Ptr{GObject}, UInt32), after, user_data)
    end
    function on_page_reordered(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "page-reordered", Nothing, (Ptr{GObject}, UInt32), after, user_data)
    end
    function on_reorder_tab(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "reorder-tab", Cint, (UInt32, Cint), after, user_data)
    end
    function on_select_page(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-page", Cint, (Cint,), after, user_data)
    end
    function on_switch_page(f, object::GtkNotebook, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "switch-page", Nothing, (Ptr{GObject}, UInt32), after, user_data)
    end
    function on_get_child_position(f, object::GtkOverlay, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "get-child-position", Cint, (Ptr{GObject}, _GdkRectangle), after, user_data)
    end
    function on_accept_position(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "accept-position", Cint, (), after, user_data)
    end
    function on_cancel_position(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cancel-position", Cint, (), after, user_data)
    end
    function on_cycle_child_focus(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cycle-child-focus", Cint, (Cint,), after, user_data)
    end
    function on_cycle_handle_focus(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cycle-handle-focus", Cint, (Cint,), after, user_data)
    end
    function on_move_handle(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-handle", Cint, (UInt32,), after, user_data)
    end
    function on_toggle_handle_focus(f, object::GtkPaned, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-handle-focus", Cint, (), after, user_data)
    end
    function on_activate(f, object::GtkPasswordEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkPasswordEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkPasswordEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkPasswordEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_activate_default(f, object::GtkPopover, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-default", Nothing, (), after, user_data)
    end
    function on_closed(f, object::GtkPopover, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "closed", Nothing, (), after, user_data)
    end
    function on_status_changed(f, object::GtkPrintJob, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "status-changed", Nothing, (), after, user_data)
    end
    function on_begin_print(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "begin-print", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_create_custom_widget(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "create-custom-widget", Ptr{GObject}, (), after, user_data)
    end
    function on_custom_widget_apply(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "custom-widget-apply", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_done(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "done", Nothing, (UInt32,), after, user_data)
    end
    function on_draw_page(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "draw-page", Nothing, (Ptr{GObject}, Int32), after, user_data)
    end
    function on_end_print(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "end-print", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_paginate(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "paginate", Cint, (Ptr{GObject},), after, user_data)
    end
    function on_preview(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preview", Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), after, user_data)
    end
    function on_request_page_setup(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "request-page-setup", Nothing, (Ptr{GObject}, Int32, Ptr{GObject}), after, user_data)
    end
    function on_status_changed(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "status-changed", Nothing, (), after, user_data)
    end
    function on_update_custom_widget(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "update-custom-widget", Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), after, user_data)
    end
    function on_got_page_size(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "got-page-size", Nothing, (Ptr{GObject}, Ptr{GObject}), after, user_data)
    end
    function on_ready(f, object::GtkPrintOperation, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "ready", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_details_acquired(f, object::GtkPrinter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "details-acquired", Nothing, (Cint,), after, user_data)
    end
    function on_adjust_bounds(f, object::GtkRange, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "adjust-bounds", Nothing, (Float64,), after, user_data)
    end
    function on_change_value(f, object::GtkRange, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "change-value", Cint, (UInt32, Float64), after, user_data)
    end
    function on_move_slider(f, object::GtkRange, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-slider", Nothing, (UInt32,), after, user_data)
    end
    function on_value_changed(f, object::GtkRange, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "value-changed", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkRecentManager, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_popdown(f, object::GtkScaleButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "popdown", Nothing, (), after, user_data)
    end
    function on_popup(f, object::GtkScaleButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "popup", Nothing, (), after, user_data)
    end
    function on_value_changed(f, object::GtkScaleButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "value-changed", Nothing, (Float64,), after, user_data)
    end
    function on_edge_overshot(f, object::GtkScrolledWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "edge-overshot", Nothing, (UInt32,), after, user_data)
    end
    function on_edge_reached(f, object::GtkScrolledWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "edge-reached", Nothing, (UInt32,), after, user_data)
    end
    function on_move_focus_out(f, object::GtkScrolledWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-focus-out", Nothing, (UInt32,), after, user_data)
    end
    function on_scroll_child(f, object::GtkScrolledWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "scroll-child", Cint, (UInt32, Cint), after, user_data)
    end
    function on_activate(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_next_match(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "next-match", Nothing, (), after, user_data)
    end
    function on_previous_match(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "previous-match", Nothing, (), after, user_data)
    end
    function on_search_changed(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "search-changed", Nothing, (), after, user_data)
    end
    function on_search_started(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "search-started", Nothing, (), after, user_data)
    end
    function on_stop_search(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "stop-search", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkSearchEntry, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_items_changed(f, object::GtkSelectionFilterModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_gtk_private_changed(f, object::GtkSettings, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "gtk-private-changed", Nothing, (), after, user_data)
    end
    function on_items_changed(f, object::GtkShortcutController, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_change_current_page(f, object::GtkShortcutsSection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "change-current-page", Cint, (Int32,), after, user_data)
    end
    function on_close(f, object::GtkShortcutsWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "close", Nothing, (), after, user_data)
    end
    function on_search(f, object::GtkShortcutsWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "search", Nothing, (), after, user_data)
    end
    function on_bind(f, object::GtkSignalListItemFactory, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "bind", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_setup(f, object::GtkSignalListItemFactory, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "setup", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_teardown(f, object::GtkSignalListItemFactory, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "teardown", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_unbind(f, object::GtkSignalListItemFactory, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unbind", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_items_changed(f, object::GtkSingleSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkSingleSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_selection_changed(f, object::GtkSingleSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "selection-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_items_changed(f, object::GtkSliceListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkSliceListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_items_changed(f, object::GtkSortListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_sections_changed(f, object::GtkSortListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sections-changed", Nothing, (UInt32, UInt32), after, user_data)
    end
    function on_changed(f, object::GtkSorter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (UInt32,), after, user_data)
    end
    function on_activate(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_change_value(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "change-value", Nothing, (UInt32,), after, user_data)
    end
    function on_input(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "input", Int32, (Float64,), after, user_data)
    end
    function on_output(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "output", Cint, (), after, user_data)
    end
    function on_value_changed(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "value-changed", Nothing, (), after, user_data)
    end
    function on_wrapped(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "wrapped", Nothing, (), after, user_data)
    end
    function on_editing_done(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "editing-done", Nothing, (), after, user_data)
    end
    function on_remove_widget(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-widget", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkSpinButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_text_popped(f, object::GtkStatusbar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "text-popped", Nothing, (UInt32, Cstring), after, user_data)
    end
    function on_text_pushed(f, object::GtkStatusbar, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "text-pushed", Nothing, (UInt32, Cstring), after, user_data)
    end
    function on_items_changed(f, object::GtkStringList, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_activate(f, object::GtkSwitch, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_state_set(f, object::GtkSwitch, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "state-set", Cint, (Cint,), after, user_data)
    end
    function on_activate(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate", Nothing, (), after, user_data)
    end
    function on_backspace(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "backspace", Nothing, (), after, user_data)
    end
    function on_copy_clipboard(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "copy-clipboard", Nothing, (), after, user_data)
    end
    function on_cut_clipboard(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cut-clipboard", Nothing, (), after, user_data)
    end
    function on_delete_from_cursor(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-from-cursor", Nothing, (UInt32, Int32), after, user_data)
    end
    function on_insert_at_cursor(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-at-cursor", Nothing, (Cstring,), after, user_data)
    end
    function on_insert_emoji(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-emoji", Nothing, (), after, user_data)
    end
    function on_move_cursor(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Nothing, (UInt32, Int32, Cint), after, user_data)
    end
    function on_paste_clipboard(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "paste-clipboard", Nothing, (), after, user_data)
    end
    function on_preedit_changed(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preedit-changed", Nothing, (Cstring,), after, user_data)
    end
    function on_toggle_overwrite(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-overwrite", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_text(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-text", Nothing, (Int32, Int32), after, user_data)
    end
    function on_insert_text(f, object::GtkText, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (Cstring, Int32, Int32), after, user_data)
    end
    function on_apply_tag(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "apply-tag", Nothing, (Ptr{GObject}, _GtkTextIter, _GtkTextIter), after, user_data)
    end
    function on_begin_user_action(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "begin-user-action", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_delete_range(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-range", Nothing, (_GtkTextIter, _GtkTextIter), after, user_data)
    end
    function on_end_user_action(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "end-user-action", Nothing, (), after, user_data)
    end
    function on_insert_child_anchor(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-child-anchor", Nothing, (_GtkTextIter, Ptr{GObject}), after, user_data)
    end
    function on_insert_paintable(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-paintable", Nothing, (_GtkTextIter, Ptr{GObject}), after, user_data)
    end
    function on_insert_text(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-text", Nothing, (_GtkTextIter, Cstring, Int32), after, user_data)
    end
    function on_mark_deleted(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "mark-deleted", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_mark_set(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "mark-set", Nothing, (_GtkTextIter, Ptr{GObject}), after, user_data)
    end
    function on_modified_changed(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "modified-changed", Nothing, (), after, user_data)
    end
    function on_paste_done(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "paste-done", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_redo(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "redo", Nothing, (), after, user_data)
    end
    function on_remove_tag(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "remove-tag", Nothing, (Ptr{GObject}, _GtkTextIter, _GtkTextIter), after, user_data)
    end
    function on_undo(f, object::GtkTextBuffer, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "undo", Nothing, (), after, user_data)
    end
    function on_tag_added(f, object::GtkTextTagTable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "tag-added", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_tag_changed(f, object::GtkTextTagTable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "tag-changed", Nothing, (Ptr{GObject}, Cint), after, user_data)
    end
    function on_tag_removed(f, object::GtkTextTagTable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "tag-removed", Nothing, (Ptr{GObject},), after, user_data)
    end
    function on_backspace(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "backspace", Nothing, (), after, user_data)
    end
    function on_copy_clipboard(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "copy-clipboard", Nothing, (), after, user_data)
    end
    function on_cut_clipboard(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cut-clipboard", Nothing, (), after, user_data)
    end
    function on_delete_from_cursor(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "delete-from-cursor", Nothing, (UInt32, Int32), after, user_data)
    end
    function on_extend_selection(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "extend-selection", Cint, (UInt32, _GtkTextIter, _GtkTextIter, _GtkTextIter), after, user_data)
    end
    function on_insert_at_cursor(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-at-cursor", Nothing, (Cstring,), after, user_data)
    end
    function on_insert_emoji(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "insert-emoji", Nothing, (), after, user_data)
    end
    function on_move_cursor(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Nothing, (UInt32, Int32, Cint), after, user_data)
    end
    function on_move_viewport(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-viewport", Nothing, (UInt32, Int32), after, user_data)
    end
    function on_paste_clipboard(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "paste-clipboard", Nothing, (), after, user_data)
    end
    function on_preedit_changed(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "preedit-changed", Nothing, (Cstring,), after, user_data)
    end
    function on_select_all(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-all", Nothing, (Cint,), after, user_data)
    end
    function on_set_anchor(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "set-anchor", Nothing, (), after, user_data)
    end
    function on_toggle_cursor_visible(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-cursor-visible", Nothing, (), after, user_data)
    end
    function on_toggle_overwrite(f, object::GtkTextView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-overwrite", Nothing, (), after, user_data)
    end
    function on_toggled(f, object::GtkToggleButton, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggled", Nothing, (), after, user_data)
    end
    function on_items_changed(f, object::GtkTreeListModel, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "items-changed", Nothing, (UInt32, UInt32, UInt32), after, user_data)
    end
    function on_row_changed(f, object::GtkTreeModelFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-changed", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_deleted(f, object::GtkTreeModelFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-deleted", Nothing, (GtkTreePath,), after, user_data)
    end
    function on_row_has_child_toggled(f, object::GtkTreeModelFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-has-child-toggled", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_inserted(f, object::GtkTreeModelFilter, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-inserted", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_changed(f, object::GtkTreeModelSort, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-changed", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_deleted(f, object::GtkTreeModelSort, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-deleted", Nothing, (GtkTreePath,), after, user_data)
    end
    function on_row_has_child_toggled(f, object::GtkTreeModelSort, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-has-child-toggled", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_inserted(f, object::GtkTreeModelSort, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-inserted", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_sort_column_changed(f, object::GtkTreeModelSort, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sort-column-changed", Nothing, (), after, user_data)
    end
    function on_changed(f, object::GtkTreeSelection, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "changed", Nothing, (), after, user_data)
    end
    function on_row_changed(f, object::GtkTreeStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-changed", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_deleted(f, object::GtkTreeStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-deleted", Nothing, (GtkTreePath,), after, user_data)
    end
    function on_row_has_child_toggled(f, object::GtkTreeStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-has-child-toggled", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_row_inserted(f, object::GtkTreeStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-inserted", Nothing, (GtkTreePath, _GtkTreeIter), after, user_data)
    end
    function on_sort_column_changed(f, object::GtkTreeStore, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "sort-column-changed", Nothing, (), after, user_data)
    end
    function on_columns_changed(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "columns-changed", Nothing, (), after, user_data)
    end
    function on_cursor_changed(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "cursor-changed", Nothing, (), after, user_data)
    end
    function on_expand_collapse_cursor_row(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "expand-collapse-cursor-row", Cint, (Cint, Cint, Cint), after, user_data)
    end
    function on_move_cursor(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-cursor", Cint, (UInt32, Int32, Cint, Cint), after, user_data)
    end
    function on_row_activated(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-activated", Nothing, (GtkTreePath, Ptr{GObject}), after, user_data)
    end
    function on_row_collapsed(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-collapsed", Nothing, (_GtkTreeIter, GtkTreePath), after, user_data)
    end
    function on_row_expanded(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "row-expanded", Nothing, (_GtkTreeIter, GtkTreePath), after, user_data)
    end
    function on_select_all(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-all", Cint, (), after, user_data)
    end
    function on_select_cursor_parent(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-cursor-parent", Cint, (), after, user_data)
    end
    function on_select_cursor_row(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "select-cursor-row", Cint, (Cint,), after, user_data)
    end
    function on_start_interactive_search(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "start-interactive-search", Cint, (), after, user_data)
    end
    function on_test_collapse_row(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "test-collapse-row", Cint, (_GtkTreeIter, GtkTreePath), after, user_data)
    end
    function on_test_expand_row(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "test-expand-row", Cint, (_GtkTreeIter, GtkTreePath), after, user_data)
    end
    function on_toggle_cursor_row(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "toggle-cursor-row", Cint, (), after, user_data)
    end
    function on_unselect_all(f, object::GtkTreeView, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unselect-all", Cint, (), after, user_data)
    end
    function on_clicked(f, object::GtkTreeViewColumn, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "clicked", Nothing, (), after, user_data)
    end
    function on_destroy(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "destroy", Nothing, (), after, user_data)
    end
    function on_direction_changed(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "direction-changed", Nothing, (UInt32,), after, user_data)
    end
    function on_hide(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "hide", Nothing, (), after, user_data)
    end
    function on_keynav_failed(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "keynav-failed", Cint, (UInt32,), after, user_data)
    end
    function on_map(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "map", Nothing, (), after, user_data)
    end
    function on_mnemonic_activate(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "mnemonic-activate", Cint, (Cint,), after, user_data)
    end
    function on_move_focus(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "move-focus", Nothing, (UInt32,), after, user_data)
    end
    function on_query_tooltip(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "query-tooltip", Cint, (Int32, Int32, Cint, Ptr{GObject}), after, user_data)
    end
    function on_realize(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "realize", Nothing, (), after, user_data)
    end
    function on_show(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "show", Nothing, (), after, user_data)
    end
    function on_state_flags_changed(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "state-flags-changed", Nothing, (UInt32,), after, user_data)
    end
    function on_unmap(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unmap", Nothing, (), after, user_data)
    end
    function on_unrealize(f, object::GtkWidget, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "unrealize", Nothing, (), after, user_data)
    end
    function on_invalidate_contents(f, object::GtkWidgetPaintable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-contents", Nothing, (), after, user_data)
    end
    function on_invalidate_size(f, object::GtkWidgetPaintable, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "invalidate-size", Nothing, (), after, user_data)
    end
    function on_activate_default(f, object::GtkWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-default", Nothing, (), after, user_data)
    end
    function on_activate_focus(f, object::GtkWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "activate-focus", Nothing, (), after, user_data)
    end
    function on_close_request(f, object::GtkWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "close-request", Cint, (), after, user_data)
    end
    function on_enable_debugging(f, object::GtkWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "enable-debugging", Cint, (Cint,), after, user_data)
    end
    function on_keys_changed(f, object::GtkWindow, user_data = object, after = false)
        GLib.signal_connect_generic(f, object, "keys-changed", Nothing, (), after, user_data)
    end
    function GtkAssistantPageFunc(current_page, data)
        f = data
        ret = f(current_page)
        convert(Int32, ret)
    end
    function GtkCellAllocCallback(renderer, cell_area, cell_background, data)
        renderer = convert(GtkCellRenderer, renderer, false)
        cell_area = convert(GdkRectangleLike, cell_area, false)
        cell_background = convert(GdkRectangleLike, cell_background, false)
        f = data
        ret = f(renderer, cell_area, cell_background)
        convert(Cint, ret)
    end
    function GtkCellCallback(renderer, data)
        renderer = convert(GtkCellRenderer, renderer, false)
        f = data
        ret = f(renderer)
        convert(Cint, ret)
    end
    function GtkCellLayoutDataFunc(cell_layout, cell, tree_model, iter, data)
        cell_layout = begin
                leaftype = GLib.find_leaf_type(cell_layout)
                convert(leaftype, cell_layout, false)
            end
        cell = convert(GtkCellRenderer, cell, false)
        tree_model = begin
                leaftype = GLib.find_leaf_type(tree_model)
                convert(leaftype, tree_model, false)
            end
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(cell_layout, cell, tree_model, iter)
        nothing
    end
    function GtkCustomFilterFunc(item, user_data)
        item = convert(GObject, item, false)
        f = user_data
        ret = f(item)
        convert(Cint, ret)
    end
    function GtkDrawingAreaDrawFunc(drawing_area, cr, width, height, user_data)
        drawing_area = convert(GtkDrawingArea, drawing_area, false)
        cr = convert(cairoContext, cr, false)
        f = user_data
        ret = f(drawing_area, cr, width, height)
        nothing
    end
    function GtkEntryCompletionMatchFunc(completion, key, iter, user_data)
        completion = convert(GtkEntryCompletion, completion, false)
        key = string_or_nothing(key, false)
        iter = convert(GtkTreeIterLike, iter, false)
        f = user_data
        ret = f(completion, key, iter)
        convert(Cint, ret)
    end
    function GtkExpressionNotify(user_data)
        f = user_data
        ret = f()
        nothing
    end
    function GtkFlowBoxCreateWidgetFunc(item, user_data)
        item = convert(GObject, item, false)
        f = user_data
        ret = f(item)
        begin
            ret != C_NULL && GLib.glib_ref(ret)
            convert(Ptr{GObject}, GLib.get_pointer(ret))
        end
    end
    function GtkFlowBoxFilterFunc(child, user_data)
        child = convert(GtkFlowBoxChild, child, false)
        f = user_data
        ret = f(child)
        convert(Cint, ret)
    end
    function GtkFlowBoxForeachFunc(box, child, user_data)
        box = convert(GtkFlowBox, box, false)
        child = convert(GtkFlowBoxChild, child, false)
        f = user_data
        ret = f(box, child)
        nothing
    end
    function GtkFlowBoxSortFunc(child1, child2, user_data)
        child1 = convert(GtkFlowBoxChild, child1, false)
        child2 = convert(GtkFlowBoxChild, child2, false)
        f = user_data
        ret = f(child1, child2)
        convert(Int32, ret)
    end
    function GtkFontFilterFunc(family, face, data)
        family = convert(PangoFontFamily, family, false)
        face = convert(PangoFontFace, face, false)
        f = data
        ret = f(family, face)
        convert(Cint, ret)
    end
    function GtkIconViewForeachFunc(icon_view, path, data)
        icon_view = convert(GtkIconView, icon_view, false)
        path = convert(GtkTreePath, path, false)
        f = data
        ret = f(icon_view, path)
        nothing
    end
    function GtkListBoxCreateWidgetFunc(item, user_data)
        item = convert(GObject, item, false)
        f = user_data
        ret = f(item)
        begin
            ret != C_NULL && GLib.glib_ref(ret)
            convert(Ptr{GObject}, GLib.get_pointer(ret))
        end
    end
    function GtkListBoxFilterFunc(row, user_data)
        row = convert(GtkListBoxRow, row, false)
        f = user_data
        ret = f(row)
        convert(Cint, ret)
    end
    function GtkListBoxForeachFunc(box, row, user_data)
        box = convert(GtkListBox, box, false)
        row = convert(GtkListBoxRow, row, false)
        f = user_data
        ret = f(box, row)
        nothing
    end
    function GtkListBoxSortFunc(row1, row2, user_data)
        row1 = convert(GtkListBoxRow, row1, false)
        row2 = convert(GtkListBoxRow, row2, false)
        f = user_data
        ret = f(row1, row2)
        convert(Int32, ret)
    end
    function GtkListBoxUpdateHeaderFunc(row, before, user_data)
        row = convert(GtkListBoxRow, row, false)
        before = convert_if_not_null(GtkListBoxRow, before, false)
        f = user_data
        ret = f(row, before)
        nothing
    end
    function GtkMapListModelMapFunc(item, user_data)
        item = convert(GObject, item, true)
        f = user_data
        ret = f(item)
        begin
            ret != C_NULL && GLib.glib_ref(ret)
            convert(Ptr{GObject}, GLib.get_pointer(ret))
        end
    end
    function GtkMenuButtonCreatePopupFunc(menu_button, user_data)
        menu_button = convert(GtkMenuButton, menu_button, false)
        f = user_data
        ret = f(menu_button)
        nothing
    end
    function GtkPageSetupDoneFunc(page_setup, data)
        page_setup = convert(GtkPageSetup, page_setup, false)
        f = data
        ret = f(page_setup)
        nothing
    end
    function GtkPrintSettingsFunc(key, value, user_data)
        key = string_or_nothing(key, false)
        value = string_or_nothing(value, false)
        f = user_data
        ret = f(key, value)
        nothing
    end
    function GtkPrinterFunc(printer, data)
        printer = convert(GtkPrinter, printer, false)
        f = data
        ret = f(printer)
        convert(Cint, ret)
    end
    function GtkScaleFormatValueFunc(scale, value, user_data)
        scale = convert(GtkScale, scale, false)
        f = user_data
        ret = f(scale, value)
        convert(Cstring, ret)
    end
    function GtkShortcutFunc(widget, args, user_data)
        widget = convert(GtkWidget, widget, false)
        args = convert(Maybe(GVariant), args)
        f = user_data
        ret = f(widget, args)
        convert(Cint, ret)
    end
    function GtkTextCharPredicate(ch, user_data)
        f = user_data
        ret = f(ch)
        convert(Cint, ret)
    end
    function GtkTextTagTableForeach(tag, data)
        tag = convert(GtkTextTag, tag, false)
        f = data
        ret = f(tag)
        nothing
    end
    function GtkTickCallback(widget, frame_clock, user_data)
        widget = convert(GtkWidget, widget, false)
        frame_clock = convert(GdkFrameClock, frame_clock, false)
        f = user_data
        ret = f(widget, frame_clock)
        convert(Cint, ret)
    end
    function GtkTreeCellDataFunc(tree_column, cell, tree_model, iter, data)
        tree_column = convert(GtkTreeViewColumn, tree_column, false)
        cell = convert(GtkCellRenderer, cell, false)
        tree_model = begin
                leaftype = GLib.find_leaf_type(tree_model)
                convert(leaftype, tree_model, false)
            end
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(tree_column, cell, tree_model, iter)
        nothing
    end
    function GtkTreeIterCompareFunc(model, a, b, user_data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        a = convert(GtkTreeIterLike, a, false)
        b = convert(GtkTreeIterLike, b, false)
        f = user_data
        ret = f(model, a, b)
        convert(Int32, ret)
    end
    function GtkTreeListModelCreateModelFunc(item, user_data)
        item = convert(GObject, item, false)
        f = user_data
        ret = f(item)
        begin
            ret != C_NULL && GLib.glib_ref(ret)
            convert(Ptr{GObject}, GLib.get_pointer(ret))
        end
    end
    function GtkTreeModelFilterModifyFunc(model, iter, value, column, data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(model, iter, value, column)
        nothing
    end
    function GtkTreeModelFilterVisibleFunc(model, iter, data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(model, iter)
        convert(Cint, ret)
    end
    function GtkTreeModelForeachFunc(model, path, iter, data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        path = convert(GtkTreePath, path, false)
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(model, path, iter)
        convert(Cint, ret)
    end
    function GtkTreeSelectionForeachFunc(model, path, iter, data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        path = convert(GtkTreePath, path, false)
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(model, path, iter)
        nothing
    end
    function GtkTreeSelectionFunc(selection, model, path, path_currently_selected, data)
        selection = convert(GtkTreeSelection, selection, false)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        path = convert(GtkTreePath, path, false)
        path_currently_selected = convert(Bool, path_currently_selected)
        f = data
        ret = f(selection, model, path, path_currently_selected)
        convert(Cint, ret)
    end
    function GtkTreeViewColumnDropFunc(tree_view, column, prev_column, next_column, data)
        tree_view = convert(GtkTreeView, tree_view, false)
        column = convert(GtkTreeViewColumn, column, false)
        prev_column = convert(GtkTreeViewColumn, prev_column, false)
        next_column = convert(GtkTreeViewColumn, next_column, false)
        f = data
        ret = f(tree_view, column, prev_column, next_column)
        convert(Cint, ret)
    end
    function GtkTreeViewMappingFunc(tree_view, path, user_data)
        tree_view = convert(GtkTreeView, tree_view, false)
        path = convert(GtkTreePath, path, false)
        f = user_data
        ret = f(tree_view, path)
        nothing
    end
    function GtkTreeViewRowSeparatorFunc(model, iter, data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        iter = convert(GtkTreeIterLike, iter, false)
        f = data
        ret = f(model, iter)
        convert(Cint, ret)
    end
    function GtkTreeViewSearchEqualFunc(model, column, key, iter, search_data)
        model = begin
                leaftype = GLib.find_leaf_type(model)
                convert(leaftype, model, false)
            end
        key = string_or_nothing(key, false)
        iter = convert(GtkTreeIterLike, iter, false)
        f = search_data
        ret = f(model, column, key, iter)
        convert(Cint, ret)
    end
    export GtkAccessibleList, GtkAccessibleTextRange, GtkAccessibleTextRangeLike, _GtkAccessibleTextRange, GtkBitset, GtkBitsetIter, GtkBitsetIterLike, _GtkBitsetIter, GtkBorder, GtkBorderLike, _GtkBorder, GtkBuildableParseContext, GtkBuildableParser, GtkBuildableParserLike, _GtkBuildableParser, GtkCssLocation, GtkCssLocationLike, _GtkCssLocation, GtkCssSection, GtkCssStyleChange, GtkExpressionWatch, GtkPadActionEntry, GtkPadActionEntryLike, _GtkPadActionEntry, GtkPaperSize, GtkPrintBackend, GtkPrintSetup, GtkRecentData, GtkRecentDataLike, _GtkRecentData, GtkRecentInfo, GtkRequestedSize, GtkRequestedSizeLike, _GtkRequestedSize, GtkRequisition, GtkRequisitionLike, _GtkRequisition, GtkScrollInfo, GtkTextIter, GtkTextIterLike, _GtkTextIter, GtkTreeIter, GtkTreeIterLike, _GtkTreeIter, GtkTreePath, GtkAccessible, GtkAccessibleRange, GtkAccessibleText, GtkActionable, GtkAppChooser, GtkBuildable, GtkBuilderScope, GtkCellEditable, GtkCellLayout, GtkColorChooser, GtkConstraintTarget, GtkEditable, GtkFileChooser, GtkFontChooser, GtkNative, GtkOrientable, GtkPrintOperationPreview, GtkRoot, GtkScrollable, GtkSectionModel, GtkSelectionModel, GtkShortcutManager, GtkStyleProvider, GtkSymbolicPaintable, GtkTreeDragDest, GtkTreeDragSource, GtkTreeModel, GtkTreeSortable, GtkATContext, GtkAboutDialog, GtkAboutDialogLeaf, GtkActionBar, GtkActionBarLeaf, GtkActivateAction, GtkActivateActionLeaf, GtkAdjustment, GtkAdjustmentLeaf, GtkAlertDialog, GtkAlertDialogLeaf, GtkAlternativeTrigger, GtkAlternativeTriggerLeaf, GtkAnyFilter, GtkAnyFilterLeaf, GtkAppChooserButton, GtkAppChooserButtonLeaf, GtkAppChooserDialog, GtkAppChooserDialogLeaf, GtkAppChooserWidget, GtkAppChooserWidgetLeaf, GtkApplication, GtkApplicationLeaf, GtkApplicationWindow, GtkApplicationWindowLeaf, GtkAspectFrame, GtkAspectFrameLeaf, GtkAssistant, GtkAssistantLeaf, GtkAssistantPage, GtkAssistantPageLeaf, GtkBinLayout, GtkBinLayoutLeaf, GtkBookmarkList, GtkBookmarkListLeaf, GtkBoolFilter, GtkBoolFilterLeaf, GtkBox, GtkBoxLeaf, GtkBoxLayout, GtkBoxLayoutLeaf, GtkBuilder, GtkBuilderLeaf, GtkBuilderCScope, GtkBuilderCScopeLeaf, GtkBuilderListItemFactory, GtkBuilderListItemFactoryLeaf, GtkButton, GtkButtonLeaf, GtkCalendar, GtkCalendarLeaf, GtkCallbackAction, GtkCallbackActionLeaf, GtkCellArea, GtkCellAreaBox, GtkCellAreaBoxLeaf, GtkCellAreaContext, GtkCellAreaContextLeaf, GtkCellRenderer, GtkCellRendererAccel, GtkCellRendererAccelLeaf, GtkCellRendererCombo, GtkCellRendererComboLeaf, GtkCellRendererPixbuf, GtkCellRendererPixbufLeaf, GtkCellRendererProgress, GtkCellRendererProgressLeaf, GtkCellRendererSpin, GtkCellRendererSpinLeaf, GtkCellRendererSpinner, GtkCellRendererSpinnerLeaf, GtkCellRendererText, GtkCellRendererTextLeaf, GtkCellRendererToggle, GtkCellRendererToggleLeaf, GtkCellView, GtkCellViewLeaf, GtkCenterBox, GtkCenterBoxLeaf, GtkCenterLayout, GtkCenterLayoutLeaf, GtkCheckButton, GtkCheckButtonLeaf, GtkColorButton, GtkColorButtonLeaf, GtkColorChooserDialog, GtkColorChooserDialogLeaf, GtkColorChooserWidget, GtkColorChooserWidgetLeaf, GtkColorDialog, GtkColorDialogLeaf, GtkColorDialogButton, GtkColorDialogButtonLeaf, GtkColumnView, GtkColumnViewLeaf, GtkColumnViewCell, GtkColumnViewCellLeaf, GtkColumnViewColumn, GtkColumnViewColumnLeaf, GtkColumnViewRow, GtkColumnViewRowLeaf, GtkColumnViewSorter, GtkColumnViewSorterLeaf, GtkComboBox, GtkComboBoxLeaf, GtkComboBoxText, GtkComboBoxTextLeaf, GtkConstantExpression, GtkConstantExpressionLeaf, GtkConstraint, GtkConstraintLeaf, GtkConstraintGuide, GtkConstraintGuideLeaf, GtkConstraintLayout, GtkConstraintLayoutLeaf, GtkConstraintLayoutChild, GtkConstraintLayoutChildLeaf, GtkCssProvider, GtkCssProviderLeaf, GtkCustomFilter, GtkCustomFilterLeaf, GtkCustomLayout, GtkCustomLayoutLeaf, GtkCustomSorter, GtkCustomSorterLeaf, GtkDialog, GtkDialogLeaf, GtkDirectoryList, GtkDirectoryListLeaf, GtkDragIcon, GtkDragIconLeaf, GtkDragSource, GtkDragSourceLeaf, GtkDrawingArea, GtkDrawingAreaLeaf, GtkDropControllerMotion, GtkDropControllerMotionLeaf, GtkDropDown, GtkDropDownLeaf, GtkDropTarget, GtkDropTargetLeaf, GtkDropTargetAsync, GtkDropTargetAsyncLeaf, GtkEditableLabel, GtkEditableLabelLeaf, GtkEmojiChooser, GtkEmojiChooserLeaf, GtkEntry, GtkEntryLeaf, GtkEntryBuffer, GtkEntryBufferLeaf, GtkEntryCompletion, GtkEntryCompletionLeaf, GtkEventController, GtkEventControllerFocus, GtkEventControllerFocusLeaf, GtkEventControllerKey, GtkEventControllerKeyLeaf, GtkEventControllerLegacy, GtkEventControllerLegacyLeaf, GtkEventControllerMotion, GtkEventControllerMotionLeaf, GtkEventControllerScroll, GtkEventControllerScrollLeaf, GtkEveryFilter, GtkEveryFilterLeaf, GtkExpander, GtkExpanderLeaf, GtkExpression, GtkFileChooserDialog, GtkFileChooserDialogLeaf, GtkFileChooserNative, GtkFileChooserNativeLeaf, GtkFileChooserWidget, GtkFileChooserWidgetLeaf, GtkFileDialog, GtkFileDialogLeaf, GtkFileFilter, GtkFileFilterLeaf, GtkFileLauncher, GtkFileLauncherLeaf, GtkFilter, GtkFilterLeaf, GtkFilterListModel, GtkFilterListModelLeaf, GtkFixed, GtkFixedLeaf, GtkFixedLayout, GtkFixedLayoutLeaf, GtkFixedLayoutChild, GtkFixedLayoutChildLeaf, GtkFlattenListModel, GtkFlattenListModelLeaf, GtkFlowBox, GtkFlowBoxLeaf, GtkFlowBoxChild, GtkFlowBoxChildLeaf, GtkFontButton, GtkFontButtonLeaf, GtkFontChooserDialog, GtkFontChooserDialogLeaf, GtkFontChooserWidget, GtkFontChooserWidgetLeaf, GtkFontDialog, GtkFontDialogLeaf, GtkFontDialogButton, GtkFontDialogButtonLeaf, GtkFrame, GtkFrameLeaf, GtkGLArea, GtkGLAreaLeaf, GtkGesture, GtkGestureClick, GtkGestureClickLeaf, GtkGestureDrag, GtkGestureDragLeaf, GtkGestureLongPress, GtkGestureLongPressLeaf, GtkGesturePan, GtkGesturePanLeaf, GtkGestureRotate, GtkGestureRotateLeaf, GtkGestureSingle, GtkGestureSingleLeaf, GtkGestureStylus, GtkGestureStylusLeaf, GtkGestureSwipe, GtkGestureSwipeLeaf, GtkGestureZoom, GtkGestureZoomLeaf, GtkGraphicsOffload, GtkGraphicsOffloadLeaf, GtkGrid, GtkGridLeaf, GtkGridLayout, GtkGridLayoutLeaf, GtkGridLayoutChild, GtkGridLayoutChildLeaf, GtkGridView, GtkGridViewLeaf, GtkHeaderBar, GtkHeaderBarLeaf, GtkIMContext, GtkIMContextSimple, GtkIMContextSimpleLeaf, GtkIMMulticontext, GtkIMMulticontextLeaf, GtkIconPaintable, GtkIconPaintableLeaf, GtkIconTheme, GtkIconThemeLeaf, GtkIconView, GtkIconViewLeaf, GtkImage, GtkImageLeaf, GtkInfoBar, GtkInfoBarLeaf, GtkInscription, GtkInscriptionLeaf, GtkKeyvalTrigger, GtkKeyvalTriggerLeaf, GtkLabel, GtkLabelLeaf, GtkLayoutChild, GtkLayoutManager, GtkLevelBar, GtkLevelBarLeaf, GtkLinkButton, GtkLinkButtonLeaf, GtkListBase, GtkListBox, GtkListBoxLeaf, GtkListBoxRow, GtkListBoxRowLeaf, GtkListHeader, GtkListHeaderLeaf, GtkListItem, GtkListItemLeaf, GtkListItemFactory, GtkListItemFactoryLeaf, GtkListStore, GtkListStoreLeaf, GtkListView, GtkListViewLeaf, GtkLockButton, GtkLockButtonLeaf, GtkMapListModel, GtkMapListModelLeaf, GtkMediaControls, GtkMediaControlsLeaf, GtkMediaFile, GtkMediaStream, GtkMenuButton, GtkMenuButtonLeaf, GtkMessageDialog, GtkMessageDialogLeaf, GtkMnemonicAction, GtkMnemonicActionLeaf, GtkMnemonicTrigger, GtkMnemonicTriggerLeaf, GtkMountOperation, GtkMountOperationLeaf, GtkMultiFilter, GtkMultiSelection, GtkMultiSelectionLeaf, GtkMultiSorter, GtkMultiSorterLeaf, GtkNamedAction, GtkNamedActionLeaf, GtkNativeDialog, GtkNeverTrigger, GtkNeverTriggerLeaf, GtkNoSelection, GtkNoSelectionLeaf, GtkNotebook, GtkNotebookLeaf, GtkNotebookPage, GtkNotebookPageLeaf, GtkNothingAction, GtkNothingActionLeaf, GtkNumericSorter, GtkNumericSorterLeaf, GtkObjectExpression, GtkObjectExpressionLeaf, GtkOverlay, GtkOverlayLeaf, GtkOverlayLayout, GtkOverlayLayoutLeaf, GtkOverlayLayoutChild, GtkOverlayLayoutChildLeaf, GtkPadController, GtkPadControllerLeaf, GtkPageSetup, GtkPageSetupLeaf, GtkPaned, GtkPanedLeaf, GtkPasswordEntry, GtkPasswordEntryLeaf, GtkPasswordEntryBuffer, GtkPasswordEntryBufferLeaf, GtkPicture, GtkPictureLeaf, GtkPopover, GtkPopoverLeaf, GtkPopoverMenu, GtkPopoverMenuLeaf, GtkPopoverMenuBar, GtkPopoverMenuBarLeaf, GtkPrintContext, GtkPrintContextLeaf, GtkPrintDialog, GtkPrintDialogLeaf, GtkPrintJob, GtkPrintJobLeaf, GtkPrintOperation, GtkPrintOperationLeaf, GtkPrintSettings, GtkPrintSettingsLeaf, GtkPrinter, GtkPrinterLeaf, GtkProgressBar, GtkProgressBarLeaf, GtkPropertyExpression, GtkPropertyExpressionLeaf, GtkRange, GtkRangeLeaf, GtkRecentManager, GtkRecentManagerLeaf, GtkRevealer, GtkRevealerLeaf, GtkScale, GtkScaleLeaf, GtkScaleButton, GtkScaleButtonLeaf, GtkScrollbar, GtkScrollbarLeaf, GtkScrolledWindow, GtkScrolledWindowLeaf, GtkSearchBar, GtkSearchBarLeaf, GtkSearchEntry, GtkSearchEntryLeaf, GtkSelectionFilterModel, GtkSelectionFilterModelLeaf, GtkSeparator, GtkSeparatorLeaf, GtkSettings, GtkSettingsLeaf, GtkShortcut, GtkShortcutLeaf, GtkShortcutAction, GtkShortcutController, GtkShortcutControllerLeaf, GtkShortcutLabel, GtkShortcutLabelLeaf, GtkShortcutTrigger, GtkShortcutsGroup, GtkShortcutsGroupLeaf, GtkShortcutsSection, GtkShortcutsSectionLeaf, GtkShortcutsShortcut, GtkShortcutsShortcutLeaf, GtkShortcutsWindow, GtkShortcutsWindowLeaf, GtkSignalAction, GtkSignalActionLeaf, GtkSignalListItemFactory, GtkSignalListItemFactoryLeaf, GtkSingleSelection, GtkSingleSelectionLeaf, GtkSizeGroup, GtkSizeGroupLeaf, GtkSliceListModel, GtkSliceListModelLeaf, GtkSnapshot, GtkSnapshotLeaf, GtkSortListModel, GtkSortListModelLeaf, GtkSorter, GtkSorterLeaf, GtkSpinButton, GtkSpinButtonLeaf, GtkSpinner, GtkSpinnerLeaf, GtkStack, GtkStackLeaf, GtkStackPage, GtkStackPageLeaf, GtkStackSidebar, GtkStackSidebarLeaf, GtkStackSwitcher, GtkStackSwitcherLeaf, GtkStatusbar, GtkStatusbarLeaf, GtkStringFilter, GtkStringFilterLeaf, GtkStringList, GtkStringListLeaf, GtkStringObject, GtkStringObjectLeaf, GtkStringSorter, GtkStringSorterLeaf, GtkStyleContext, GtkStyleContextLeaf, GtkSwitch, GtkSwitchLeaf, GtkText, GtkTextLeaf, GtkTextBuffer, GtkTextBufferLeaf, GtkTextChildAnchor, GtkTextChildAnchorLeaf, GtkTextMark, GtkTextMarkLeaf, GtkTextTag, GtkTextTagLeaf, GtkTextTagTable, GtkTextTagTableLeaf, GtkTextView, GtkTextViewLeaf, GtkToggleButton, GtkToggleButtonLeaf, GtkTooltip, GtkTooltipLeaf, GtkTreeExpander, GtkTreeExpanderLeaf, GtkTreeListModel, GtkTreeListModelLeaf, GtkTreeListRow, GtkTreeListRowLeaf, GtkTreeListRowSorter, GtkTreeListRowSorterLeaf, GtkTreeModelFilter, GtkTreeModelFilterLeaf, GtkTreeModelSort, GtkTreeModelSortLeaf, GtkTreeSelection, GtkTreeSelectionLeaf, GtkTreeStore, GtkTreeStoreLeaf, GtkTreeView, GtkTreeViewLeaf, GtkTreeViewColumn, GtkTreeViewColumnLeaf, GtkUriLauncher, GtkUriLauncherLeaf, GtkVideo, GtkVideoLeaf, GtkViewport, GtkViewportLeaf, GtkVolumeButton, GtkVolumeButtonLeaf, GtkWidget, GtkWidgetPaintable, GtkWidgetPaintableLeaf, GtkWindow, GtkWindowLeaf, GtkWindowControls, GtkWindowControlsLeaf, GtkWindowGroup, GtkWindowGroupLeaf, GtkWindowHandle, GtkWindowHandleLeaf, GtkAssistantPageFunc, GtkCellAllocCallback, GtkCellCallback, GtkCellLayoutDataFunc, GtkCustomFilterFunc, GtkDrawingAreaDrawFunc, GtkEntryCompletionMatchFunc, GtkExpressionNotify, GtkFlowBoxCreateWidgetFunc, GtkFlowBoxFilterFunc, GtkFlowBoxForeachFunc, GtkFlowBoxSortFunc, GtkFontFilterFunc, GtkIconViewForeachFunc, GtkListBoxCreateWidgetFunc, GtkListBoxFilterFunc, GtkListBoxForeachFunc, GtkListBoxSortFunc, GtkListBoxUpdateHeaderFunc, GtkMapListModelMapFunc, GtkMenuButtonCreatePopupFunc, GtkPageSetupDoneFunc, GtkPrintSettingsFunc, GtkPrinterFunc, GtkScaleFormatValueFunc, GtkShortcutFunc, GtkTextCharPredicate, GtkTextTagTableForeach, GtkTickCallback, GtkTreeCellDataFunc, GtkTreeIterCompareFunc, GtkTreeListModelCreateModelFunc, GtkTreeModelFilterModifyFunc, GtkTreeModelFilterVisibleFunc, GtkTreeModelForeachFunc, GtkTreeSelectionForeachFunc, GtkTreeSelectionFunc, GtkTreeViewColumnDropFunc, GtkTreeViewMappingFunc, GtkTreeViewRowSeparatorFunc, GtkTreeViewSearchEqualFunc
end))
end
