quote
$(Expr(:toplevel, quote
    function accelerator_get_default_mod_mask()
        ret = ccall(("gtk_accelerator_get_default_mod_mask", "libgtk-4.so.1"), Int32, ())
        ret
    end
    function accelerator_get_label(_accelerator_key, _accelerator_mods)
        ret = ccall(("gtk_accelerator_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (UInt32, Int32), _accelerator_key, _accelerator_mods)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function accelerator_get_label_with_keycode(_display::Maybe(GdkDisplay), _accelerator_key, _keycode, _accelerator_mods)
        _display = if _display == nothing
                C_NULL
            else
                _display
            end
        ret = ccall(("gtk_accelerator_get_label_with_keycode", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, UInt32, UInt32, Int32), _display, _accelerator_key, _keycode, _accelerator_mods)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function accelerator_name(_accelerator_key, _accelerator_mods)
        ret = ccall(("gtk_accelerator_name", "libgtk-4.so.1"), Ptr{UInt8}, (UInt32, Int32), _accelerator_key, _accelerator_mods)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function accelerator_name_with_keycode(_display::Maybe(GdkDisplay), _accelerator_key, _keycode, _accelerator_mods)
        _display = if _display == nothing
                C_NULL
            else
                _display
            end
        ret = ccall(("gtk_accelerator_name_with_keycode", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, UInt32, UInt32, Int32), _display, _accelerator_key, _keycode, _accelerator_mods)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function accelerator_parse(_accelerator)
        m_accelerator_key = Ref{UInt32}()
        m_accelerator_mods = Ref{Int32}()
        ret = ccall(("gtk_accelerator_parse", "libgtk-4.so.1"), Cint, (Ptr{UInt8}, Ptr{UInt32}, Ptr{Int32}), _accelerator, m_accelerator_key, m_accelerator_mods)
        ret2 = convert(Bool, ret)
        _accelerator_key = m_accelerator_key[]
        _accelerator_mods = m_accelerator_mods[]
        (ret2, _accelerator_key, _accelerator_mods)
    end
    function accelerator_parse_with_keycode(_accelerator, _display::Maybe(GdkDisplay))
        _display = if _display == nothing
                C_NULL
            else
                _display
            end
        m_accelerator_key = Ref{UInt32}()
        m_accelerator_codes = Ref{Ptr{UInt32}}()
        m_accelerator_mods = Ref{Int32}()
        ret = ccall(("gtk_accelerator_parse_with_keycode", "libgtk-4.so.1"), Cint, (Ptr{UInt8}, Ptr{GObject}, Ptr{UInt32}, Ptr{Ptr{UInt32}}, Ptr{Int32}), _accelerator, _display, m_accelerator_key, m_accelerator_codes, m_accelerator_mods)
        ret2 = convert(Bool, ret)
        _accelerator_key = m_accelerator_key[]
        _accelerator_codes = m_accelerator_codes[]
        _accelerator_mods = m_accelerator_mods[]
        (ret2, _accelerator_key, _accelerator_codes, _accelerator_mods)
    end
    function accelerator_valid(_keyval, _modifiers)
        ret = ccall(("gtk_accelerator_valid", "libgtk-4.so.1"), Cint, (UInt32, Int32), _keyval, _modifiers)
        ret2 = convert(Bool, ret)
        ret2
    end
    function accessible_property_init_value(_property, _value::GValue)
        ret = ccall(("gtk_accessible_property_init_value", "libgtk-4.so.1"), Nothing, (Int32, Ptr{GValue}), _property, _value)
        nothing
    end
    function accessible_relation_init_value(_relation, _value::GValue)
        ret = ccall(("gtk_accessible_relation_init_value", "libgtk-4.so.1"), Nothing, (Int32, Ptr{GValue}), _relation, _value)
        nothing
    end
    function accessible_state_init_value(_state, _value::GValue)
        ret = ccall(("gtk_accessible_state_init_value", "libgtk-4.so.1"), Nothing, (Int32, Ptr{GValue}), _state, _value)
        nothing
    end
    function bitset_iter_init_at(_set::GtkBitset, _target)
        m_iter = Ref{_GtkBitsetIter}()
        m_value = Ref{UInt32}()
        ret = ccall(("gtk_bitset_iter_init_at", "libgtk-4.so.1"), Cint, (Ptr{_GtkBitsetIter}, Ptr{GtkBitset}, UInt32, Ptr{UInt32}), m_iter, _set, _target, m_value)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _value = m_value[]
        (ret2, _iter, _value)
    end
    function bitset_iter_init_first(_set::GtkBitset)
        m_iter = Ref{_GtkBitsetIter}()
        m_value = Ref{UInt32}()
        ret = ccall(("gtk_bitset_iter_init_first", "libgtk-4.so.1"), Cint, (Ptr{_GtkBitsetIter}, Ptr{GtkBitset}, Ptr{UInt32}), m_iter, _set, m_value)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _value = m_value[]
        (ret2, _iter, _value)
    end
    function bitset_iter_init_last(_set::GtkBitset)
        m_iter = Ref{_GtkBitsetIter}()
        m_value = Ref{UInt32}()
        ret = ccall(("gtk_bitset_iter_init_last", "libgtk-4.so.1"), Cint, (Ptr{_GtkBitsetIter}, Ptr{GtkBitset}, Ptr{UInt32}), m_iter, _set, m_value)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _value = m_value[]
        (ret2, _iter, _value)
    end
    function builder_error_quark()
        ret = ccall(("gtk_builder_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function check_version(_required_major, _required_minor, _required_micro)
        ret = ccall(("gtk_check_version", "libgtk-4.so.1"), Ptr{UInt8}, (UInt32, UInt32, UInt32), _required_major, _required_minor, _required_micro)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function constraint_vfl_parser_error_quark()
        ret = ccall(("gtk_constraint_vfl_parser_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function css_parser_error_quark()
        ret = ccall(("gtk_css_parser_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function css_parser_warning_quark()
        ret = ccall(("gtk_css_parser_warning_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function disable_setlocale()
        ret = ccall(("gtk_disable_setlocale", "libgtk-4.so.1"), Nothing, ())
        nothing
    end
    function distribute_natural_allocation(_extra_space, _sizes)
        _sizes = convert(Vector{GtkRequestedSize}, _sizes)
        _n_requested_sizes = length(_sizes)
        ret = ccall(("gtk_distribute_natural_allocation", "libgtk-4.so.1"), Int32, (Int32, UInt32, Ptr{GtkRequestedSize}), _extra_space, _n_requested_sizes, _sizes)
        ret
    end
    function editable_delegate_get_property(_object::GObject, _prop_id, _value::GValue, _pspec::GParamSpec)
        ret = ccall(("gtk_editable_delegate_get_property", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, Ptr{GValue}, Ptr{GObject}), _object, _prop_id, _value, _pspec)
        ret2 = convert(Bool, ret)
        ret2
    end
    function editable_delegate_set_property(_object::GObject, _prop_id, _value::GValue, _pspec::GParamSpec)
        ret = ccall(("gtk_editable_delegate_set_property", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, Ptr{GValue}, Ptr{GObject}), _object, _prop_id, _value, _pspec)
        ret2 = convert(Bool, ret)
        ret2
    end
    function editable_install_properties(_object_class::GObjectClass, _first_prop)
        ret = ccall(("gtk_editable_install_properties", "libgtk-4.so.1"), UInt32, (Ptr{GObjectClass}, UInt32), _object_class, _first_prop)
        ret
    end
    function enumerate_printers(_func::Function, _data::Maybe(Nothing), _destroy::Function, _wait)
        _func = begin
                #= /home/wahlstrj/Sync/GI.jl/src/giimport.jl:493 =# @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = begin
                #= /home/wahlstrj/Sync/GI.jl/src/giimport.jl:493 =# @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_enumerate_printers", "libgtk-4.so.1"), Nothing, (Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Cint), _func, _data, _destroy, _wait)
        nothing
    end
    function file_chooser_error_quark()
        ret = ccall(("gtk_file_chooser_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function get_binary_age()
        ret = ccall(("gtk_get_binary_age", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function get_debug_flags()
        ret = ccall(("gtk_get_debug_flags", "libgtk-4.so.1"), Int32, ())
        ret
    end
    function get_default_language()
        ret = ccall(("gtk_get_default_language", "libgtk-4.so.1"), Ptr{PangoLanguage}, ())
        ret2 = convert(PangoLanguage, ret, false)
        ret2
    end
    function get_interface_age()
        ret = ccall(("gtk_get_interface_age", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function get_locale_direction()
        ret = ccall(("gtk_get_locale_direction", "libgtk-4.so.1"), Int32, ())
        ret
    end
    function get_major_version()
        ret = ccall(("gtk_get_major_version", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function get_micro_version()
        ret = ccall(("gtk_get_micro_version", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function get_minor_version()
        ret = ccall(("gtk_get_minor_version", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function hsv_to_rgb(_h, _s, _v)
        m_r = Ref{Float32}()
        m_g = Ref{Float32}()
        m_b = Ref{Float32}()
        ret = ccall(("gtk_hsv_to_rgb", "libgtk-4.so.1"), Nothing, (Float32, Float32, Float32, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), _h, _s, _v, m_r, m_g, m_b)
        _r = m_r[]
        _g = m_g[]
        _b = m_b[]
        (_r, _g, _b)
    end
    function icon_theme_error_quark()
        ret = ccall(("gtk_icon_theme_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function init()
        ret = ccall(("gtk_init", "libgtk-4.so.1"), Nothing, ())
        nothing
    end
    function init_check()
        ret = ccall(("gtk_init_check", "libgtk-4.so.1"), Cint, ())
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_initialized()
        ret = ccall(("gtk_is_initialized", "libgtk-4.so.1"), Cint, ())
        ret2 = convert(Bool, ret)
        ret2
    end
    function native_get_for_surface(_surface::GdkSurface)
        ret = ccall(("gtk_native_get_for_surface", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _surface)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function paper_size_get_default()
        ret = ccall(("gtk_paper_size_get_default", "libgtk-4.so.1"), Ptr{UInt8}, ())
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function paper_size_get_paper_sizes(_include_custom)
        ret = ccall(("gtk_paper_size_get_paper_sizes", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GtkPaperSize}}}, (Cint,), _include_custom)
        ret2 = GLib.GList(ret)
        ret2
    end
    function param_spec_expression(_name, _nick, _blurb, _flags)
        ret = ccall(("gtk_param_spec_expression", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Int32), _name, _nick, _blurb, _flags)
        ret2 = convert(GParamSpec, ret, true)
        ret2
    end
    function print_error_quark()
        ret = ccall(("gtk_print_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function print_run_page_setup_dialog(_parent::Maybe(GtkWindow), _page_setup::Maybe(GtkPageSetup), _settings::GtkPrintSettings)
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _page_setup = if _page_setup == nothing
                C_NULL
            else
                _page_setup
            end
        ret = ccall(("gtk_print_run_page_setup_dialog", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), _parent, _page_setup, _settings)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function print_run_page_setup_dialog_async(_parent::Maybe(GtkWindow), _page_setup::Maybe(GtkPageSetup), _settings::GtkPrintSettings, _done_cb::Function, _data::Maybe(Nothing))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _page_setup = if _page_setup == nothing
                C_NULL
            else
                _page_setup
            end
        _done_cb = begin
                #= /home/wahlstrj/Sync/GI.jl/src/giimport.jl:493 =# @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_print_run_page_setup_dialog_async", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), _parent, _page_setup, _settings, _done_cb, _data)
        nothing
    end
    function recent_manager_error_quark()
        ret = ccall(("gtk_recent_manager_error_quark", "libgtk-4.so.1"), UInt32, ())
        ret
    end
    function render_activity(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_activity", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_arrow(_context::GtkStyleContext, _cr::cairoContext, _angle, _x, _y, _size)
        ret = ccall(("gtk_render_arrow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _angle, _x, _y, _size)
        nothing
    end
    function render_background(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_background", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_check(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_check", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_expander(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_expander", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_focus(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_frame(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_handle(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_handle", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function render_icon(_context::GtkStyleContext, _cr::cairoContext, _texture::GdkTexture, _x, _y)
        ret = ccall(("gtk_render_icon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Ptr{GObject}, Float64, Float64), _context, _cr, _texture, _x, _y)
        nothing
    end
    function render_layout(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _layout::PangoLayout)
        ret = ccall(("gtk_render_layout", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Ptr{GObject}), _context, _cr, _x, _y, _layout)
        nothing
    end
    function render_line(_context::GtkStyleContext, _cr::cairoContext, _x0, _y0, _x1, _y1)
        ret = ccall(("gtk_render_line", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x0, _y0, _x1, _y1)
        nothing
    end
    function render_option(_context::GtkStyleContext, _cr::cairoContext, _x, _y, _width, _height)
        ret = ccall(("gtk_render_option", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64, Float64, Float64), _context, _cr, _x, _y, _width, _height)
        nothing
    end
    function rgb_to_hsv(_r, _g, _b)
        m_h = Ref{Float32}()
        m_s = Ref{Float32}()
        m_v = Ref{Float32}()
        ret = ccall(("gtk_rgb_to_hsv", "libgtk-4.so.1"), Nothing, (Float32, Float32, Float32, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), _r, _g, _b, m_h, m_s, m_v)
        _h = m_h[]
        _s = m_s[]
        _v = m_v[]
        (_h, _s, _v)
    end
    function set_debug_flags(_flags)
        ret = ccall(("gtk_set_debug_flags", "libgtk-4.so.1"), Nothing, (Int32,), _flags)
        nothing
    end
    function show_uri(_parent::Maybe(GtkWindow), _uri, _timestamp)
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_show_uri", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, UInt32), _parent, _uri, _timestamp)
        nothing
    end
    function show_uri_full(_parent::Maybe(GtkWindow), _uri, _timestamp, _cancellable::Maybe(GCancellable), _callback::Maybe(Function), _user_data::Maybe(Nothing))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _cancellable = if _cancellable == nothing
                C_NULL
            else
                _cancellable
            end
        _callback = if _callback == nothing
                C_NULL
            else
                _callback
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        ret = ccall(("gtk_show_uri_full", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, UInt32, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), _parent, _uri, _timestamp, _cancellable, _callback, _user_data)
        nothing
    end
    function show_uri_full_finish(_parent::GtkWindow, _result)
        err = err_buf()
        ret = ccall(("gtk_show_uri_full_finish", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), _parent, _result, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function test_accessible_assertion_message_role(_domain, _file, _line, _func, _expr, _accessible, _expected_role, _actual_role)
        ret = ccall(("gtk_test_accessible_assertion_message_role", "libgtk-4.so.1"), Nothing, (Ptr{UInt8}, Ptr{UInt8}, Int32, Ptr{UInt8}, Ptr{UInt8}, Ptr{GObject}, Int32, Int32), _domain, _file, _line, _func, _expr, _accessible, _expected_role, _actual_role)
        nothing
    end
    function test_accessible_has_property(_accessible, _property)
        ret = ccall(("gtk_test_accessible_has_property", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), _accessible, _property)
        ret2 = convert(Bool, ret)
        ret2
    end
    function test_accessible_has_relation(_accessible, _relation)
        ret = ccall(("gtk_test_accessible_has_relation", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), _accessible, _relation)
        ret2 = convert(Bool, ret)
        ret2
    end
    function test_accessible_has_role(_accessible, _role)
        ret = ccall(("gtk_test_accessible_has_role", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), _accessible, _role)
        ret2 = convert(Bool, ret)
        ret2
    end
    function test_accessible_has_state(_accessible, _state)
        ret = ccall(("gtk_test_accessible_has_state", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), _accessible, _state)
        ret2 = convert(Bool, ret)
        ret2
    end
    function test_list_all_types()
        m_n_types = Ref{UInt32}()
        ret = ccall(("gtk_test_list_all_types", "libgtk-4.so.1"), Ptr{UInt64}, (Ptr{UInt32},), m_n_types)
        _n_types = m_n_types[]
        ret
    end
    function test_register_all_types()
        ret = ccall(("gtk_test_register_all_types", "libgtk-4.so.1"), Nothing, ())
        nothing
    end
    function test_widget_wait_for_draw(_widget::GtkWidget)
        ret = ccall(("gtk_test_widget_wait_for_draw", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), _widget)
        nothing
    end
    function tree_create_row_drag_content(_tree_model, _path::GtkTreePath)
        ret = ccall(("gtk_tree_create_row_drag_content", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTreePath}), _tree_model, _path)
        ret2 = convert(GdkContentProvider, ret, true)
        ret2
    end
    function tree_get_row_drag_data(_value::GValue)
        m_tree_model = Ref{Ptr{GObject}}()
        m_path = Ref{Ptr{GtkTreePath}}()
        ret = ccall(("gtk_tree_get_row_drag_data", "libgtk-4.so.1"), Cint, (Ptr{GValue}, Ptr{Ptr{GObject}}, Ptr{Ptr{GtkTreePath}}), _value, m_tree_model, m_path)
        ret2 = convert(Bool, ret)
        _tree_model = m_tree_model[]
        _tree_model = if _tree_model == C_NULL
                nothing
            else
                convert(GObject, _tree_model, false)
            end
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        (ret2, _tree_model, _path)
    end
    function tree_row_reference_deleted(_proxy::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_row_reference_deleted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), _proxy, _path)
        nothing
    end
    function tree_row_reference_inserted(_proxy::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_row_reference_inserted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), _proxy, _path)
        nothing
    end
    function value_dup_expression(_value::GValue)
        ret = ccall(("gtk_value_dup_expression", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GValue},), _value)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkExpression, ret, true)
            end
        ret2
    end
    function value_get_expression(_value::GValue)
        ret = ccall(("gtk_value_get_expression", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GValue},), _value)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkExpression, ret, false)
            end
        ret2
    end
    function value_set_expression(_value::GValue, _expression::GtkExpression)
        ret = ccall(("gtk_value_set_expression", "libgtk-4.so.1"), Nothing, (Ptr{GValue}, Ptr{GObject}), _value, _expression)
        nothing
    end
    function value_take_expression(_value::GValue, _expression::Maybe(GtkExpression))
        _expression = if _expression == nothing
                C_NULL
            else
                _expression
            end
        ret = ccall(("gtk_value_take_expression", "libgtk-4.so.1"), Nothing, (Ptr{GValue}, Ptr{GObject}), _value, _expression)
        nothing
    end
end))
end
