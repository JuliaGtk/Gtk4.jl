quote
$(Expr(:toplevel, quote
    function Box_alloc()
        ret = ccall(("graphene_box_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, ())
        ret2 = convert(GrapheneBox, ret, true)
        ret2
    end
    function contains_box(instance::GrapheneBox, _b::GrapheneBox)
        ret = ccall(("graphene_box_contains_box", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneBox}, Ptr{GrapheneBox}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function contains_point(instance::GrapheneBox, _point::GraphenePoint3D)
        ret = ccall(("graphene_box_contains_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneBox}, Ptr{GraphenePoint3D}), instance, _point)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal(instance::GrapheneBox, _b::GrapheneBox)
        ret = ccall(("graphene_box_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneBox}, Ptr{GrapheneBox}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function expand(instance::GrapheneBox, _point::GraphenePoint3D)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_box_expand", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{GraphenePoint3D}, Ptr{Ptr{GrapheneBox}}), instance, _point, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function expand_scalar(instance::GrapheneBox, _scalar)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_box_expand_scalar", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Float32, Ptr{Ptr{GrapheneBox}}), instance, _scalar, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function expand_vec3(instance::GrapheneBox, _vec::GrapheneVec3)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_box_expand_vec3", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{GrapheneVec3}, Ptr{Ptr{GrapheneBox}}), instance, _vec, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function free(instance::GrapheneBox)
        ret = ccall(("graphene_box_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox},), instance)
        nothing
    end
    function get_bounding_sphere(instance::GrapheneBox)
        m_sphere = Ref{Ptr{GrapheneSphere}}()
        ret = ccall(("graphene_box_get_bounding_sphere", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{GrapheneSphere}}), instance, m_sphere)
        _sphere = m_sphere[]
        _sphere = convert(GrapheneSphere, _sphere, false)
        _sphere
    end
    function get_center(instance::GrapheneBox)
        m_center = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_box_get_center", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{GraphenePoint3D}}), instance, m_center)
        _center = m_center[]
        _center = convert(GraphenePoint3D, _center, false)
        _center
    end
    function get_depth(instance::GrapheneBox)
        ret = ccall(("graphene_box_get_depth", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneBox},), instance)
        ret
    end
    function get_height(instance::GrapheneBox)
        ret = ccall(("graphene_box_get_height", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneBox},), instance)
        ret
    end
    function get_max(instance::GrapheneBox)
        m_max = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_box_get_max", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{GraphenePoint3D}}), instance, m_max)
        _max = m_max[]
        _max = convert(GraphenePoint3D, _max, false)
        _max
    end
    function get_min(instance::GrapheneBox)
        m_min = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_box_get_min", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{GraphenePoint3D}}), instance, m_min)
        _min = m_min[]
        _min = convert(GraphenePoint3D, _min, false)
        _min
    end
    function get_size(instance::GrapheneBox)
        m_size = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_box_get_size", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{GrapheneVec3}}), instance, m_size)
        _size = m_size[]
        _size = convert(GrapheneVec3, _size, false)
        _size
    end
    function get_vertices(instance::GrapheneBox)
        m_vertices = Ref{Ptr{Ptr{GrapheneVec3}}}()
        ret = ccall(("graphene_box_get_vertices", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{Ptr{Ptr{GrapheneVec3}}}), instance, m_vertices)
        _vertices = m_vertices[]
        _vertices
    end
    function get_width(instance::GrapheneBox)
        ret = ccall(("graphene_box_get_width", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneBox},), instance)
        ret
    end
    function init(instance::GrapheneBox, _min::Maybe(GraphenePoint3D), _max::Maybe(GraphenePoint3D))
        _min = if _min == nothing
                C_NULL
            else
                _min
            end
        _max = if _max == nothing
                C_NULL
            else
                _max
            end
        ret = ccall(("graphene_box_init", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, (Ptr{GrapheneBox}, Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _min, _max)
        ret2 = convert(GrapheneBox, ret, false)
        ret2
    end
    function init_from_box(instance::GrapheneBox, _src::GrapheneBox)
        ret = ccall(("graphene_box_init_from_box", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, (Ptr{GrapheneBox}, Ptr{GrapheneBox}), instance, _src)
        ret2 = convert(GrapheneBox, ret, false)
        ret2
    end
    function init_from_points(instance::GrapheneBox, _points)
        _points = convert(Vector{Ptr{GraphenePoint3D}}, _points)
        _n_points = length(_points)
        ret = ccall(("graphene_box_init_from_points", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, (Ptr{GrapheneBox}, UInt32, Ptr{Ptr{GraphenePoint3D}}), instance, _n_points, _points)
        ret2 = convert(GrapheneBox, ret, false)
        ret2
    end
    function init_from_vec3(instance::GrapheneBox, _min::Maybe(GrapheneVec3), _max::Maybe(GrapheneVec3))
        _min = if _min == nothing
                C_NULL
            else
                _min
            end
        _max = if _max == nothing
                C_NULL
            else
                _max
            end
        ret = ccall(("graphene_box_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, (Ptr{GrapheneBox}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}), instance, _min, _max)
        ret2 = convert(GrapheneBox, ret, false)
        ret2
    end
    function init_from_vectors(instance::GrapheneBox, _vectors)
        _vectors = convert(Vector{Ptr{GrapheneVec3}}, _vectors)
        _n_vectors = length(_vectors)
        ret = ccall(("graphene_box_init_from_vectors", "libgraphene-1.0.so.0"), Ptr{GrapheneBox}, (Ptr{GrapheneBox}, UInt32, Ptr{Ptr{GrapheneVec3}}), instance, _n_vectors, _vectors)
        ret2 = convert(GrapheneBox, ret, false)
        ret2
    end
    function intersection(instance::GrapheneBox, _b::GrapheneBox)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_box_intersection", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneBox}, Ptr{GrapheneBox}, Ptr{Ptr{GrapheneBox}}), instance, _b, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        (ret2, _res)
    end
    function union(instance::GrapheneBox, _b::GrapheneBox)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_box_union", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneBox}, Ptr{GrapheneBox}, Ptr{Ptr{GrapheneBox}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function Euler_alloc()
        ret = ccall(("graphene_euler_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, ())
        ret2 = convert(GrapheneEuler, ret, true)
        ret2
    end
    function equal(instance::GrapheneEuler, _b::GrapheneEuler)
        ret = ccall(("graphene_euler_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneEuler}, Ptr{GrapheneEuler}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneEuler},), instance)
        nothing
    end
    function get_alpha(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_alpha", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_beta(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_beta", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_gamma(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_gamma", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_order(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_order", "libgraphene-1.0.so.0"), Int32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_x(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_x", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_y(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_y", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function get_z(instance::GrapheneEuler)
        ret = ccall(("graphene_euler_get_z", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneEuler},), instance)
        ret
    end
    function init(instance::GrapheneEuler, _x, _y, _z)
        ret = ccall(("graphene_euler_init", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Float32, Float32, Float32), instance, _x, _y, _z)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_from_euler(instance::GrapheneEuler, _src::Maybe(GrapheneEuler))
        _src = if _src == nothing
                C_NULL
            else
                _src
            end
        ret = ccall(("graphene_euler_init_from_euler", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Ptr{GrapheneEuler}), instance, _src)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_from_matrix(instance::GrapheneEuler, _m::Maybe(GrapheneMatrix), _order)
        _m = if _m == nothing
                C_NULL
            else
                _m
            end
        ret = ccall(("graphene_euler_init_from_matrix", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Ptr{GrapheneMatrix}, Int32), instance, _m, _order)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_from_quaternion(instance::GrapheneEuler, _q::Maybe(GrapheneQuaternion), _order)
        _q = if _q == nothing
                C_NULL
            else
                _q
            end
        ret = ccall(("graphene_euler_init_from_quaternion", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Ptr{GrapheneQuaternion}, Int32), instance, _q, _order)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_from_radians(instance::GrapheneEuler, _x, _y, _z, _order)
        ret = ccall(("graphene_euler_init_from_radians", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Float32, Float32, Float32, Int32), instance, _x, _y, _z, _order)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_from_vec3(instance::GrapheneEuler, _v::Maybe(GrapheneVec3), _order)
        _v = if _v == nothing
                C_NULL
            else
                _v
            end
        ret = ccall(("graphene_euler_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Ptr{GrapheneVec3}, Int32), instance, _v, _order)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function init_with_order(instance::GrapheneEuler, _x, _y, _z, _order)
        ret = ccall(("graphene_euler_init_with_order", "libgraphene-1.0.so.0"), Ptr{GrapheneEuler}, (Ptr{GrapheneEuler}, Float32, Float32, Float32, Int32), instance, _x, _y, _z, _order)
        ret2 = convert(GrapheneEuler, ret, false)
        ret2
    end
    function reorder(instance::GrapheneEuler, _order)
        m_res = Ref{Ptr{GrapheneEuler}}()
        ret = ccall(("graphene_euler_reorder", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneEuler}, Int32, Ptr{Ptr{GrapheneEuler}}), instance, _order, m_res)
        _res = m_res[]
        _res = convert(GrapheneEuler, _res, false)
        _res
    end
    function to_matrix(instance::GrapheneEuler)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_euler_to_matrix", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneEuler}, Ptr{Ptr{GrapheneMatrix}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function to_quaternion(instance::GrapheneEuler)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_euler_to_quaternion", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneEuler}, Ptr{Ptr{GrapheneQuaternion}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function to_vec3(instance::GrapheneEuler)
        m_res = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_euler_to_vec3", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneEuler}, Ptr{Ptr{GrapheneVec3}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec3, _res, false)
        _res
    end
    function Frustum_alloc()
        ret = ccall(("graphene_frustum_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneFrustum}, ())
        ret2 = convert(GrapheneFrustum, ret, true)
        ret2
    end
    function contains_point(instance::GrapheneFrustum, _point::GraphenePoint3D)
        ret = ccall(("graphene_frustum_contains_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneFrustum}, Ptr{GraphenePoint3D}), instance, _point)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal(instance::GrapheneFrustum, _b::GrapheneFrustum)
        ret = ccall(("graphene_frustum_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneFrustum}, Ptr{GrapheneFrustum}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneFrustum)
        ret = ccall(("graphene_frustum_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneFrustum},), instance)
        nothing
    end
    function get_planes(instance::GrapheneFrustum)
        m_planes = Ref{Ptr{Ptr{GraphenePlane}}}()
        ret = ccall(("graphene_frustum_get_planes", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneFrustum}, Ptr{Ptr{Ptr{GraphenePlane}}}), instance, m_planes)
        _planes = m_planes[]
        _planes
    end
    function init(instance::GrapheneFrustum, _p0::GraphenePlane, _p1::GraphenePlane, _p2::GraphenePlane, _p3::GraphenePlane, _p4::GraphenePlane, _p5::GraphenePlane)
        ret = ccall(("graphene_frustum_init", "libgraphene-1.0.so.0"), Ptr{GrapheneFrustum}, (Ptr{GrapheneFrustum}, Ptr{GraphenePlane}, Ptr{GraphenePlane}, Ptr{GraphenePlane}, Ptr{GraphenePlane}, Ptr{GraphenePlane}, Ptr{GraphenePlane}), instance, _p0, _p1, _p2, _p3, _p4, _p5)
        ret2 = convert(GrapheneFrustum, ret, false)
        ret2
    end
    function init_from_frustum(instance::GrapheneFrustum, _src::GrapheneFrustum)
        ret = ccall(("graphene_frustum_init_from_frustum", "libgraphene-1.0.so.0"), Ptr{GrapheneFrustum}, (Ptr{GrapheneFrustum}, Ptr{GrapheneFrustum}), instance, _src)
        ret2 = convert(GrapheneFrustum, ret, false)
        ret2
    end
    function init_from_matrix(instance::GrapheneFrustum, _matrix::GrapheneMatrix)
        ret = ccall(("graphene_frustum_init_from_matrix", "libgraphene-1.0.so.0"), Ptr{GrapheneFrustum}, (Ptr{GrapheneFrustum}, Ptr{GrapheneMatrix}), instance, _matrix)
        ret2 = convert(GrapheneFrustum, ret, false)
        ret2
    end
    function intersects_box(instance::GrapheneFrustum, _box::GrapheneBox)
        ret = ccall(("graphene_frustum_intersects_box", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneFrustum}, Ptr{GrapheneBox}), instance, _box)
        ret2 = convert(Bool, ret)
        ret2
    end
    function intersects_sphere(instance::GrapheneFrustum, _sphere::GrapheneSphere)
        ret = ccall(("graphene_frustum_intersects_sphere", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneFrustum}, Ptr{GrapheneSphere}), instance, _sphere)
        ret2 = convert(Bool, ret)
        ret2
    end
    function Matrix_alloc()
        ret = ccall(("graphene_matrix_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, ())
        ret2 = convert(GrapheneMatrix, ret, true)
        ret2
    end
    function decompose(instance::GrapheneMatrix)
        m_translate = Ref{Ptr{GrapheneVec3}}()
        m_scale = Ref{Ptr{GrapheneVec3}}()
        m_rotate = Ref{Ptr{GrapheneQuaternion}}()
        m_shear = Ref{Ptr{GrapheneVec3}}()
        m_perspective = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_matrix_decompose", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{Ptr{GrapheneVec3}}, Ptr{Ptr{GrapheneVec3}}, Ptr{Ptr{GrapheneQuaternion}}, Ptr{Ptr{GrapheneVec3}}, Ptr{Ptr{GrapheneVec4}}), instance, m_translate, m_scale, m_rotate, m_shear, m_perspective)
        ret2 = convert(Bool, ret)
        _translate = m_translate[]
        _translate = convert(GrapheneVec3, _translate, false)
        _scale = m_scale[]
        _scale = convert(GrapheneVec3, _scale, false)
        _rotate = m_rotate[]
        _rotate = convert(GrapheneQuaternion, _rotate, false)
        _shear = m_shear[]
        _shear = convert(GrapheneVec3, _shear, false)
        _perspective = m_perspective[]
        _perspective = convert(GrapheneVec4, _perspective, false)
        (ret2, _translate, _scale, _rotate, _shear, _perspective)
    end
    function determinant(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_determinant", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function equal(instance::GrapheneMatrix, _b::GrapheneMatrix)
        ret = ccall(("graphene_matrix_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal_fast(instance::GrapheneMatrix, _b::GrapheneMatrix)
        ret = ccall(("graphene_matrix_equal_fast", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix},), instance)
        nothing
    end
    function get_row(instance::GrapheneMatrix, _index_)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_matrix_get_row", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, UInt32, Ptr{Ptr{GrapheneVec4}}), instance, _index_, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function get_value(instance::GrapheneMatrix, _row, _col)
        ret = ccall(("graphene_matrix_get_value", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix}, UInt32, UInt32), instance, _row, _col)
        ret
    end
    function get_x_scale(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_x_scale", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function get_x_translation(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_x_translation", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function get_y_scale(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_y_scale", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function get_y_translation(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_y_translation", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function get_z_scale(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_z_scale", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function get_z_translation(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_get_z_translation", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneMatrix},), instance)
        ret
    end
    function init_from_2d(instance::GrapheneMatrix, _xx, _yx, _xy, _yy, _x_0, _y_0)
        ret = ccall(("graphene_matrix_init_from_2d", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float64, Float64, Float64, Float64, Float64, Float64), instance, _xx, _yx, _xy, _yy, _x_0, _y_0)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_from_float(instance::GrapheneMatrix, _v)
        _v = convert(Vector{Float32}, _v)
        ret = ccall(("graphene_matrix_init_from_float", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Ptr{Float32}), instance, _v)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_from_matrix(instance::GrapheneMatrix, _src::GrapheneMatrix)
        ret = ccall(("graphene_matrix_init_from_matrix", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}), instance, _src)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_from_vec4(instance::GrapheneMatrix, _v0::GrapheneVec4, _v1::GrapheneVec4, _v2::GrapheneVec4, _v3::GrapheneVec4)
        ret = ccall(("graphene_matrix_init_from_vec4", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{GrapheneVec4}), instance, _v0, _v1, _v2, _v3)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_frustum(instance::GrapheneMatrix, _left, _right, _bottom, _top, _z_near, _z_far)
        ret = ccall(("graphene_matrix_init_frustum", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Float32, Float32, Float32, Float32, Float32), instance, _left, _right, _bottom, _top, _z_near, _z_far)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_identity(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_init_identity", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix},), instance)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_look_at(instance::GrapheneMatrix, _eye::GrapheneVec3, _center::GrapheneVec3, _up::GrapheneVec3)
        ret = ccall(("graphene_matrix_init_look_at", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}), instance, _eye, _center, _up)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_ortho(instance::GrapheneMatrix, _left, _right, _top, _bottom, _z_near, _z_far)
        ret = ccall(("graphene_matrix_init_ortho", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Float32, Float32, Float32, Float32, Float32), instance, _left, _right, _top, _bottom, _z_near, _z_far)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_perspective(instance::GrapheneMatrix, _fovy, _aspect, _z_near, _z_far)
        ret = ccall(("graphene_matrix_init_perspective", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Float32, Float32, Float32), instance, _fovy, _aspect, _z_near, _z_far)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_rotate(instance::GrapheneMatrix, _angle, _axis::GrapheneVec3)
        ret = ccall(("graphene_matrix_init_rotate", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Ptr{GrapheneVec3}), instance, _angle, _axis)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_scale(instance::GrapheneMatrix, _x, _y, _z)
        ret = ccall(("graphene_matrix_init_scale", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Float32, Float32), instance, _x, _y, _z)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_skew(instance::GrapheneMatrix, _x_skew, _y_skew)
        ret = ccall(("graphene_matrix_init_skew", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Float32, Float32), instance, _x_skew, _y_skew)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function init_translate(instance::GrapheneMatrix, _p::GraphenePoint3D)
        ret = ccall(("graphene_matrix_init_translate", "libgraphene-1.0.so.0"), Ptr{GrapheneMatrix}, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint3D}), instance, _p)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function interpolate(instance::GrapheneMatrix, _b::GrapheneMatrix, _factor)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}, Float64, Ptr{Ptr{GrapheneMatrix}}), instance, _b, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function inverse(instance::GrapheneMatrix)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_inverse", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{Ptr{GrapheneMatrix}}), instance, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        (ret2, _res)
    end
    function is_2d(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_is_2d", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_backface_visible(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_is_backface_visible", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_identity(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_is_identity", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_singular(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_is_singular", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function multiply(instance::GrapheneMatrix, _b::GrapheneMatrix)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_multiply", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}, Ptr{Ptr{GrapheneMatrix}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function near(instance::GrapheneMatrix, _b::GrapheneMatrix, _epsilon)
        ret = ccall(("graphene_matrix_near", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}, Float32), instance, _b, _epsilon)
        ret2 = convert(Bool, ret)
        ret2
    end
    function normalize(instance::GrapheneMatrix)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{Ptr{GrapheneMatrix}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function perspective(instance::GrapheneMatrix, _depth)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_perspective", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32, Ptr{Ptr{GrapheneMatrix}}), instance, _depth, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function print(instance::GrapheneMatrix)
        ret = ccall(("graphene_matrix_print", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix},), instance)
        nothing
    end
    function project_point(instance::GrapheneMatrix, _p::GraphenePoint)
        m_res = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_matrix_project_point", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint}, Ptr{Ptr{GraphenePoint}}), instance, _p, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint, _res, false)
        _res
    end
    function project_rect(instance::GrapheneMatrix, _r::GrapheneRect)
        m_res = Ref{Ptr{GrapheneQuad}}()
        ret = ccall(("graphene_matrix_project_rect", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneQuad}}), instance, _r, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuad, _res, false)
        _res
    end
    function project_rect_bounds(instance::GrapheneMatrix, _r::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_matrix_project_rect_bounds", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _r, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function rotate(instance::GrapheneMatrix, _angle, _axis::GrapheneVec3)
        ret = ccall(("graphene_matrix_rotate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32, Ptr{GrapheneVec3}), instance, _angle, _axis)
        nothing
    end
    function rotate_euler(instance::GrapheneMatrix, _e::GrapheneEuler)
        ret = ccall(("graphene_matrix_rotate_euler", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneEuler}), instance, _e)
        nothing
    end
    function rotate_quaternion(instance::GrapheneMatrix, _q::GrapheneQuaternion)
        ret = ccall(("graphene_matrix_rotate_quaternion", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneQuaternion}), instance, _q)
        nothing
    end
    function rotate_x(instance::GrapheneMatrix, _angle)
        ret = ccall(("graphene_matrix_rotate_x", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _angle)
        nothing
    end
    function rotate_y(instance::GrapheneMatrix, _angle)
        ret = ccall(("graphene_matrix_rotate_y", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _angle)
        nothing
    end
    function rotate_z(instance::GrapheneMatrix, _angle)
        ret = ccall(("graphene_matrix_rotate_z", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _angle)
        nothing
    end
    function scale(instance::GrapheneMatrix, _factor_x, _factor_y, _factor_z)
        ret = ccall(("graphene_matrix_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32, Float32, Float32), instance, _factor_x, _factor_y, _factor_z)
        nothing
    end
    function skew_xy(instance::GrapheneMatrix, _factor)
        ret = ccall(("graphene_matrix_skew_xy", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _factor)
        nothing
    end
    function skew_xz(instance::GrapheneMatrix, _factor)
        ret = ccall(("graphene_matrix_skew_xz", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _factor)
        nothing
    end
    function skew_yz(instance::GrapheneMatrix, _factor)
        ret = ccall(("graphene_matrix_skew_yz", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Float32), instance, _factor)
        nothing
    end
    function to_2d(instance::GrapheneMatrix)
        m_xx = Ref{Float64}()
        m_yx = Ref{Float64}()
        m_xy = Ref{Float64}()
        m_yy = Ref{Float64}()
        m_x_0 = Ref{Float64}()
        m_y_0 = Ref{Float64}()
        ret = ccall(("graphene_matrix_to_2d", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}), instance, m_xx, m_yx, m_xy, m_yy, m_x_0, m_y_0)
        ret2 = convert(Bool, ret)
        _xx = m_xx[]
        _yx = m_yx[]
        _xy = m_xy[]
        _yy = m_yy[]
        _x_0 = m_x_0[]
        _y_0 = m_y_0[]
        (ret2, _xx, _yx, _xy, _yy, _x_0, _y_0)
    end
    function to_float(instance::GrapheneMatrix)
        m_v = Ref{Ptr{Float32}}()
        ret = ccall(("graphene_matrix_to_float", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{Ptr{Float32}}), instance, m_v)
        _v = m_v[]
        _v
    end
    function transform_bounds(instance::GrapheneMatrix, _r::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_matrix_transform_bounds", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _r, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function transform_box(instance::GrapheneMatrix, _b::GrapheneBox)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_matrix_transform_box", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneBox}, Ptr{Ptr{GrapheneBox}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function transform_point(instance::GrapheneMatrix, _p::GraphenePoint)
        m_res = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_matrix_transform_point", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint}, Ptr{Ptr{GraphenePoint}}), instance, _p, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint, _res, false)
        _res
    end
    function transform_point3d(instance::GrapheneMatrix, _p::GraphenePoint3D)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_matrix_transform_point3d", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint3D}, Ptr{Ptr{GraphenePoint3D}}), instance, _p, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function transform_ray(instance::GrapheneMatrix, _r::GrapheneRay)
        m_res = Ref{Ptr{GrapheneRay}}()
        ret = ccall(("graphene_matrix_transform_ray", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRay}, Ptr{Ptr{GrapheneRay}}), instance, _r, m_res)
        _res = m_res[]
        _res = convert(GrapheneRay, _res, false)
        _res
    end
    function transform_rect(instance::GrapheneMatrix, _r::GrapheneRect)
        m_res = Ref{Ptr{GrapheneQuad}}()
        ret = ccall(("graphene_matrix_transform_rect", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneQuad}}), instance, _r, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuad, _res, false)
        _res
    end
    function transform_sphere(instance::GrapheneMatrix, _s::GrapheneSphere)
        m_res = Ref{Ptr{GrapheneSphere}}()
        ret = ccall(("graphene_matrix_transform_sphere", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneSphere}, Ptr{Ptr{GrapheneSphere}}), instance, _s, m_res)
        _res = m_res[]
        _res = convert(GrapheneSphere, _res, false)
        _res
    end
    function transform_vec3(instance::GrapheneMatrix, _v::GrapheneVec3)
        m_res = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_matrix_transform_vec3", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneVec3}, Ptr{Ptr{GrapheneVec3}}), instance, _v, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec3, _res, false)
        _res
    end
    function transform_vec4(instance::GrapheneMatrix, _v::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_matrix_transform_vec4", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _v, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function translate(instance::GrapheneMatrix, _pos::GraphenePoint3D)
        ret = ccall(("graphene_matrix_translate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint3D}), instance, _pos)
        nothing
    end
    function transpose(instance::GrapheneMatrix)
        m_res = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_matrix_transpose", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{Ptr{GrapheneMatrix}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneMatrix, _res, false)
        _res
    end
    function unproject_point3d(instance::GrapheneMatrix, _modelview::GrapheneMatrix, _point::GraphenePoint3D)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_matrix_unproject_point3d", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}, Ptr{GraphenePoint3D}, Ptr{Ptr{GraphenePoint3D}}), instance, _modelview, _point, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function untransform_bounds(instance::GrapheneMatrix, _r::GrapheneRect, _bounds::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_matrix_untransform_bounds", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneMatrix}, Ptr{GrapheneRect}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _r, _bounds, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function untransform_point(instance::GrapheneMatrix, _p::GraphenePoint, _bounds::GrapheneRect)
        m_res = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_matrix_untransform_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneMatrix}, Ptr{GraphenePoint}, Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, _p, _bounds, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GraphenePoint, _res, false)
        (ret2, _res)
    end
    function Plane_alloc()
        ret = ccall(("graphene_plane_alloc", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, ())
        ret2 = convert(GraphenePlane, ret, true)
        ret2
    end
    function distance(instance::GraphenePlane, _point::GraphenePoint3D)
        ret = ccall(("graphene_plane_distance", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePlane}, Ptr{GraphenePoint3D}), instance, _point)
        ret
    end
    function equal(instance::GraphenePlane, _b::GraphenePlane)
        ret = ccall(("graphene_plane_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GraphenePlane}, Ptr{GraphenePlane}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GraphenePlane)
        ret = ccall(("graphene_plane_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePlane},), instance)
        nothing
    end
    function get_constant(instance::GraphenePlane)
        ret = ccall(("graphene_plane_get_constant", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePlane},), instance)
        ret
    end
    function get_normal(instance::GraphenePlane)
        m_normal = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_plane_get_normal", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePlane}, Ptr{Ptr{GrapheneVec3}}), instance, m_normal)
        _normal = m_normal[]
        _normal = convert(GrapheneVec3, _normal, false)
        _normal
    end
    function init(instance::GraphenePlane, _normal::Maybe(GrapheneVec3), _constant)
        _normal = if _normal == nothing
                C_NULL
            else
                _normal
            end
        ret = ccall(("graphene_plane_init", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, (Ptr{GraphenePlane}, Ptr{GrapheneVec3}, Float32), instance, _normal, _constant)
        ret2 = convert(GraphenePlane, ret, false)
        ret2
    end
    function init_from_plane(instance::GraphenePlane, _src::GraphenePlane)
        ret = ccall(("graphene_plane_init_from_plane", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, (Ptr{GraphenePlane}, Ptr{GraphenePlane}), instance, _src)
        ret2 = convert(GraphenePlane, ret, false)
        ret2
    end
    function init_from_point(instance::GraphenePlane, _normal::GrapheneVec3, _point::GraphenePoint3D)
        ret = ccall(("graphene_plane_init_from_point", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, (Ptr{GraphenePlane}, Ptr{GrapheneVec3}, Ptr{GraphenePoint3D}), instance, _normal, _point)
        ret2 = convert(GraphenePlane, ret, false)
        ret2
    end
    function init_from_points(instance::GraphenePlane, _a::GraphenePoint3D, _b::GraphenePoint3D, _c::GraphenePoint3D)
        ret = ccall(("graphene_plane_init_from_points", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, (Ptr{GraphenePlane}, Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _a, _b, _c)
        ret2 = convert(GraphenePlane, ret, false)
        ret2
    end
    function init_from_vec4(instance::GraphenePlane, _src::GrapheneVec4)
        ret = ccall(("graphene_plane_init_from_vec4", "libgraphene-1.0.so.0"), Ptr{GraphenePlane}, (Ptr{GraphenePlane}, Ptr{GrapheneVec4}), instance, _src)
        ret2 = convert(GraphenePlane, ret, false)
        ret2
    end
    function negate(instance::GraphenePlane)
        m_res = Ref{Ptr{GraphenePlane}}()
        ret = ccall(("graphene_plane_negate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePlane}, Ptr{Ptr{GraphenePlane}}), instance, m_res)
        _res = m_res[]
        _res = convert(GraphenePlane, _res, false)
        _res
    end
    function normalize(instance::GraphenePlane)
        m_res = Ref{Ptr{GraphenePlane}}()
        ret = ccall(("graphene_plane_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePlane}, Ptr{Ptr{GraphenePlane}}), instance, m_res)
        _res = m_res[]
        _res = convert(GraphenePlane, _res, false)
        _res
    end
    function transform(instance::GraphenePlane, _matrix::GrapheneMatrix, _normal_matrix::Maybe(GrapheneMatrix))
        _normal_matrix = if _normal_matrix == nothing
                C_NULL
            else
                _normal_matrix
            end
        m_res = Ref{Ptr{GraphenePlane}}()
        ret = ccall(("graphene_plane_transform", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePlane}, Ptr{GrapheneMatrix}, Ptr{GrapheneMatrix}, Ptr{Ptr{GraphenePlane}}), instance, _matrix, _normal_matrix, m_res)
        _res = m_res[]
        _res = convert(GraphenePlane, _res, false)
        _res
    end
    function Point_alloc()
        ret = ccall(("graphene_point_alloc", "libgraphene-1.0.so.0"), Ptr{GraphenePoint}, ())
        ret2 = convert(GraphenePoint, ret, true)
        ret2
    end
    function distance(instance::GraphenePoint, _b::GraphenePoint)
        m_d_x = Ref{Float32}()
        m_d_y = Ref{Float32}()
        ret = ccall(("graphene_point_distance", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{Float32}, Ptr{Float32}), instance, _b, m_d_x, m_d_y)
        _d_x = m_d_x[]
        _d_y = m_d_y[]
        (ret, _d_x, _d_y)
    end
    function equal(instance::GraphenePoint, _b::GraphenePoint)
        ret = ccall(("graphene_point_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GraphenePoint}, Ptr{GraphenePoint}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GraphenePoint)
        ret = ccall(("graphene_point_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint},), instance)
        nothing
    end
    function init(instance::GraphenePoint, _x, _y)
        ret = ccall(("graphene_point_init", "libgraphene-1.0.so.0"), Ptr{GraphenePoint}, (Ptr{GraphenePoint}, Float32, Float32), instance, _x, _y)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function init_from_point(instance::GraphenePoint, _src::GraphenePoint)
        ret = ccall(("graphene_point_init_from_point", "libgraphene-1.0.so.0"), Ptr{GraphenePoint}, (Ptr{GraphenePoint}, Ptr{GraphenePoint}), instance, _src)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function init_from_vec2(instance::GraphenePoint, _src::GrapheneVec2)
        ret = ccall(("graphene_point_init_from_vec2", "libgraphene-1.0.so.0"), Ptr{GraphenePoint}, (Ptr{GraphenePoint}, Ptr{GrapheneVec2}), instance, _src)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function interpolate(instance::GraphenePoint, _b::GraphenePoint, _factor)
        m_res = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_point_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint}, Ptr{GraphenePoint}, Float64, Ptr{Ptr{GraphenePoint}}), instance, _b, _factor, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint, _res, false)
        _res
    end
    function near(instance::GraphenePoint, _b::GraphenePoint, _epsilon)
        ret = ccall(("graphene_point_near", "libgraphene-1.0.so.0"), Cint, (Ptr{GraphenePoint}, Ptr{GraphenePoint}, Float32), instance, _b, _epsilon)
        ret2 = convert(Bool, ret)
        ret2
    end
    function to_vec2(instance::GraphenePoint)
        m_v = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_point_to_vec2", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint}, Ptr{Ptr{GrapheneVec2}}), instance, m_v)
        _v = m_v[]
        _v = convert(GrapheneVec2, _v, false)
        _v
    end
    function Point3D_alloc()
        ret = ccall(("graphene_point3d_alloc", "libgraphene-1.0.so.0"), Ptr{GraphenePoint3D}, ())
        ret2 = convert(GraphenePoint3D, ret, true)
        ret2
    end
    function cross(instance::GraphenePoint3D, _b::GraphenePoint3D)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_point3d_cross", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Ptr{Ptr{GraphenePoint3D}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function distance(instance::GraphenePoint3D, _b::GraphenePoint3D)
        m_delta = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_point3d_distance", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Ptr{Ptr{GrapheneVec3}}), instance, _b, m_delta)
        _delta = m_delta[]
        _delta = convert(GrapheneVec3, _delta, false)
        (ret, _delta)
    end
    function dot(instance::GraphenePoint3D, _b::GraphenePoint3D)
        ret = ccall(("graphene_point3d_dot", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _b)
        ret
    end
    function equal(instance::GraphenePoint3D, _b::GraphenePoint3D)
        ret = ccall(("graphene_point3d_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GraphenePoint3D)
        ret = ccall(("graphene_point3d_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D},), instance)
        nothing
    end
    function init(instance::GraphenePoint3D, _x, _y, _z)
        ret = ccall(("graphene_point3d_init", "libgraphene-1.0.so.0"), Ptr{GraphenePoint3D}, (Ptr{GraphenePoint3D}, Float32, Float32, Float32), instance, _x, _y, _z)
        ret2 = convert(GraphenePoint3D, ret, false)
        ret2
    end
    function init_from_point(instance::GraphenePoint3D, _src::GraphenePoint3D)
        ret = ccall(("graphene_point3d_init_from_point", "libgraphene-1.0.so.0"), Ptr{GraphenePoint3D}, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _src)
        ret2 = convert(GraphenePoint3D, ret, false)
        ret2
    end
    function init_from_vec3(instance::GraphenePoint3D, _v::GrapheneVec3)
        ret = ccall(("graphene_point3d_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GraphenePoint3D}, (Ptr{GraphenePoint3D}, Ptr{GrapheneVec3}), instance, _v)
        ret2 = convert(GraphenePoint3D, ret, false)
        ret2
    end
    function interpolate(instance::GraphenePoint3D, _b::GraphenePoint3D, _factor)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_point3d_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Float64, Ptr{Ptr{GraphenePoint3D}}), instance, _b, _factor, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function length(instance::GraphenePoint3D)
        ret = ccall(("graphene_point3d_length", "libgraphene-1.0.so.0"), Float32, (Ptr{GraphenePoint3D},), instance)
        ret
    end
    function near(instance::GraphenePoint3D, _b::GraphenePoint3D, _epsilon)
        ret = ccall(("graphene_point3d_near", "libgraphene-1.0.so.0"), Cint, (Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Float32), instance, _b, _epsilon)
        ret2 = convert(Bool, ret)
        ret2
    end
    function normalize(instance::GraphenePoint3D)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_point3d_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Ptr{Ptr{GraphenePoint3D}}), instance, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function normalize_viewport(instance::GraphenePoint3D, _viewport::GrapheneRect, _z_near, _z_far)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_point3d_normalize_viewport", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Ptr{GrapheneRect}, Float32, Float32, Ptr{Ptr{GraphenePoint3D}}), instance, _viewport, _z_near, _z_far, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function scale(instance::GraphenePoint3D, _factor)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_point3d_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Float32, Ptr{Ptr{GraphenePoint3D}}), instance, _factor, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function to_vec3(instance::GraphenePoint3D)
        m_v = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_point3d_to_vec3", "libgraphene-1.0.so.0"), Nothing, (Ptr{GraphenePoint3D}, Ptr{Ptr{GrapheneVec3}}), instance, m_v)
        _v = m_v[]
        _v = convert(GrapheneVec3, _v, false)
        _v
    end
    function Quad_alloc()
        ret = ccall(("graphene_quad_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneQuad}, ())
        ret2 = convert(GrapheneQuad, ret, true)
        ret2
    end
    function bounds(instance::GrapheneQuad)
        m_r = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_quad_bounds", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuad}, Ptr{Ptr{GrapheneRect}}), instance, m_r)
        _r = m_r[]
        _r = convert(GrapheneRect, _r, false)
        _r
    end
    function contains(instance::GrapheneQuad, _p::GraphenePoint)
        ret = ccall(("graphene_quad_contains", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneQuad}, Ptr{GraphenePoint}), instance, _p)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneQuad)
        ret = ccall(("graphene_quad_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuad},), instance)
        nothing
    end
    function get_point(instance::GrapheneQuad, _index_)
        ret = ccall(("graphene_quad_get_point", "libgraphene-1.0.so.0"), Ptr{GraphenePoint}, (Ptr{GrapheneQuad}, UInt32), instance, _index_)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function init(instance::GrapheneQuad, _p1::GraphenePoint, _p2::GraphenePoint, _p3::GraphenePoint, _p4::GraphenePoint)
        ret = ccall(("graphene_quad_init", "libgraphene-1.0.so.0"), Ptr{GrapheneQuad}, (Ptr{GrapheneQuad}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GraphenePoint}), instance, _p1, _p2, _p3, _p4)
        ret2 = convert(GrapheneQuad, ret, false)
        ret2
    end
    function init_from_points(instance::GrapheneQuad, _points)
        _points = convert(Vector{Ptr{GraphenePoint}}, _points)
        ret = ccall(("graphene_quad_init_from_points", "libgraphene-1.0.so.0"), Ptr{GrapheneQuad}, (Ptr{GrapheneQuad}, Ptr{Ptr{GraphenePoint}}), instance, _points)
        ret2 = convert(GrapheneQuad, ret, false)
        ret2
    end
    function init_from_rect(instance::GrapheneQuad, _r::GrapheneRect)
        ret = ccall(("graphene_quad_init_from_rect", "libgraphene-1.0.so.0"), Ptr{GrapheneQuad}, (Ptr{GrapheneQuad}, Ptr{GrapheneRect}), instance, _r)
        ret2 = convert(GrapheneQuad, ret, false)
        ret2
    end
    function Quaternion_alloc()
        ret = ccall(("graphene_quaternion_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, ())
        ret2 = convert(GrapheneQuaternion, ret, true)
        ret2
    end
    function add(instance::GrapheneQuaternion, _b::GrapheneQuaternion)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_add", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneQuaternion}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function dot(instance::GrapheneQuaternion, _b::GrapheneQuaternion)
        ret = ccall(("graphene_quaternion_dot", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}), instance, _b)
        ret
    end
    function equal(instance::GrapheneQuaternion, _b::GrapheneQuaternion)
        ret = ccall(("graphene_quaternion_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneQuaternion)
        ret = ccall(("graphene_quaternion_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion},), instance)
        nothing
    end
    function init(instance::GrapheneQuaternion, _x, _y, _z, _w)
        ret = ccall(("graphene_quaternion_init", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Float32, Float32, Float32, Float32), instance, _x, _y, _z, _w)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_angle_vec3(instance::GrapheneQuaternion, _angle, _axis::GrapheneVec3)
        ret = ccall(("graphene_quaternion_init_from_angle_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Float32, Ptr{GrapheneVec3}), instance, _angle, _axis)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_angles(instance::GrapheneQuaternion, _deg_x, _deg_y, _deg_z)
        ret = ccall(("graphene_quaternion_init_from_angles", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Float32, Float32, Float32), instance, _deg_x, _deg_y, _deg_z)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_euler(instance::GrapheneQuaternion, _e::GrapheneEuler)
        ret = ccall(("graphene_quaternion_init_from_euler", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Ptr{GrapheneEuler}), instance, _e)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_matrix(instance::GrapheneQuaternion, _m::GrapheneMatrix)
        ret = ccall(("graphene_quaternion_init_from_matrix", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Ptr{GrapheneMatrix}), instance, _m)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_quaternion(instance::GrapheneQuaternion, _src::GrapheneQuaternion)
        ret = ccall(("graphene_quaternion_init_from_quaternion", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}), instance, _src)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_radians(instance::GrapheneQuaternion, _rad_x, _rad_y, _rad_z)
        ret = ccall(("graphene_quaternion_init_from_radians", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Float32, Float32, Float32), instance, _rad_x, _rad_y, _rad_z)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_from_vec4(instance::GrapheneQuaternion, _src::GrapheneVec4)
        ret = ccall(("graphene_quaternion_init_from_vec4", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion}, Ptr{GrapheneVec4}), instance, _src)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function init_identity(instance::GrapheneQuaternion)
        ret = ccall(("graphene_quaternion_init_identity", "libgraphene-1.0.so.0"), Ptr{GrapheneQuaternion}, (Ptr{GrapheneQuaternion},), instance)
        ret2 = convert(GrapheneQuaternion, ret, false)
        ret2
    end
    function invert(instance::GrapheneQuaternion)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_invert", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneQuaternion}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function multiply(instance::GrapheneQuaternion, _b::GrapheneQuaternion)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_multiply", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneQuaternion}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function normalize(instance::GrapheneQuaternion)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneQuaternion}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function scale(instance::GrapheneQuaternion, _factor)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Float32, Ptr{Ptr{GrapheneQuaternion}}), instance, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function slerp(instance::GrapheneQuaternion, _b::GrapheneQuaternion, _factor)
        m_res = Ref{Ptr{GrapheneQuaternion}}()
        ret = ccall(("graphene_quaternion_slerp", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{GrapheneQuaternion}, Float32, Ptr{Ptr{GrapheneQuaternion}}), instance, _b, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneQuaternion, _res, false)
        _res
    end
    function to_angle_vec3(instance::GrapheneQuaternion)
        m_angle = Ref{Float32}()
        m_axis = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_quaternion_to_angle_vec3", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Float32}, Ptr{Ptr{GrapheneVec3}}), instance, m_angle, m_axis)
        _angle = m_angle[]
        _axis = m_axis[]
        _axis = convert(GrapheneVec3, _axis, false)
        (_angle, _axis)
    end
    function to_angles(instance::GrapheneQuaternion)
        m_deg_x = Ref{Float32}()
        m_deg_y = Ref{Float32}()
        m_deg_z = Ref{Float32}()
        ret = ccall(("graphene_quaternion_to_angles", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), instance, m_deg_x, m_deg_y, m_deg_z)
        _deg_x = m_deg_x[]
        _deg_y = m_deg_y[]
        _deg_z = m_deg_z[]
        (_deg_x, _deg_y, _deg_z)
    end
    function to_matrix(instance::GrapheneQuaternion)
        m_m = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("graphene_quaternion_to_matrix", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneMatrix}}), instance, m_m)
        _m = m_m[]
        _m = convert(GrapheneMatrix, _m, false)
        _m
    end
    function to_radians(instance::GrapheneQuaternion)
        m_rad_x = Ref{Float32}()
        m_rad_y = Ref{Float32}()
        m_rad_z = Ref{Float32}()
        ret = ccall(("graphene_quaternion_to_radians", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), instance, m_rad_x, m_rad_y, m_rad_z)
        _rad_x = m_rad_x[]
        _rad_y = m_rad_y[]
        _rad_z = m_rad_z[]
        (_rad_x, _rad_y, _rad_z)
    end
    function to_vec4(instance::GrapheneQuaternion)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_quaternion_to_vec4", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneQuaternion}, Ptr{Ptr{GrapheneVec4}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function Ray_alloc()
        ret = ccall(("graphene_ray_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneRay}, ())
        ret2 = convert(GrapheneRay, ret, true)
        ret2
    end
    function equal(instance::GrapheneRay, _b::GrapheneRay)
        ret = ccall(("graphene_ray_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRay}, Ptr{GrapheneRay}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneRay)
        ret = ccall(("graphene_ray_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRay},), instance)
        nothing
    end
    function get_closest_point_to_point(instance::GrapheneRay, _p::GraphenePoint3D)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_ray_get_closest_point_to_point", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRay}, Ptr{GraphenePoint3D}, Ptr{Ptr{GraphenePoint3D}}), instance, _p, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function get_direction(instance::GrapheneRay)
        m_direction = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_ray_get_direction", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRay}, Ptr{Ptr{GrapheneVec3}}), instance, m_direction)
        _direction = m_direction[]
        _direction = convert(GrapheneVec3, _direction, false)
        _direction
    end
    function get_distance_to_plane(instance::GrapheneRay, _p::GraphenePlane)
        ret = ccall(("graphene_ray_get_distance_to_plane", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRay}, Ptr{GraphenePlane}), instance, _p)
        ret
    end
    function get_distance_to_point(instance::GrapheneRay, _p::GraphenePoint3D)
        ret = ccall(("graphene_ray_get_distance_to_point", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRay}, Ptr{GraphenePoint3D}), instance, _p)
        ret
    end
    function get_origin(instance::GrapheneRay)
        m_origin = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_ray_get_origin", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRay}, Ptr{Ptr{GraphenePoint3D}}), instance, m_origin)
        _origin = m_origin[]
        _origin = convert(GraphenePoint3D, _origin, false)
        _origin
    end
    function get_position_at(instance::GrapheneRay, _t)
        m_position = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_ray_get_position_at", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRay}, Float32, Ptr{Ptr{GraphenePoint3D}}), instance, _t, m_position)
        _position = m_position[]
        _position = convert(GraphenePoint3D, _position, false)
        _position
    end
    function init(instance::GrapheneRay, _origin::Maybe(GraphenePoint3D), _direction::Maybe(GrapheneVec3))
        _origin = if _origin == nothing
                C_NULL
            else
                _origin
            end
        _direction = if _direction == nothing
                C_NULL
            else
                _direction
            end
        ret = ccall(("graphene_ray_init", "libgraphene-1.0.so.0"), Ptr{GrapheneRay}, (Ptr{GrapheneRay}, Ptr{GraphenePoint3D}, Ptr{GrapheneVec3}), instance, _origin, _direction)
        ret2 = convert(GrapheneRay, ret, false)
        ret2
    end
    function init_from_ray(instance::GrapheneRay, _src::GrapheneRay)
        ret = ccall(("graphene_ray_init_from_ray", "libgraphene-1.0.so.0"), Ptr{GrapheneRay}, (Ptr{GrapheneRay}, Ptr{GrapheneRay}), instance, _src)
        ret2 = convert(GrapheneRay, ret, false)
        ret2
    end
    function init_from_vec3(instance::GrapheneRay, _origin::Maybe(GrapheneVec3), _direction::Maybe(GrapheneVec3))
        _origin = if _origin == nothing
                C_NULL
            else
                _origin
            end
        _direction = if _direction == nothing
                C_NULL
            else
                _direction
            end
        ret = ccall(("graphene_ray_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneRay}, (Ptr{GrapheneRay}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}), instance, _origin, _direction)
        ret2 = convert(GrapheneRay, ret, false)
        ret2
    end
    function intersect_box(instance::GrapheneRay, _b::GrapheneBox)
        m_t_out = Ref{Float32}()
        ret = ccall(("graphene_ray_intersect_box", "libgraphene-1.0.so.0"), Int32, (Ptr{GrapheneRay}, Ptr{GrapheneBox}, Ptr{Float32}), instance, _b, m_t_out)
        _t_out = m_t_out[]
        (ret, _t_out)
    end
    function intersect_sphere(instance::GrapheneRay, _s::GrapheneSphere)
        m_t_out = Ref{Float32}()
        ret = ccall(("graphene_ray_intersect_sphere", "libgraphene-1.0.so.0"), Int32, (Ptr{GrapheneRay}, Ptr{GrapheneSphere}, Ptr{Float32}), instance, _s, m_t_out)
        _t_out = m_t_out[]
        (ret, _t_out)
    end
    function intersect_triangle(instance::GrapheneRay, _t::GrapheneTriangle)
        m_t_out = Ref{Float32}()
        ret = ccall(("graphene_ray_intersect_triangle", "libgraphene-1.0.so.0"), Int32, (Ptr{GrapheneRay}, Ptr{GrapheneTriangle}, Ptr{Float32}), instance, _t, m_t_out)
        _t_out = m_t_out[]
        (ret, _t_out)
    end
    function intersects_box(instance::GrapheneRay, _b::GrapheneBox)
        ret = ccall(("graphene_ray_intersects_box", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRay}, Ptr{GrapheneBox}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function intersects_sphere(instance::GrapheneRay, _s::GrapheneSphere)
        ret = ccall(("graphene_ray_intersects_sphere", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRay}, Ptr{GrapheneSphere}), instance, _s)
        ret2 = convert(Bool, ret)
        ret2
    end
    function intersects_triangle(instance::GrapheneRay, _t::GrapheneTriangle)
        ret = ccall(("graphene_ray_intersects_triangle", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRay}, Ptr{GrapheneTriangle}), instance, _t)
        ret2 = convert(Bool, ret)
        ret2
    end
    function contains_point(instance::GrapheneRect, _p::GraphenePoint)
        ret = ccall(("graphene_rect_contains_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRect}, Ptr{GraphenePoint}), instance, _p)
        ret2 = convert(Bool, ret)
        ret2
    end
    function contains_rect(instance::GrapheneRect, _b::GrapheneRect)
        ret = ccall(("graphene_rect_contains_rect", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRect}, Ptr{GrapheneRect}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal(instance::GrapheneRect, _b::GrapheneRect)
        ret = ccall(("graphene_rect_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRect}, Ptr{GrapheneRect}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function expand(instance::GrapheneRect, _p::GraphenePoint)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_expand", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Ptr{Ptr{GrapheneRect}}), instance, _p, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function free(instance::GrapheneRect)
        ret = ccall(("graphene_rect_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect},), instance)
        nothing
    end
    function get_area(instance::GrapheneRect)
        ret = ccall(("graphene_rect_get_area", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRect},), instance)
        ret
    end
    function get_bottom_left(instance::GrapheneRect)
        m_p = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_rect_get_bottom_left", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, m_p)
        _p = m_p[]
        _p = convert(GraphenePoint, _p, false)
        _p
    end
    function get_bottom_right(instance::GrapheneRect)
        m_p = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_rect_get_bottom_right", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, m_p)
        _p = m_p[]
        _p = convert(GraphenePoint, _p, false)
        _p
    end
    function get_center(instance::GrapheneRect)
        m_p = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_rect_get_center", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, m_p)
        _p = m_p[]
        _p = convert(GraphenePoint, _p, false)
        _p
    end
    function get_height(instance::GrapheneRect)
        ret = ccall(("graphene_rect_get_height", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRect},), instance)
        ret
    end
    function get_top_left(instance::GrapheneRect)
        m_p = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_rect_get_top_left", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, m_p)
        _p = m_p[]
        _p = convert(GraphenePoint, _p, false)
        _p
    end
    function get_top_right(instance::GrapheneRect)
        m_p = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("graphene_rect_get_top_right", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GraphenePoint}}), instance, m_p)
        _p = m_p[]
        _p = convert(GraphenePoint, _p, false)
        _p
    end
    function get_vertices(instance::GrapheneRect)
        m_vertices = Ref{Ptr{Ptr{GrapheneVec2}}}()
        ret = ccall(("graphene_rect_get_vertices", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{Ptr{GrapheneVec2}}}), instance, m_vertices)
        _vertices = m_vertices[]
        _vertices
    end
    function get_width(instance::GrapheneRect)
        ret = ccall(("graphene_rect_get_width", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRect},), instance)
        ret
    end
    function get_x(instance::GrapheneRect)
        ret = ccall(("graphene_rect_get_x", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRect},), instance)
        ret
    end
    function get_y(instance::GrapheneRect)
        ret = ccall(("graphene_rect_get_y", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneRect},), instance)
        ret
    end
    function init(instance::GrapheneRect, _x, _y, _width, _height)
        ret = ccall(("graphene_rect_init", "libgraphene-1.0.so.0"), Ptr{GrapheneRect}, (Ptr{GrapheneRect}, Float32, Float32, Float32, Float32), instance, _x, _y, _width, _height)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function init_from_rect(instance::GrapheneRect, _src::GrapheneRect)
        ret = ccall(("graphene_rect_init_from_rect", "libgraphene-1.0.so.0"), Ptr{GrapheneRect}, (Ptr{GrapheneRect}, Ptr{GrapheneRect}), instance, _src)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function inset(instance::GrapheneRect, _d_x, _d_y)
        ret = ccall(("graphene_rect_inset", "libgraphene-1.0.so.0"), Ptr{GrapheneRect}, (Ptr{GrapheneRect}, Float32, Float32), instance, _d_x, _d_y)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function inset_r(instance::GrapheneRect, _d_x, _d_y)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_inset_r", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Float32, Float32, Ptr{Ptr{GrapheneRect}}), instance, _d_x, _d_y, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function interpolate(instance::GrapheneRect, _b::GrapheneRect, _factor)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{GrapheneRect}, Float64, Ptr{Ptr{GrapheneRect}}), instance, _b, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function intersection(instance::GrapheneRect, _b::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_intersection", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneRect}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _b, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        (ret2, _res)
    end
    function normalize(instance::GrapheneRect)
        ret = ccall(("graphene_rect_normalize", "libgraphene-1.0.so.0"), Ptr{GrapheneRect}, (Ptr{GrapheneRect},), instance)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function normalize_r(instance::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_normalize_r", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function offset(instance::GrapheneRect, _d_x, _d_y)
        ret = ccall(("graphene_rect_offset", "libgraphene-1.0.so.0"), Ptr{GrapheneRect}, (Ptr{GrapheneRect}, Float32, Float32), instance, _d_x, _d_y)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function offset_r(instance::GrapheneRect, _d_x, _d_y)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_offset_r", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Float32, Float32, Ptr{Ptr{GrapheneRect}}), instance, _d_x, _d_y, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function round_extents(instance::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_round_extents", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function scale(instance::GrapheneRect, _s_h, _s_v)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Float32, Float32, Ptr{Ptr{GrapheneRect}}), instance, _s_h, _s_v, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function union(instance::GrapheneRect, _b::GrapheneRect)
        m_res = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("graphene_rect_union", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneRect}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneRect, _res, false)
        _res
    end
    function Sphere_alloc()
        ret = ccall(("graphene_sphere_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneSphere}, ())
        ret2 = convert(GrapheneSphere, ret, true)
        ret2
    end
    function contains_point(instance::GrapheneSphere, _point::GraphenePoint3D)
        ret = ccall(("graphene_sphere_contains_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneSphere}, Ptr{GraphenePoint3D}), instance, _point)
        ret2 = convert(Bool, ret)
        ret2
    end
    function distance(instance::GrapheneSphere, _point::GraphenePoint3D)
        ret = ccall(("graphene_sphere_distance", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneSphere}, Ptr{GraphenePoint3D}), instance, _point)
        ret
    end
    function equal(instance::GrapheneSphere, _b::GrapheneSphere)
        ret = ccall(("graphene_sphere_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneSphere}, Ptr{GrapheneSphere}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneSphere)
        ret = ccall(("graphene_sphere_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneSphere},), instance)
        nothing
    end
    function get_bounding_box(instance::GrapheneSphere)
        m_box = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_sphere_get_bounding_box", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneSphere}, Ptr{Ptr{GrapheneBox}}), instance, m_box)
        _box = m_box[]
        _box = convert(GrapheneBox, _box, false)
        _box
    end
    function get_center(instance::GrapheneSphere)
        m_center = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_sphere_get_center", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneSphere}, Ptr{Ptr{GraphenePoint3D}}), instance, m_center)
        _center = m_center[]
        _center = convert(GraphenePoint3D, _center, false)
        _center
    end
    function get_radius(instance::GrapheneSphere)
        ret = ccall(("graphene_sphere_get_radius", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneSphere},), instance)
        ret
    end
    function init(instance::GrapheneSphere, _center::Maybe(GraphenePoint3D), _radius)
        _center = if _center == nothing
                C_NULL
            else
                _center
            end
        ret = ccall(("graphene_sphere_init", "libgraphene-1.0.so.0"), Ptr{GrapheneSphere}, (Ptr{GrapheneSphere}, Ptr{GraphenePoint3D}, Float32), instance, _center, _radius)
        ret2 = convert(GrapheneSphere, ret, false)
        ret2
    end
    function init_from_points(instance::GrapheneSphere, _points, _center::Maybe(GraphenePoint3D))
        _points = convert(Vector{Ptr{GraphenePoint3D}}, _points)
        _center = if _center == nothing
                C_NULL
            else
                _center
            end
        _n_points = length(_points)
        ret = ccall(("graphene_sphere_init_from_points", "libgraphene-1.0.so.0"), Ptr{GrapheneSphere}, (Ptr{GrapheneSphere}, UInt32, Ptr{Ptr{GraphenePoint3D}}, Ptr{GraphenePoint3D}), instance, _n_points, _points, _center)
        ret2 = convert(GrapheneSphere, ret, false)
        ret2
    end
    function init_from_vectors(instance::GrapheneSphere, _vectors, _center::Maybe(GraphenePoint3D))
        _vectors = convert(Vector{Ptr{GrapheneVec3}}, _vectors)
        _center = if _center == nothing
                C_NULL
            else
                _center
            end
        _n_vectors = length(_vectors)
        ret = ccall(("graphene_sphere_init_from_vectors", "libgraphene-1.0.so.0"), Ptr{GrapheneSphere}, (Ptr{GrapheneSphere}, UInt32, Ptr{Ptr{GrapheneVec3}}, Ptr{GraphenePoint3D}), instance, _n_vectors, _vectors, _center)
        ret2 = convert(GrapheneSphere, ret, false)
        ret2
    end
    function is_empty(instance::GrapheneSphere)
        ret = ccall(("graphene_sphere_is_empty", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneSphere},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function translate(instance::GrapheneSphere, _point::GraphenePoint3D)
        m_res = Ref{Ptr{GrapheneSphere}}()
        ret = ccall(("graphene_sphere_translate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneSphere}, Ptr{GraphenePoint3D}, Ptr{Ptr{GrapheneSphere}}), instance, _point, m_res)
        _res = m_res[]
        _res = convert(GrapheneSphere, _res, false)
        _res
    end
    function Triangle_alloc()
        ret = ccall(("graphene_triangle_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneTriangle}, ())
        ret2 = convert(GrapheneTriangle, ret, true)
        ret2
    end
    function contains_point(instance::GrapheneTriangle, _p::GraphenePoint3D)
        ret = ccall(("graphene_triangle_contains_point", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneTriangle}, Ptr{GraphenePoint3D}), instance, _p)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal(instance::GrapheneTriangle, _b::GrapheneTriangle)
        ret = ccall(("graphene_triangle_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneTriangle}, Ptr{GrapheneTriangle}), instance, _b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneTriangle)
        ret = ccall(("graphene_triangle_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle},), instance)
        nothing
    end
    function get_area(instance::GrapheneTriangle)
        ret = ccall(("graphene_triangle_get_area", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneTriangle},), instance)
        ret
    end
    function get_barycoords(instance::GrapheneTriangle, _p::Maybe(GraphenePoint3D))
        _p = if _p == nothing
                C_NULL
            else
                _p
            end
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_triangle_get_barycoords", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneTriangle}, Ptr{GraphenePoint3D}, Ptr{Ptr{GrapheneVec2}}), instance, _p, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        (ret2, _res)
    end
    function get_bounding_box(instance::GrapheneTriangle)
        m_res = Ref{Ptr{GrapheneBox}}()
        ret = ccall(("graphene_triangle_get_bounding_box", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GrapheneBox}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneBox, _res, false)
        _res
    end
    function get_midpoint(instance::GrapheneTriangle)
        m_res = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_triangle_get_midpoint", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GraphenePoint3D}}), instance, m_res)
        _res = m_res[]
        _res = convert(GraphenePoint3D, _res, false)
        _res
    end
    function get_normal(instance::GrapheneTriangle)
        m_res = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_triangle_get_normal", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GrapheneVec3}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec3, _res, false)
        _res
    end
    function get_plane(instance::GrapheneTriangle)
        m_res = Ref{Ptr{GraphenePlane}}()
        ret = ccall(("graphene_triangle_get_plane", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GraphenePlane}}), instance, m_res)
        _res = m_res[]
        _res = convert(GraphenePlane, _res, false)
        _res
    end
    function get_points(instance::GrapheneTriangle)
        m_a = Ref{Ptr{GraphenePoint3D}}()
        m_b = Ref{Ptr{GraphenePoint3D}}()
        m_c = Ref{Ptr{GraphenePoint3D}}()
        ret = ccall(("graphene_triangle_get_points", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GraphenePoint3D}}, Ptr{Ptr{GraphenePoint3D}}, Ptr{Ptr{GraphenePoint3D}}), instance, m_a, m_b, m_c)
        _a = m_a[]
        _a = convert(GraphenePoint3D, _a, false)
        _b = m_b[]
        _b = convert(GraphenePoint3D, _b, false)
        _c = m_c[]
        _c = convert(GraphenePoint3D, _c, false)
        (_a, _b, _c)
    end
    function get_uv(instance::GrapheneTriangle, _p::Maybe(GraphenePoint3D), _uv_a::GrapheneVec2, _uv_b::GrapheneVec2, _uv_c::GrapheneVec2)
        _p = if _p == nothing
                C_NULL
            else
                _p
            end
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_triangle_get_uv", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneTriangle}, Ptr{GraphenePoint3D}, Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _p, _uv_a, _uv_b, _uv_c, m_res)
        ret2 = convert(Bool, ret)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        (ret2, _res)
    end
    function get_vertices(instance::GrapheneTriangle)
        m_a = Ref{Ptr{GrapheneVec3}}()
        m_b = Ref{Ptr{GrapheneVec3}}()
        m_c = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_triangle_get_vertices", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneTriangle}, Ptr{Ptr{GrapheneVec3}}, Ptr{Ptr{GrapheneVec3}}, Ptr{Ptr{GrapheneVec3}}), instance, m_a, m_b, m_c)
        _a = m_a[]
        _a = convert(GrapheneVec3, _a, false)
        _b = m_b[]
        _b = convert(GrapheneVec3, _b, false)
        _c = m_c[]
        _c = convert(GrapheneVec3, _c, false)
        (_a, _b, _c)
    end
    function init_from_float(instance::GrapheneTriangle, _a, _b, _c)
        _a = convert(Vector{Float32}, _a)
        _b = convert(Vector{Float32}, _b)
        _c = convert(Vector{Float32}, _c)
        ret = ccall(("graphene_triangle_init_from_float", "libgraphene-1.0.so.0"), Ptr{GrapheneTriangle}, (Ptr{GrapheneTriangle}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), instance, _a, _b, _c)
        ret2 = convert(GrapheneTriangle, ret, false)
        ret2
    end
    function init_from_point3d(instance::GrapheneTriangle, _a::Maybe(GraphenePoint3D), _b::Maybe(GraphenePoint3D), _c::Maybe(GraphenePoint3D))
        _a = if _a == nothing
                C_NULL
            else
                _a
            end
        _b = if _b == nothing
                C_NULL
            else
                _b
            end
        _c = if _c == nothing
                C_NULL
            else
                _c
            end
        ret = ccall(("graphene_triangle_init_from_point3d", "libgraphene-1.0.so.0"), Ptr{GrapheneTriangle}, (Ptr{GrapheneTriangle}, Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}, Ptr{GraphenePoint3D}), instance, _a, _b, _c)
        ret2 = convert(GrapheneTriangle, ret, false)
        ret2
    end
    function init_from_vec3(instance::GrapheneTriangle, _a::Maybe(GrapheneVec3), _b::Maybe(GrapheneVec3), _c::Maybe(GrapheneVec3))
        _a = if _a == nothing
                C_NULL
            else
                _a
            end
        _b = if _b == nothing
                C_NULL
            else
                _b
            end
        _c = if _c == nothing
                C_NULL
            else
                _c
            end
        ret = ccall(("graphene_triangle_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneTriangle}, (Ptr{GrapheneTriangle}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}, Ptr{GrapheneVec3}), instance, _a, _b, _c)
        ret2 = convert(GrapheneTriangle, ret, false)
        ret2
    end
    function Vec2_alloc()
        ret = ccall(("graphene_vec2_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneVec2}, ())
        ret2 = convert(GrapheneVec2, ret, true)
        ret2
    end
    function add(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_add", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function divide(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_divide", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function dot(instance::GrapheneVec2, _b::GrapheneVec2)
        ret = ccall(("graphene_vec2_dot", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}), instance, _b)
        ret
    end
    function equal(instance::GrapheneVec2, _v2::GrapheneVec2)
        ret = ccall(("graphene_vec2_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}), instance, _v2)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneVec2)
        ret = ccall(("graphene_vec2_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2},), instance)
        nothing
    end
    function get_x(instance::GrapheneVec2)
        ret = ccall(("graphene_vec2_get_x", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec2},), instance)
        ret
    end
    function get_y(instance::GrapheneVec2)
        ret = ccall(("graphene_vec2_get_y", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec2},), instance)
        ret
    end
    function init(instance::GrapheneVec2, _x, _y)
        ret = ccall(("graphene_vec2_init", "libgraphene-1.0.so.0"), Ptr{GrapheneVec2}, (Ptr{GrapheneVec2}, Float32, Float32), instance, _x, _y)
        ret2 = convert(GrapheneVec2, ret, false)
        ret2
    end
    function init_from_float(instance::GrapheneVec2, _src)
        _src = convert(Vector{Float32}, _src)
        ret = ccall(("graphene_vec2_init_from_float", "libgraphene-1.0.so.0"), Ptr{GrapheneVec2}, (Ptr{GrapheneVec2}, Ptr{Float32}), instance, _src)
        ret2 = convert(GrapheneVec2, ret, false)
        ret2
    end
    function init_from_vec2(instance::GrapheneVec2, _src::GrapheneVec2)
        ret = ccall(("graphene_vec2_init_from_vec2", "libgraphene-1.0.so.0"), Ptr{GrapheneVec2}, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}), instance, _src)
        ret2 = convert(GrapheneVec2, ret, false)
        ret2
    end
    function interpolate(instance::GrapheneVec2, _v2::GrapheneVec2, _factor)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Float64, Ptr{Ptr{GrapheneVec2}}), instance, _v2, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function length(instance::GrapheneVec2)
        ret = ccall(("graphene_vec2_length", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec2},), instance)
        ret
    end
    function max(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_max", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function min(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_min", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function multiply(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_multiply", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function near(instance::GrapheneVec2, _v2::GrapheneVec2, _epsilon)
        ret = ccall(("graphene_vec2_near", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Float32), instance, _v2, _epsilon)
        ret2 = convert(Bool, ret)
        ret2
    end
    function negate(instance::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_negate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function normalize(instance::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function scale(instance::GrapheneVec2, _factor)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Float32, Ptr{Ptr{GrapheneVec2}}), instance, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function subtract(instance::GrapheneVec2, _b::GrapheneVec2)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec2_subtract", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{GrapheneVec2}, Ptr{Ptr{GrapheneVec2}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function to_float(instance::GrapheneVec2)
        m_dest = Ref{Ptr{Float32}}()
        ret = ccall(("graphene_vec2_to_float", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec2}, Ptr{Ptr{Float32}}), instance, m_dest)
        _dest = m_dest[]
        _dest
    end
    function Vec4_alloc()
        ret = ccall(("graphene_vec4_alloc", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, ())
        ret2 = convert(GrapheneVec4, ret, true)
        ret2
    end
    function add(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_add", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function divide(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_divide", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function dot(instance::GrapheneVec4, _b::GrapheneVec4)
        ret = ccall(("graphene_vec4_dot", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}), instance, _b)
        ret
    end
    function equal(instance::GrapheneVec4, _v2::GrapheneVec4)
        ret = ccall(("graphene_vec4_equal", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}), instance, _v2)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_free", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4},), instance)
        nothing
    end
    function get_w(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_get_w", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4},), instance)
        ret
    end
    function get_x(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_get_x", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4},), instance)
        ret
    end
    function get_xy(instance::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec2}}()
        ret = ccall(("graphene_vec4_get_xy", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec2}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec2, _res, false)
        _res
    end
    function get_xyz(instance::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec3}}()
        ret = ccall(("graphene_vec4_get_xyz", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec3}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec3, _res, false)
        _res
    end
    function get_y(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_get_y", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4},), instance)
        ret
    end
    function get_z(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_get_z", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4},), instance)
        ret
    end
    function init(instance::GrapheneVec4, _x, _y, _z, _w)
        ret = ccall(("graphene_vec4_init", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, (Ptr{GrapheneVec4}, Float32, Float32, Float32, Float32), instance, _x, _y, _z, _w)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function init_from_float(instance::GrapheneVec4, _src)
        _src = convert(Vector{Float32}, _src)
        ret = ccall(("graphene_vec4_init_from_float", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, (Ptr{GrapheneVec4}, Ptr{Float32}), instance, _src)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function init_from_vec2(instance::GrapheneVec4, _src::GrapheneVec2, _z, _w)
        ret = ccall(("graphene_vec4_init_from_vec2", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, (Ptr{GrapheneVec4}, Ptr{GrapheneVec2}, Float32, Float32), instance, _src, _z, _w)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function init_from_vec3(instance::GrapheneVec4, _src::GrapheneVec3, _w)
        ret = ccall(("graphene_vec4_init_from_vec3", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, (Ptr{GrapheneVec4}, Ptr{GrapheneVec3}, Float32), instance, _src, _w)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function init_from_vec4(instance::GrapheneVec4, _src::GrapheneVec4)
        ret = ccall(("graphene_vec4_init_from_vec4", "libgraphene-1.0.so.0"), Ptr{GrapheneVec4}, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}), instance, _src)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function interpolate(instance::GrapheneVec4, _v2::GrapheneVec4, _factor)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_interpolate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Float64, Ptr{Ptr{GrapheneVec4}}), instance, _v2, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function length(instance::GrapheneVec4)
        ret = ccall(("graphene_vec4_length", "libgraphene-1.0.so.0"), Float32, (Ptr{GrapheneVec4},), instance)
        ret
    end
    function max(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_max", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function min(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_min", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function multiply(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_multiply", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function near(instance::GrapheneVec4, _v2::GrapheneVec4, _epsilon)
        ret = ccall(("graphene_vec4_near", "libgraphene-1.0.so.0"), Cint, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Float32), instance, _v2, _epsilon)
        ret2 = convert(Bool, ret)
        ret2
    end
    function negate(instance::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_negate", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function normalize(instance::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_normalize", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function scale(instance::GrapheneVec4, _factor)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_scale", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Float32, Ptr{Ptr{GrapheneVec4}}), instance, _factor, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function subtract(instance::GrapheneVec4, _b::GrapheneVec4)
        m_res = Ref{Ptr{GrapheneVec4}}()
        ret = ccall(("graphene_vec4_subtract", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{GrapheneVec4}, Ptr{Ptr{GrapheneVec4}}), instance, _b, m_res)
        _res = m_res[]
        _res = convert(GrapheneVec4, _res, false)
        _res
    end
    function to_float(instance::GrapheneVec4)
        m_dest = Ref{Ptr{Float32}}()
        ret = ccall(("graphene_vec4_to_float", "libgraphene-1.0.so.0"), Nothing, (Ptr{GrapheneVec4}, Ptr{Ptr{Float32}}), instance, m_dest)
        _dest = m_dest[]
        _dest
    end
end))
end
