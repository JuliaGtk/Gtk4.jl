quote
$(Expr(:toplevel, quote
    begin
        ANALYSIS_FLAG_CENTERED_BASELINE = 1
        ANALYSIS_FLAG_IS_ELLIPSIS = 2
        ANALYSIS_FLAG_NEED_HYPHEN = 4
        ATTR_INDEX_FROM_TEXT_BEGINNING = 0x00000000
        ATTR_INDEX_TO_TEXT_END = 0xffffffff
        GLYPH_EMPTY = 0x0fffffff
        GLYPH_INVALID_INPUT = 0xffffffff
        GLYPH_UNKNOWN_FLAG = 0x10000000
        SCALE = 1024
        VERSION_MAJOR = 1
        VERSION_MICRO = 4
        VERSION_MINOR = 50
        VERSION_STRING = "1.50.4"
        begin
            @cenum Alignment::Int32 Alignment_LEFT = 0 Alignment_CENTER = 1 Alignment_RIGHT = 2
            (GLib.g_type(::Type{T}) where T <: Alignment) = begin
                    ccall(("pango_alignment_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum AttrType::Int32 AttrType_INVALID = 0 AttrType_LANGUAGE = 1 AttrType_FAMILY = 2 AttrType_STYLE = 3 AttrType_WEIGHT = 4 AttrType_VARIANT = 5 AttrType_STRETCH = 6 AttrType_SIZE = 7 AttrType_FONT_DESC = 8 AttrType_FOREGROUND = 9 AttrType_BACKGROUND = 10 AttrType_UNDERLINE = 11 AttrType_STRIKETHROUGH = 12 AttrType_RISE = 13 AttrType_SHAPE = 14 AttrType_SCALE = 15 AttrType_FALLBACK = 16 AttrType_LETTER_SPACING = 17 AttrType_UNDERLINE_COLOR = 18 AttrType_STRIKETHROUGH_COLOR = 19 AttrType_ABSOLUTE_SIZE = 20 AttrType_GRAVITY = 21 AttrType_GRAVITY_HINT = 22 AttrType_FONT_FEATURES = 23 AttrType_FOREGROUND_ALPHA = 24 AttrType_BACKGROUND_ALPHA = 25 AttrType_ALLOW_BREAKS = 26 AttrType_SHOW = 27 AttrType_INSERT_HYPHENS = 28 AttrType_OVERLINE = 29 AttrType_OVERLINE_COLOR = 30 AttrType_LINE_HEIGHT = 31 AttrType_ABSOLUTE_LINE_HEIGHT = 32 AttrType_TEXT_TRANSFORM = 33 AttrType_WORD = 34 AttrType_SENTENCE = 35 AttrType_BASELINE_SHIFT = 36 AttrType_FONT_SCALE = 37
            (GLib.g_type(::Type{T}) where T <: AttrType) = begin
                    ccall(("pango_attr_type_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum BaselineShift::Int32 BaselineShift_NONE = 0 BaselineShift_SUPERSCRIPT = 1 BaselineShift_SUBSCRIPT = 2
            (GLib.g_type(::Type{T}) where T <: BaselineShift) = begin
                    ccall(("pango_baseline_shift_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum CoverageLevel::Int32 CoverageLevel_NONE = 0 CoverageLevel_FALLBACK = 1 CoverageLevel_APPROXIMATE = 2 CoverageLevel_EXACT = 3
            (GLib.g_type(::Type{T}) where T <: CoverageLevel) = begin
                    ccall(("pango_coverage_level_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Direction::Int32 Direction_LTR = 0 Direction_RTL = 1 Direction_TTB_LTR = 2 Direction_TTB_RTL = 3 Direction_WEAK_LTR = 4 Direction_WEAK_RTL = 5 Direction_NEUTRAL = 6
            (GLib.g_type(::Type{T}) where T <: Direction) = begin
                    ccall(("pango_direction_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum EllipsizeMode::Int32 EllipsizeMode_NONE = 0 EllipsizeMode_START = 1 EllipsizeMode_MIDDLE = 2 EllipsizeMode_END = 3
            (GLib.g_type(::Type{T}) where T <: EllipsizeMode) = begin
                    ccall(("pango_ellipsize_mode_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum FontScale::Int32 FontScale_NONE = 0 FontScale_SUPERSCRIPT = 1 FontScale_SUBSCRIPT = 2 FontScale_SMALL_CAPS = 3
            (GLib.g_type(::Type{T}) where T <: FontScale) = begin
                    ccall(("pango_font_scale_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Gravity::Int32 Gravity_SOUTH = 0 Gravity_EAST = 1 Gravity_NORTH = 2 Gravity_WEST = 3 Gravity_AUTO = 4
            (GLib.g_type(::Type{T}) where T <: Gravity) = begin
                    ccall(("pango_gravity_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum GravityHint::Int32 GravityHint_NATURAL = 0 GravityHint_STRONG = 1 GravityHint_LINE = 2
            (GLib.g_type(::Type{T}) where T <: GravityHint) = begin
                    ccall(("pango_gravity_hint_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum LayoutDeserializeError::Int32 LayoutDeserializeError_INVALID = 0 LayoutDeserializeError_INVALID_VALUE = 1 LayoutDeserializeError_MISSING_VALUE = 2
            (GLib.g_type(::Type{T}) where T <: LayoutDeserializeError) = begin
                    ccall(("pango_layout_deserialize_error_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Overline::Int32 Overline_NONE = 0 Overline_SINGLE = 1
            (GLib.g_type(::Type{T}) where T <: Overline) = begin
                    ccall(("pango_overline_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum RenderPart::Int32 RenderPart_FOREGROUND = 0 RenderPart_BACKGROUND = 1 RenderPart_UNDERLINE = 2 RenderPart_STRIKETHROUGH = 3 RenderPart_OVERLINE = 4
            (GLib.g_type(::Type{T}) where T <: RenderPart) = begin
                    ccall(("pango_render_part_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Script::UInt16 Script_INVALID_CODE = 0xffff Script_COMMON = 0x0000 Script_INHERITED = 0x0001 Script_ARABIC = 0x0002 Script_ARMENIAN = 0x0003 Script_BENGALI = 0x0004 Script_BOPOMOFO = 0x0005 Script_CHEROKEE = 0x0006 Script_COPTIC = 0x0007 Script_CYRILLIC = 0x0008 Script_DESERET = 0x0009 Script_DEVANAGARI = 0x000a Script_ETHIOPIC = 0x000b Script_GEORGIAN = 0x000c Script_GOTHIC = 0x000d Script_GREEK = 0x000e Script_GUJARATI = 0x000f Script_GURMUKHI = 0x0010 Script_HAN = 0x0011 Script_HANGUL = 0x0012 Script_HEBREW = 0x0013 Script_HIRAGANA = 0x0014 Script_KANNADA = 0x0015 Script_KATAKANA = 0x0016 Script_KHMER = 0x0017 Script_LAO = 0x0018 Script_LATIN = 0x0019 Script_MALAYALAM = 0x001a Script_MONGOLIAN = 0x001b Script_MYANMAR = 0x001c Script_OGHAM = 0x001d Script_OLD_ITALIC = 0x001e Script_ORIYA = 0x001f Script_RUNIC = 0x0020 Script_SINHALA = 0x0021 Script_SYRIAC = 0x0022 Script_TAMIL = 0x0023 Script_TELUGU = 0x0024 Script_THAANA = 0x0025 Script_THAI = 0x0026 Script_TIBETAN = 0x0027 Script_CANADIAN_ABORIGINAL = 0x0028 Script_YI = 0x0029 Script_TAGALOG = 0x002a Script_HANUNOO = 0x002b Script_BUHID = 0x002c Script_TAGBANWA = 0x002d Script_BRAILLE = 0x002e Script_CYPRIOT = 0x002f Script_LIMBU = 0x0030 Script_OSMANYA = 0x0031 Script_SHAVIAN = 0x0032 Script_LINEAR_B = 0x0033 Script_TAI_LE = 0x0034 Script_UGARITIC = 0x0035 Script_NEW_TAI_LUE = 0x0036 Script_BUGINESE = 0x0037 Script_GLAGOLITIC = 0x0038 Script_TIFINAGH = 0x0039 Script_SYLOTI_NAGRI = 0x003a Script_OLD_PERSIAN = 0x003b Script_KHAROSHTHI = 0x003c Script_UNKNOWN = 0x003d Script_BALINESE = 0x003e Script_CUNEIFORM = 0x003f Script_PHOENICIAN = 0x0040 Script_PHAGS_PA = 0x0041 Script_NKO = 0x0042 Script_KAYAH_LI = 0x0043 Script_LEPCHA = 0x0044 Script_REJANG = 0x0045 Script_SUNDANESE = 0x0046 Script_SAURASHTRA = 0x0047 Script_CHAM = 0x0048 Script_OL_CHIKI = 0x0049 Script_VAI = 0x004a Script_CARIAN = 0x004b Script_LYCIAN = 0x004c Script_LYDIAN = 0x004d Script_BATAK = 0x004e Script_BRAHMI = 0x004f Script_MANDAIC = 0x0050 Script_CHAKMA = 0x0051 Script_MEROITIC_CURSIVE = 0x0052 Script_MEROITIC_HIEROGLYPHS = 0x0053 Script_MIAO = 0x0054 Script_SHARADA = 0x0055 Script_SORA_SOMPENG = 0x0056 Script_TAKRI = 0x0057 Script_BASSA_VAH = 0x0058 Script_CAUCASIAN_ALBANIAN = 0x0059 Script_DUPLOYAN = 0x005a Script_ELBASAN = 0x005b Script_GRANTHA = 0x005c Script_KHOJKI = 0x005d Script_KHUDAWADI = 0x005e Script_LINEAR_A = 0x005f Script_MAHAJANI = 0x0060 Script_MANICHAEAN = 0x0061 Script_MENDE_KIKAKUI = 0x0062 Script_MODI = 0x0063 Script_MRO = 0x0064 Script_NABATAEAN = 0x0065 Script_OLD_NORTH_ARABIAN = 0x0066 Script_OLD_PERMIC = 0x0067 Script_PAHAWH_HMONG = 0x0068 Script_PALMYRENE = 0x0069 Script_PAU_CIN_HAU = 0x006a Script_PSALTER_PAHLAVI = 0x006b Script_SIDDHAM = 0x006c Script_TIRHUTA = 0x006d Script_WARANG_CITI = 0x006e Script_AHOM = 0x006f Script_ANATOLIAN_HIEROGLYPHS = 0x0070 Script_HATRAN = 0x0071 Script_MULTANI = 0x0072 Script_OLD_HUNGARIAN = 0x0073 Script_SIGNWRITING = 0x0074
            (GLib.g_type(::Type{T}) where T <: Script) = begin
                    ccall(("pango_script_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Stretch::Int32 Stretch_ULTRA_CONDENSED = 0 Stretch_EXTRA_CONDENSED = 1 Stretch_CONDENSED = 2 Stretch_SEMI_CONDENSED = 3 Stretch_NORMAL = 4 Stretch_SEMI_EXPANDED = 5 Stretch_EXPANDED = 6 Stretch_EXTRA_EXPANDED = 7 Stretch_ULTRA_EXPANDED = 8
            (GLib.g_type(::Type{T}) where T <: Stretch) = begin
                    ccall(("pango_stretch_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Style::Int32 Style_NORMAL = 0 Style_OBLIQUE = 1 Style_ITALIC = 2
            (GLib.g_type(::Type{T}) where T <: Style) = begin
                    ccall(("pango_style_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum TabAlign::Int32 TabAlign_LEFT = 0 TabAlign_RIGHT = 1 TabAlign_CENTER = 2 TabAlign_DECIMAL = 3
            (GLib.g_type(::Type{T}) where T <: TabAlign) = begin
                    ccall(("pango_tab_align_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum TextTransform::Int32 TextTransform_NONE = 0 TextTransform_LOWERCASE = 1 TextTransform_UPPERCASE = 2 TextTransform_CAPITALIZE = 3
            (GLib.g_type(::Type{T}) where T <: TextTransform) = begin
                    ccall(("pango_text_transform_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Underline::Int32 Underline_NONE = 0 Underline_SINGLE = 1 Underline_DOUBLE = 2 Underline_LOW = 3 Underline_ERROR = 4 Underline_SINGLE_LINE = 5 Underline_DOUBLE_LINE = 6 Underline_ERROR_LINE = 7
            (GLib.g_type(::Type{T}) where T <: Underline) = begin
                    ccall(("pango_underline_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Variant::Int32 Variant_NORMAL = 0 Variant_SMALL_CAPS = 1 Variant_ALL_SMALL_CAPS = 2 Variant_PETITE_CAPS = 3 Variant_ALL_PETITE_CAPS = 4 Variant_UNICASE = 5 Variant_TITLE_CAPS = 6
            (GLib.g_type(::Type{T}) where T <: Variant) = begin
                    ccall(("pango_variant_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum Weight::Int32 Weight_THIN = 100 Weight_ULTRALIGHT = 200 Weight_LIGHT = 300 Weight_SEMILIGHT = 350 Weight_BOOK = 380 Weight_NORMAL = 400 Weight_MEDIUM = 500 Weight_SEMIBOLD = 600 Weight_BOLD = 700 Weight_ULTRABOLD = 800 Weight_HEAVY = 900 Weight_ULTRAHEAVY = 1000
            (GLib.g_type(::Type{T}) where T <: Weight) = begin
                    ccall(("pango_weight_get_type", libpango), GType, ())
                end
        end
        begin
            @cenum WrapMode::Int32 WrapMode_WORD = 0 WrapMode_CHAR = 1 WrapMode_WORD_CHAR = 2
            (GLib.g_type(::Type{T}) where T <: WrapMode) = begin
                    ccall(("pango_wrap_mode_get_type", libpango), GType, ())
                end
        end
        begin
            @bitflag FontMask::UInt32 FontMask_FAMILY = 1 FontMask_STYLE = 2 FontMask_VARIANT = 4 FontMask_WEIGHT = 8 FontMask_STRETCH = 16 FontMask_SIZE = 32 FontMask_GRAVITY = 64 FontMask_VARIATIONS = 128 FontMask_NONE = 0
            (GLib.g_type(::Type{T}) where T <: FontMask) = begin
                    ccall(("pango_font_mask_get_type", libpango), GType, ())
                end
        end
        begin
            @bitflag LayoutDeserializeFlags::UInt32 LayoutDeserializeFlags_DEFAULT = 0 LayoutDeserializeFlags_CONTEXT = 1
            (GLib.g_type(::Type{T}) where T <: LayoutDeserializeFlags) = begin
                    ccall(("pango_layout_deserialize_flags_get_type", libpango), GType, ())
                end
        end
        begin
            @bitflag LayoutSerializeFlags::UInt32 LayoutSerializeFlags_DEFAULT = 0 LayoutSerializeFlags_CONTEXT = 1 LayoutSerializeFlags_OUTPUT = 2
            (GLib.g_type(::Type{T}) where T <: LayoutSerializeFlags) = begin
                    ccall(("pango_layout_serialize_flags_get_type", libpango), GType, ())
                end
        end
        begin
            @bitflag ShapeFlags::UInt32 ShapeFlags_NONE = 0 ShapeFlags_ROUND_POSITIONS = 1
            (GLib.g_type(::Type{T}) where T <: ShapeFlags) = begin
                    ccall(("pango_shape_flags_get_type", libpango), GType, ())
                end
        end
        begin
            @bitflag ShowFlags::UInt32 ShowFlags_NONE = 0 ShowFlags_SPACES = 1 ShowFlags_LINE_BREAKS = 2 ShowFlags_IGNORABLES = 4
            (GLib.g_type(::Type{T}) where T <: ShowFlags) = begin
                    ccall(("pango_show_flags_get_type", libpango), GType, ())
                end
        end
    end
end))
end
