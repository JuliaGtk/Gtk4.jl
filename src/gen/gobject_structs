quote
$(Expr(:toplevel, quote
    begin
        struct _GEnumValue
            value::Int32
            value_name::Cstring
            value_nick::Cstring
        end
        begin
            mutable struct GEnumValue
                handle::Ptr{_GEnumValue}
            end
        end
    end
    begin
        struct _GTypeClass
            g_type::UInt64
        end
        begin
            mutable struct GTypeClass
                handle::Ptr{_GTypeClass}
            end
        end
    end
    begin
        struct _GFlagsValue
            value::UInt32
            value_name::Cstring
            value_nick::Cstring
        end
        begin
            mutable struct GFlagsValue
                handle::Ptr{_GFlagsValue}
            end
        end
    end
    begin
        struct _GEnumClass
            g_type_class::_GTypeClass
            minimum::Int32
            maximum::Int32
            n_values::UInt32
            values::Ptr{_GEnumValue}
        end
        begin
            mutable struct GEnumClass
                handle::Ptr{_GEnumClass}
            end
        end
    end
    begin
        struct _GFlagsClass
            g_type_class::_GTypeClass
            mask::UInt32
            n_values::UInt32
            values::Ptr{_GFlagsValue}
        end
        begin
            mutable struct GFlagsClass
                handle::Ptr{_GFlagsClass}
            end
        end
    end
    begin
        struct _GSignalInvocationHint
            signal_id::UInt32
            detail::UInt32
            run_type::Int32
        end
        begin
            mutable struct GSignalInvocationHint
                handle::Ptr{_GSignalInvocationHint}
            end
        end
    end
    begin
        struct _GSignalQuery
            signal_id::UInt32
            signal_name::Cstring
            itype::UInt64
            signal_flags::Int32
            return_type::UInt64
            n_params::UInt32
            param_types::Ptr{UInt64}
        end
        begin
            mutable struct GSignalQuery
                handle::Ptr{_GSignalQuery}
            end
        end
    end
    begin
        struct _GTypeFundamentalInfo
            type_flags::Int32
        end
        begin
            mutable struct GTypeFundamentalInfo
                handle::Ptr{_GTypeFundamentalInfo}
            end
        end
    end
    begin
        struct _GTypePluginClass
            base_iface::_GTypeInterface
            use_plugin::Ptr{Nothing}
            unuse_plugin::Ptr{Nothing}
            complete_type_info::Ptr{Nothing}
            complete_interface_info::Ptr{Nothing}
        end
        begin
            mutable struct GTypePluginClass
                handle::Ptr{_GTypePluginClass}
            end
        end
    end
    begin
        struct _GTypeQuery
            type::UInt64
            type_name::Cstring
            class_size::UInt32
            instance_size::UInt32
        end
        begin
            mutable struct GTypeQuery
                handle::Ptr{_GTypeQuery}
            end
        end
    end
    begin
        struct _GValueArray
            n_values::UInt32
            values::Ptr{_GValue}
            n_prealloced::UInt32
        end
        begin
            mutable struct GValueArray <: GBoxed
                handle::Ptr{_GValueArray}
                begin
                    (GLib.g_type(::Type{T}) where T <: GValueArray) = begin
                            ccall(("g_value_array_get_type", libgobject), GType, ())
                        end
                    function GValueArray(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GValueArray)
                end
            end
        end
    end
    begin
        gtype_wrapper_cache = Dict{Symbol, Type}()
    end
    begin
        abstract type GBinding <: GObject end
    end
    begin
        mutable struct GBindingLeaf <: GBinding
            handle::Ptr{GObject}
            function GBindingLeaf(handle::Ptr{GObject}, owns = false)
                if handle == C_NULL
                    error("Cannot construct GBindingLeaf with a NULL pointer")
                end
                is_floating = ccall(("g_object_is_floating", libgobject), Cint, (Ptr{GObject},), handle) != 0
                if !owns || is_floating
                    GLib.gc_ref_sink(handle)
                end
                return gobject_ref(new(handle))
            end
        end
        local kwargs
        function GBindingLeaf(args...; kwargs...)
            if isempty(kwargs)
                error(MethodError(GBindingLeaf, args))
            end
            w = GBindingLeaf(args...)
            for (kw, val) = kwargs
                set_gtk_property!(w, kw, val)
            end
            w
        end
        gtype_wrapper_cache[:GBinding] = GBindingLeaf
        function GBinding(args...; kwargs...)
            GBindingLeaf(args...; kwargs...)
        end
    end
    begin
        abstract type GInitiallyUnowned <: GObject end
    end
    begin
        mutable struct GInitiallyUnownedLeaf <: GInitiallyUnowned
            handle::Ptr{GObject}
            function GInitiallyUnownedLeaf(handle::Ptr{GObject}, owns = false)
                if handle == C_NULL
                    error("Cannot construct GInitiallyUnownedLeaf with a NULL pointer")
                end
                is_floating = ccall(("g_object_is_floating", libgobject), Cint, (Ptr{GObject},), handle) != 0
                if !owns || is_floating
                    GLib.gc_ref_sink(handle)
                end
                return gobject_ref(new(handle))
            end
        end
        local kwargs
        function GInitiallyUnownedLeaf(args...; kwargs...)
            if isempty(kwargs)
                error(MethodError(GInitiallyUnownedLeaf, args))
            end
            w = GInitiallyUnownedLeaf(args...)
            for (kw, val) = kwargs
                set_gtk_property!(w, kw, val)
            end
            w
        end
        gtype_wrapper_cache[:GInitiallyUnowned] = GInitiallyUnownedLeaf
        function GInitiallyUnowned(args...; kwargs...)
            GInitiallyUnownedLeaf(args...; kwargs...)
        end
    end
    begin
        abstract type GTypeModule <: GObject end
    end
    begin
        mutable struct GTypeModuleLeaf <: GTypeModule
            handle::Ptr{GObject}
            function GTypeModuleLeaf(handle::Ptr{GObject}, owns = false)
                if handle == C_NULL
                    error("Cannot construct GTypeModuleLeaf with a NULL pointer")
                end
                is_floating = ccall(("g_object_is_floating", libgobject), Cint, (Ptr{GObject},), handle) != 0
                if !owns || is_floating
                    GLib.gc_ref_sink(handle)
                end
                return gobject_ref(new(handle))
            end
        end
        local kwargs
        function GTypeModuleLeaf(args...; kwargs...)
            if isempty(kwargs)
                error(MethodError(GTypeModuleLeaf, args))
            end
            w = GTypeModuleLeaf(args...)
            for (kw, val) = kwargs
                set_gtk_property!(w, kw, val)
            end
            w
        end
        gtype_wrapper_cache[:GTypeModule] = GTypeModuleLeaf
        function GTypeModule(args...; kwargs...)
            GTypeModuleLeaf(args...; kwargs...)
        end
    end
    begin
        gtype_wrapper_cache_init() = begin
                merge!(GLib.gtype_wrappers, gtype_wrapper_cache)
            end
    end
    gtype_wrapper_cache[:GObject] = GObjectLeaf
    begin
        struct GTypePlugin <: GInterface
            handle::Ptr{GObject}
            gc::Any
            GTypePlugin(x::GObject) = begin
                    new(unsafe_convert(Ptr{GObject}, x), x)
                end
        end
    end
    export GEnumValue, _GEnumValue, GTypeClass, _GTypeClass, GFlagsValue, _GFlagsValue, GEnumClass, _GEnumClass, GFlagsClass, _GFlagsClass, GSignalInvocationHint, _GSignalInvocationHint, GSignalQuery, _GSignalQuery, GTypeFundamentalInfo, _GTypeFundamentalInfo, GTypePluginClass, _GTypePluginClass, GTypeQuery, _GTypeQuery, GValueArray, _GValueArray, GBinding, GInitiallyUnowned, GTypeModule, GTypePlugin
end))
end
