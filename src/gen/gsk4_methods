quote
$(Expr(:toplevel, quote
    function contains_point(instance::RoundedRect, _point::GraphenePoint)
        ret = ccall(("gsk_rounded_rect_contains_point", "libgtk-4.so.1"), Cint, (Ptr{RoundedRect}, Ptr{GraphenePoint}), instance, _point)
        ret2 = convert(Bool, ret)
        ret2
    end
    function contains_rect(instance::RoundedRect, _rect::GrapheneRect)
        ret = ccall(("gsk_rounded_rect_contains_rect", "libgtk-4.so.1"), Cint, (Ptr{RoundedRect}, Ptr{GrapheneRect}), instance, _rect)
        ret2 = convert(Bool, ret)
        ret2
    end
    function init(instance::RoundedRect, _bounds::GrapheneRect, _top_left::GrapheneSize, _top_right::GrapheneSize, _bottom_right::GrapheneSize, _bottom_left::GrapheneSize)
        ret = ccall(("gsk_rounded_rect_init", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect}, Ptr{GrapheneRect}, Ptr{GrapheneSize}, Ptr{GrapheneSize}, Ptr{GrapheneSize}, Ptr{GrapheneSize}), instance, _bounds, _top_left, _top_right, _bottom_right, _bottom_left)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function init_copy(instance::RoundedRect, _src::GskRoundedRect)
        ret = ccall(("gsk_rounded_rect_init_copy", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect}, Ptr{GskRoundedRect}), instance, _src)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function init_from_rect(instance::RoundedRect, _bounds::GrapheneRect, _radius)
        ret = ccall(("gsk_rounded_rect_init_from_rect", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect}, Ptr{GrapheneRect}, Float32), instance, _bounds, _radius)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function intersects_rect(instance::RoundedRect, _rect::GrapheneRect)
        ret = ccall(("gsk_rounded_rect_intersects_rect", "libgtk-4.so.1"), Cint, (Ptr{RoundedRect}, Ptr{GrapheneRect}), instance, _rect)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_rectilinear(instance::RoundedRect)
        ret = ccall(("gsk_rounded_rect_is_rectilinear", "libgtk-4.so.1"), Cint, (Ptr{RoundedRect},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function normalize(instance::RoundedRect)
        ret = ccall(("gsk_rounded_rect_normalize", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect},), instance)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function offset(instance::RoundedRect, _dx, _dy)
        ret = ccall(("gsk_rounded_rect_offset", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect}, Float32, Float32), instance, _dx, _dy)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function shrink(instance::RoundedRect, _top, _right, _bottom, _left)
        ret = ccall(("gsk_rounded_rect_shrink", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{RoundedRect}, Float32, Float32, Float32, Float32), instance, _top, _right, _bottom, _left)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function ShaderArgsBuilder(_shader::GskGLShader, _initial_values::Maybe(GBytes))
        _initial_values = if _initial_values == nothing
                C_NULL
            else
                _initial_values
            end
        ret = ccall(("gsk_shader_args_builder_new", "libgtk-4.so.1"), Ptr{GskShaderArgsBuilder}, (Ptr{GObject}, Ptr{GBytes}), _shader, _initial_values)
        ret2 = convert(GskShaderArgsBuilder, ret, true)
        ret2
    end
    function ref(instance::GskShaderArgsBuilder)
        ret = ccall(("gsk_shader_args_builder_ref", "libgtk-4.so.1"), Ptr{GskShaderArgsBuilder}, (Ptr{GskShaderArgsBuilder},), instance)
        ret2 = convert(GskShaderArgsBuilder, ret, true)
        ret2
    end
    function set_bool(instance::GskShaderArgsBuilder, _idx, _value)
        ret = ccall(("gsk_shader_args_builder_set_bool", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Cint), instance, _idx, _value)
        nothing
    end
    function set_float(instance::GskShaderArgsBuilder, _idx, _value)
        ret = ccall(("gsk_shader_args_builder_set_float", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Float32), instance, _idx, _value)
        nothing
    end
    function set_int(instance::GskShaderArgsBuilder, _idx, _value)
        ret = ccall(("gsk_shader_args_builder_set_int", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Int32), instance, _idx, _value)
        nothing
    end
    function set_uint(instance::GskShaderArgsBuilder, _idx, _value)
        ret = ccall(("gsk_shader_args_builder_set_uint", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, UInt32), instance, _idx, _value)
        nothing
    end
    function set_vec2(instance::GskShaderArgsBuilder, _idx, _value::GrapheneVec2)
        ret = ccall(("gsk_shader_args_builder_set_vec2", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Ptr{GrapheneVec2}), instance, _idx, _value)
        nothing
    end
    function set_vec3(instance::GskShaderArgsBuilder, _idx, _value::GrapheneVec3)
        ret = ccall(("gsk_shader_args_builder_set_vec3", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Ptr{GrapheneVec3}), instance, _idx, _value)
        nothing
    end
    function set_vec4(instance::GskShaderArgsBuilder, _idx, _value::GrapheneVec4)
        ret = ccall(("gsk_shader_args_builder_set_vec4", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder}, Int32, Ptr{GrapheneVec4}), instance, _idx, _value)
        nothing
    end
    function to_args(instance::GskShaderArgsBuilder)
        ret = ccall(("gsk_shader_args_builder_to_args", "libgtk-4.so.1"), Ptr{GBytes}, (Ptr{GskShaderArgsBuilder},), instance)
        ret2 = convert(GBytes, ret, true)
        ret2
    end
    function unref(instance::GskShaderArgsBuilder)
        ret = ccall(("gsk_shader_args_builder_unref", "libgtk-4.so.1"), Nothing, (Ptr{GskShaderArgsBuilder},), instance)
        nothing
    end
    function Transform()
        ret = ccall(("gsk_transform_new", "libgtk-4.so.1"), Ptr{GskTransform}, ())
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function equal(instance::GskTransform, _second::Maybe(GskTransform))
        _second = if _second == nothing
                C_NULL
            else
                _second
            end
        ret = ccall(("gsk_transform_equal", "libgtk-4.so.1"), Cint, (Ptr{GskTransform}, Ptr{GskTransform}), instance, _second)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_category(instance::GskTransform)
        ret = ccall(("gsk_transform_get_category", "libgtk-4.so.1"), Int32, (Ptr{GskTransform},), instance)
        ret
    end
    function invert(instance::GskTransform)
        ret = ccall(("gsk_transform_invert", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskTransform, ret, true)
            end
        ret2
    end
    function matrix(instance::GskTransform, _matrix::GrapheneMatrix)
        ret = ccall(("gsk_transform_matrix", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Ptr{GrapheneMatrix}), instance, _matrix)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function perspective(instance::GskTransform, _depth)
        ret = ccall(("gsk_transform_perspective", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Float32), instance, _depth)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function print(instance::GskTransform, _string::GString)
        ret = ccall(("gsk_transform_print", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{GString}), instance, _string)
        nothing
    end
    function ref(instance::GskTransform)
        ret = ccall(("gsk_transform_ref", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform},), instance)
        ret2 = convert(GskTransform, ret, false)
        ret2
    end
    function rotate(instance::GskTransform, _angle)
        ret = ccall(("gsk_transform_rotate", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Float32), instance, _angle)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function rotate_3d(instance::GskTransform, _angle, _axis::GrapheneVec3)
        ret = ccall(("gsk_transform_rotate_3d", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Float32, Ptr{GrapheneVec3}), instance, _angle, _axis)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function scale(instance::GskTransform, _factor_x, _factor_y)
        ret = ccall(("gsk_transform_scale", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Float32, Float32), instance, _factor_x, _factor_y)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function scale_3d(instance::GskTransform, _factor_x, _factor_y, _factor_z)
        ret = ccall(("gsk_transform_scale_3d", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Float32, Float32, Float32), instance, _factor_x, _factor_y, _factor_z)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function to_2d(instance::GskTransform)
        m_out_xx = mutable(Float32)
        m_out_yx = mutable(Float32)
        m_out_xy = mutable(Float32)
        m_out_yy = mutable(Float32)
        m_out_dx = mutable(Float32)
        m_out_dy = mutable(Float32)
        ret = ccall(("gsk_transform_to_2d", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), instance, m_out_xx, m_out_yx, m_out_xy, m_out_yy, m_out_dx, m_out_dy)
        _out_xx = m_out_xx[]
        _out_yx = m_out_yx[]
        _out_xy = m_out_xy[]
        _out_yy = m_out_yy[]
        _out_dx = m_out_dx[]
        _out_dy = m_out_dy[]
        (_out_xx, _out_yx, _out_xy, _out_yy, _out_dx, _out_dy)
    end
    function to_affine(instance::GskTransform)
        m_out_scale_x = mutable(Float32)
        m_out_scale_y = mutable(Float32)
        m_out_dx = mutable(Float32)
        m_out_dy = mutable(Float32)
        ret = ccall(("gsk_transform_to_affine", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}, Ptr{Float32}), instance, m_out_scale_x, m_out_scale_y, m_out_dx, m_out_dy)
        _out_scale_x = m_out_scale_x[]
        _out_scale_y = m_out_scale_y[]
        _out_dx = m_out_dx[]
        _out_dy = m_out_dy[]
        (_out_scale_x, _out_scale_y, _out_dx, _out_dy)
    end
    function to_matrix(instance::GskTransform)
        m_out_matrix = mutable(Ptr{GrapheneMatrix})
        ret = ccall(("gsk_transform_to_matrix", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{Ptr{GrapheneMatrix}}), instance, m_out_matrix)
        _out_matrix = m_out_matrix[]
        _out_matrix = convert(GrapheneMatrix, _out_matrix, false)
        _out_matrix
    end
    function to_string(instance::GskTransform)
        ret = ccall(("gsk_transform_to_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GskTransform},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function to_translate(instance::GskTransform)
        m_out_dx = mutable(Float32)
        m_out_dy = mutable(Float32)
        ret = ccall(("gsk_transform_to_translate", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{Float32}, Ptr{Float32}), instance, m_out_dx, m_out_dy)
        _out_dx = m_out_dx[]
        _out_dy = m_out_dy[]
        (_out_dx, _out_dy)
    end
    function transform(instance::GskTransform, _other::Maybe(GskTransform))
        _other = if _other == nothing
                C_NULL
            else
                _other
            end
        ret = ccall(("gsk_transform_transform", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Ptr{GskTransform}), instance, _other)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function transform_bounds(instance::GskTransform, _rect::GrapheneRect)
        m_out_rect = mutable(Ptr{GrapheneRect})
        ret = ccall(("gsk_transform_transform_bounds", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{GrapheneRect}, Ptr{Ptr{GrapheneRect}}), instance, _rect, m_out_rect)
        _out_rect = m_out_rect[]
        _out_rect = convert(GrapheneRect, _out_rect, false)
        _out_rect
    end
    function transform_point(instance::GskTransform, _point::GraphenePoint)
        m_out_point = mutable(Ptr{GraphenePoint})
        ret = ccall(("gsk_transform_transform_point", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform}, Ptr{GraphenePoint}, Ptr{Ptr{GraphenePoint}}), instance, _point, m_out_point)
        _out_point = m_out_point[]
        _out_point = convert(GraphenePoint, _out_point, false)
        _out_point
    end
    function translate(instance::GskTransform, _point::GraphenePoint)
        ret = ccall(("gsk_transform_translate", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Ptr{GraphenePoint}), instance, _point)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function translate_3d(instance::GskTransform, _point::GraphenePoint3D)
        ret = ccall(("gsk_transform_translate_3d", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GskTransform}, Ptr{GraphenePoint3D}), instance, _point)
        ret2 = convert(GskTransform, ret, true)
        ret2
    end
    function unref(instance::GskTransform)
        ret = ccall(("gsk_transform_unref", "libgtk-4.so.1"), Nothing, (Ptr{GskTransform},), instance)
        nothing
    end
    function BlendNode(_bottom::GskRenderNode, _top::GskRenderNode, _blend_mode)
        ret = ccall(("gsk_blend_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Int32), _bottom, _top, _blend_mode)
        ret2 = convert(GskBlendNode, ret, true)
        ret2
    end
    function get_blend_mode(instance::GskBlendNode)
        ret = ccall(("gsk_blend_node_get_blend_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_bottom_child(instance::GskBlendNode)
        ret = ccall(("gsk_blend_node_get_bottom_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_top_child(instance::GskBlendNode)
        ret = ccall(("gsk_blend_node_get_top_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function BlurNode(_child::GskRenderNode, _radius)
        ret = ccall(("gsk_blur_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Float32), _child, _radius)
        ret2 = convert(GskBlurNode, ret, true)
        ret2
    end
    function get_child(instance::GskBlurNode)
        ret = ccall(("gsk_blur_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_radius(instance::GskBlurNode)
        ret = ccall(("gsk_blur_node_get_radius", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function BorderNode(_outline::GskRoundedRect, _border_width, _border_color)
        _border_width = convert(Vector{Float32}, _border_width)
        _border_color = convert(Vector{Ptr{GdkRGBA}}, _border_color)
        ret = ccall(("gsk_border_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GskRoundedRect}, Ptr{Float32}, Ptr{Ptr{GdkRGBA}}), _outline, _border_width, _border_color)
        ret2 = convert(GskBorderNode, ret, true)
        ret2
    end
    function get_colors(instance::GskBorderNode)
        ret = ccall(("gsk_border_node_get_colors", "libgtk-4.so.1"), Ptr{GdkRGBA}, (Ptr{GObject},), instance)
        ret2 = convert(GdkRGBA, ret, false)
        ret2
    end
    function get_outline(instance::GskBorderNode)
        ret = ccall(("gsk_border_node_get_outline", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{GObject},), instance)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function get_widths(instance::GskBorderNode)
        ret = ccall(("gsk_border_node_get_widths", "libgtk-4.so.1"), Ptr{Float32}, (Ptr{GObject},), instance)
        ret
    end
    function BroadwayRenderer()
        ret = ccall(("gsk_broadway_renderer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GskRenderer, ret, true)
        ret2
    end
    function CairoNode(_bounds::GrapheneRect)
        ret = ccall(("gsk_cairo_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect},), _bounds)
        ret2 = convert(GskCairoNode, ret, true)
        ret2
    end
    function get_draw_context(instance::GskCairoNode)
        ret = ccall(("gsk_cairo_node_get_draw_context", "libgtk-4.so.1"), Ptr{cairoContext}, (Ptr{GObject},), instance)
        ret2 = convert(cairoContext, ret, true)
        ret2
    end
    function get_surface(instance::GskCairoNode)
        ret = ccall(("gsk_cairo_node_get_surface", "libgtk-4.so.1"), Ptr{cairoSurface}, (Ptr{GObject},), instance)
        ret2 = convert(cairoSurface, ret, false)
        ret2
    end
    function CairoRenderer()
        ret = ccall(("gsk_cairo_renderer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GskRenderer, ret, true)
        ret2
    end
    function ClipNode(_child::GskRenderNode, _clip::GrapheneRect)
        ret = ccall(("gsk_clip_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GrapheneRect}), _child, _clip)
        ret2 = convert(GskClipNode, ret, true)
        ret2
    end
    function get_child(instance::GskClipNode)
        ret = ccall(("gsk_clip_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_clip(instance::GskClipNode)
        ret = ccall(("gsk_clip_node_get_clip", "libgtk-4.so.1"), Ptr{GrapheneRect}, (Ptr{GObject},), instance)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function ColorMatrixNode(_child::GskRenderNode, _color_matrix::GrapheneMatrix, _color_offset::GrapheneVec4)
        ret = ccall(("gsk_color_matrix_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GrapheneMatrix}, Ptr{GrapheneVec4}), _child, _color_matrix, _color_offset)
        ret2 = convert(GskColorMatrixNode, ret, true)
        ret2
    end
    function get_child(instance::GskColorMatrixNode)
        ret = ccall(("gsk_color_matrix_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_color_matrix(instance::GskColorMatrixNode)
        ret = ccall(("gsk_color_matrix_node_get_color_matrix", "libgtk-4.so.1"), Ptr{GrapheneMatrix}, (Ptr{GObject},), instance)
        ret2 = convert(GrapheneMatrix, ret, false)
        ret2
    end
    function get_color_offset(instance::GskColorMatrixNode)
        ret = ccall(("gsk_color_matrix_node_get_color_offset", "libgtk-4.so.1"), Ptr{GrapheneVec4}, (Ptr{GObject},), instance)
        ret2 = convert(GrapheneVec4, ret, false)
        ret2
    end
    function ColorNode(_rgba::GdkRGBA, _bounds::GrapheneRect)
        ret = ccall(("gsk_color_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GdkRGBA}, Ptr{GrapheneRect}), _rgba, _bounds)
        ret2 = convert(GskColorNode, ret, true)
        ret2
    end
    function get_color(instance::GskColorNode)
        ret = ccall(("gsk_color_node_get_color", "libgtk-4.so.1"), Ptr{GdkRGBA}, (Ptr{GObject},), instance)
        ret2 = convert(GdkRGBA, ret, false)
        ret2
    end
    function ConicGradientNode(_bounds::GrapheneRect, _center::GraphenePoint, _rotation, _color_stops)
        _color_stops = convert(Vector{GskColorStop}, _color_stops)
        _n_color_stops = length(_color_stops)
        ret = ccall(("gsk_conic_gradient_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Ptr{GskColorStop}, UInt64), _bounds, _center, _rotation, _color_stops, _n_color_stops)
        ret2 = convert(GskConicGradientNode, ret, true)
        ret2
    end
    function get_angle(instance::GskConicGradientNode)
        ret = ccall(("gsk_conic_gradient_node_get_angle", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_center(instance::GskConicGradientNode)
        ret = ccall(("gsk_conic_gradient_node_get_center", "libgtk-4.so.1"), Ptr{GraphenePoint}, (Ptr{GObject},), instance)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function get_color_stops(instance::GskConicGradientNode)
        m_n_stops = mutable(UInt64)
        ret = ccall(("gsk_conic_gradient_node_get_color_stops", "libgtk-4.so.1"), Ptr{GskColorStop}, (Ptr{GObject}, Ptr{UInt64}), instance, m_n_stops)
        _n_stops = m_n_stops[]
        ret
    end
    function get_n_color_stops(instance::GskConicGradientNode)
        ret = ccall(("gsk_conic_gradient_node_get_n_color_stops", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_rotation(instance::GskConicGradientNode)
        ret = ccall(("gsk_conic_gradient_node_get_rotation", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function ContainerNode(_children)
        _children = convert(Vector{Ptr{GObject}}, _children)
        _n_children = length(_children)
        ret = ccall(("gsk_container_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Ptr{GObject}}, UInt32), _children, _n_children)
        ret2 = convert(GskContainerNode, ret, true)
        ret2
    end
    function get_child(instance::GskContainerNode, _idx)
        ret = ccall(("gsk_container_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _idx)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_n_children(instance::GskContainerNode)
        ret = ccall(("gsk_container_node_get_n_children", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function CrossFadeNode(_start::GskRenderNode, _end::GskRenderNode, _progress)
        ret = ccall(("gsk_cross_fade_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Float32), _start, _end, _progress)
        ret2 = convert(GskCrossFadeNode, ret, true)
        ret2
    end
    function get_end_child(instance::GskCrossFadeNode)
        ret = ccall(("gsk_cross_fade_node_get_end_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_progress(instance::GskCrossFadeNode)
        ret = ccall(("gsk_cross_fade_node_get_progress", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_start_child(instance::GskCrossFadeNode)
        ret = ccall(("gsk_cross_fade_node_get_start_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function DebugNode(_child::GskRenderNode, _message)
        ret = ccall(("gsk_debug_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), _child, _message)
        ret2 = convert(GskDebugNode, ret, true)
        ret2
    end
    function get_child(instance::GskDebugNode)
        ret = ccall(("gsk_debug_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_message(instance::GskDebugNode)
        ret = ccall(("gsk_debug_node_get_message", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function GLRenderer()
        ret = ccall(("gsk_gl_renderer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GskRenderer, ret, true)
        ret2
    end
    function GLShader_new_from_bytes(_sourcecode::GBytes)
        ret = ccall(("gsk_gl_shader_new_from_bytes", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GBytes},), _sourcecode)
        ret2 = convert(GskGLShader, ret, true)
        ret2
    end
    function GLShader_new_from_resource(_resource_path)
        ret = ccall(("gsk_gl_shader_new_from_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GskGLShader, ret, true)
        ret2
    end
    function compile(instance::GskGLShader, _renderer::GskRenderer)
        err = err_buf()
        ret = ccall(("gsk_gl_shader_compile", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _renderer, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function find_uniform_by_name(instance::GskGLShader, _name)
        ret = ccall(("gsk_gl_shader_find_uniform_by_name", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        ret
    end
    function get_arg_bool(instance::GskGLShader, _args::GBytes, _idx)
        ret = ccall(("gsk_gl_shader_get_arg_bool", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GBytes}, Int32), instance, _args, _idx)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_arg_float(instance::GskGLShader, _args::GBytes, _idx)
        ret = ccall(("gsk_gl_shader_get_arg_float", "libgtk-4.so.1"), Float32, (Ptr{GObject}, Ptr{GBytes}, Int32), instance, _args, _idx)
        ret
    end
    function get_arg_int(instance::GskGLShader, _args::GBytes, _idx)
        ret = ccall(("gsk_gl_shader_get_arg_int", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GBytes}, Int32), instance, _args, _idx)
        ret
    end
    function get_arg_uint(instance::GskGLShader, _args::GBytes, _idx)
        ret = ccall(("gsk_gl_shader_get_arg_uint", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, Ptr{GBytes}, Int32), instance, _args, _idx)
        ret
    end
    function get_arg_vec2(instance::GskGLShader, _args::GBytes, _idx, _out_value::GrapheneVec2)
        ret = ccall(("gsk_gl_shader_get_arg_vec2", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GBytes}, Int32, Ptr{GrapheneVec2}), instance, _args, _idx, _out_value)
        nothing
    end
    function get_arg_vec3(instance::GskGLShader, _args::GBytes, _idx, _out_value::GrapheneVec3)
        ret = ccall(("gsk_gl_shader_get_arg_vec3", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GBytes}, Int32, Ptr{GrapheneVec3}), instance, _args, _idx, _out_value)
        nothing
    end
    function get_arg_vec4(instance::GskGLShader, _args::GBytes, _idx, _out_value::GrapheneVec4)
        ret = ccall(("gsk_gl_shader_get_arg_vec4", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GBytes}, Int32, Ptr{GrapheneVec4}), instance, _args, _idx, _out_value)
        nothing
    end
    function get_args_size(instance::GskGLShader)
        ret = ccall(("gsk_gl_shader_get_args_size", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_n_textures(instance::GskGLShader)
        ret = ccall(("gsk_gl_shader_get_n_textures", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_uniforms(instance::GskGLShader)
        ret = ccall(("gsk_gl_shader_get_n_uniforms", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_resource(instance::GskGLShader)
        ret = ccall(("gsk_gl_shader_get_resource", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_source(instance::GskGLShader)
        ret = ccall(("gsk_gl_shader_get_source", "libgtk-4.so.1"), Ptr{GBytes}, (Ptr{GObject},), instance)
        ret2 = convert(GBytes, ret, false)
        ret2
    end
    function get_uniform_name(instance::GskGLShader, _idx)
        ret = ccall(("gsk_gl_shader_get_uniform_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32), instance, _idx)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_uniform_offset(instance::GskGLShader, _idx)
        ret = ccall(("gsk_gl_shader_get_uniform_offset", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _idx)
        ret
    end
    function get_uniform_type(instance::GskGLShader, _idx)
        ret = ccall(("gsk_gl_shader_get_uniform_type", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _idx)
        ret
    end
    function GLShaderNode(_shader::GskGLShader, _bounds::GrapheneRect, _args::GBytes, _children)
        _children = convert(Vector{Ptr{GObject}}, _children)
        _n_children = length(_children)
        ret = ccall(("gsk_gl_shader_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GBytes}, Ptr{Ptr{GObject}}, UInt32), _shader, _bounds, _args, _children, _n_children)
        ret2 = convert(GskGLShaderNode, ret, true)
        ret2
    end
    function get_args(instance::GskGLShaderNode)
        ret = ccall(("gsk_gl_shader_node_get_args", "libgtk-4.so.1"), Ptr{GBytes}, (Ptr{GObject},), instance)
        ret2 = convert(GBytes, ret, false)
        ret2
    end
    function get_child(instance::GskGLShaderNode, _idx)
        ret = ccall(("gsk_gl_shader_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _idx)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_n_children(instance::GskGLShaderNode)
        ret = ccall(("gsk_gl_shader_node_get_n_children", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_shader(instance::GskGLShaderNode)
        ret = ccall(("gsk_gl_shader_node_get_shader", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskGLShader, ret, false)
        ret2
    end
    function InsetShadowNode(_outline::GskRoundedRect, _color::GdkRGBA, _dx, _dy, _spread, _blur_radius)
        ret = ccall(("gsk_inset_shadow_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GskRoundedRect}, Ptr{GdkRGBA}, Float32, Float32, Float32, Float32), _outline, _color, _dx, _dy, _spread, _blur_radius)
        ret2 = convert(GskInsetShadowNode, ret, true)
        ret2
    end
    function get_blur_radius(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_blur_radius", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_color(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_color", "libgtk-4.so.1"), Ptr{GdkRGBA}, (Ptr{GObject},), instance)
        ret2 = convert(GdkRGBA, ret, false)
        ret2
    end
    function get_dx(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_dx", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_dy(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_dy", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_outline(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_outline", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{GObject},), instance)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function get_spread(instance::GskInsetShadowNode)
        ret = ccall(("gsk_inset_shadow_node_get_spread", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function LinearGradientNode(_bounds::GrapheneRect, _start::GraphenePoint, _end::GraphenePoint, _color_stops)
        _color_stops = convert(Vector{GskColorStop}, _color_stops)
        _n_color_stops = length(_color_stops)
        ret = ccall(("gsk_linear_gradient_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GskColorStop}, UInt64), _bounds, _start, _end, _color_stops, _n_color_stops)
        ret2 = convert(GskLinearGradientNode, ret, true)
        ret2
    end
    function get_color_stops(instance::GskLinearGradientNode)
        m_n_stops = mutable(UInt64)
        ret = ccall(("gsk_linear_gradient_node_get_color_stops", "libgtk-4.so.1"), Ptr{GskColorStop}, (Ptr{GObject}, Ptr{UInt64}), instance, m_n_stops)
        _n_stops = m_n_stops[]
        ret
    end
    function get_end(instance::GskLinearGradientNode)
        ret = ccall(("gsk_linear_gradient_node_get_end", "libgtk-4.so.1"), Ptr{GraphenePoint}, (Ptr{GObject},), instance)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function get_n_color_stops(instance::GskLinearGradientNode)
        ret = ccall(("gsk_linear_gradient_node_get_n_color_stops", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_start(instance::GskLinearGradientNode)
        ret = ccall(("gsk_linear_gradient_node_get_start", "libgtk-4.so.1"), Ptr{GraphenePoint}, (Ptr{GObject},), instance)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function NglRenderer()
        ret = ccall(("gsk_ngl_renderer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GskRenderer, ret, true)
        ret2
    end
    function OpacityNode(_child::GskRenderNode, _opacity)
        ret = ccall(("gsk_opacity_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Float32), _child, _opacity)
        ret2 = convert(GskOpacityNode, ret, true)
        ret2
    end
    function get_child(instance::GskOpacityNode)
        ret = ccall(("gsk_opacity_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_opacity(instance::GskOpacityNode)
        ret = ccall(("gsk_opacity_node_get_opacity", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function OutsetShadowNode(_outline::GskRoundedRect, _color::GdkRGBA, _dx, _dy, _spread, _blur_radius)
        ret = ccall(("gsk_outset_shadow_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GskRoundedRect}, Ptr{GdkRGBA}, Float32, Float32, Float32, Float32), _outline, _color, _dx, _dy, _spread, _blur_radius)
        ret2 = convert(GskOutsetShadowNode, ret, true)
        ret2
    end
    function get_blur_radius(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_blur_radius", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_color(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_color", "libgtk-4.so.1"), Ptr{GdkRGBA}, (Ptr{GObject},), instance)
        ret2 = convert(GdkRGBA, ret, false)
        ret2
    end
    function get_dx(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_dx", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_dy(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_dy", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_outline(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_outline", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{GObject},), instance)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function get_spread(instance::GskOutsetShadowNode)
        ret = ccall(("gsk_outset_shadow_node_get_spread", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function RadialGradientNode(_bounds::GrapheneRect, _center::GraphenePoint, _hradius, _vradius, _start, _end, _color_stops)
        _color_stops = convert(Vector{GskColorStop}, _color_stops)
        _n_color_stops = length(_color_stops)
        ret = ccall(("gsk_radial_gradient_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Float32, Float32, Float32, Ptr{GskColorStop}, UInt64), _bounds, _center, _hradius, _vradius, _start, _end, _color_stops, _n_color_stops)
        ret2 = convert(GskRadialGradientNode, ret, true)
        ret2
    end
    function get_center(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_center", "libgtk-4.so.1"), Ptr{GraphenePoint}, (Ptr{GObject},), instance)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function get_color_stops(instance::GskRadialGradientNode)
        m_n_stops = mutable(UInt64)
        ret = ccall(("gsk_radial_gradient_node_get_color_stops", "libgtk-4.so.1"), Ptr{GskColorStop}, (Ptr{GObject}, Ptr{UInt64}), instance, m_n_stops)
        _n_stops = m_n_stops[]
        ret
    end
    function get_end(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_end", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_hradius(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_hradius", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_color_stops(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_n_color_stops", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_start(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_start", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_vradius(instance::GskRadialGradientNode)
        ret = ccall(("gsk_radial_gradient_node_get_vradius", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function deserialize(_bytes::GBytes, _error_func::Maybe(Function), _user_data::Maybe(Nothing))
        _error_func = if _error_func == nothing
                C_NULL
            else
                _error_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        ret = ccall(("gsk_render_node_deserialize", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GBytes}, Ptr{Nothing}, Ptr{Nothing}), _bytes, _error_func, _user_data)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskRenderNode, ret, true)
            end
        ret2
    end
    function draw(instance::GskRenderNode, _cr::cairoContext)
        ret = ccall(("gsk_render_node_draw", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}), instance, _cr)
        nothing
    end
    function get_bounds(instance::GskRenderNode)
        m_bounds = mutable(Ptr{GrapheneRect})
        ret = ccall(("gsk_render_node_get_bounds", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GrapheneRect}}), instance, m_bounds)
        _bounds = m_bounds[]
        _bounds = convert(GrapheneRect, _bounds, false)
        _bounds
    end
    function get_node_type(instance::GskRenderNode)
        ret = ccall(("gsk_render_node_get_node_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function ref(instance::GskRenderNode)
        ret = ccall(("gsk_render_node_ref", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, true)
        ret2
    end
    function serialize(instance::GskRenderNode)
        ret = ccall(("gsk_render_node_serialize", "libgtk-4.so.1"), Ptr{GBytes}, (Ptr{GObject},), instance)
        ret2 = convert(GBytes, ret, true)
        ret2
    end
    function unref(instance::GskRenderNode)
        ret = ccall(("gsk_render_node_unref", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function write_to_file(instance::GskRenderNode, _filename)
        err = err_buf()
        ret = ccall(("gsk_render_node_write_to_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _filename, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function Renderer_new_for_surface(_surface::GdkSurface)
        ret = ccall(("gsk_renderer_new_for_surface", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _surface)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskRenderer, ret, true)
            end
        ret2
    end
    function get_surface(instance::GskRenderer)
        ret = ccall(("gsk_renderer_get_surface", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkSurface, ret, false)
            end
        ret2
    end
    function is_realized(instance::GskRenderer)
        ret = ccall(("gsk_renderer_is_realized", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function realize(instance::GskRenderer, _surface::GdkSurface)
        err = err_buf()
        ret = ccall(("gsk_renderer_realize", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _surface, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function render(instance::GskRenderer, _root::GskRenderNode, _region::Maybe(cairoRegion))
        _region = if _region == nothing
                C_NULL
            else
                _region
            end
        ret = ccall(("gsk_renderer_render", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{cairoRegion}), instance, _root, _region)
        nothing
    end
    function render_texture(instance::GskRenderer, _root::GskRenderNode, _viewport::Maybe(GrapheneRect))
        _viewport = if _viewport == nothing
                C_NULL
            else
                _viewport
            end
        ret = ccall(("gsk_renderer_render_texture", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{GrapheneRect}), instance, _root, _viewport)
        ret2 = convert(GdkTexture, ret, true)
        ret2
    end
    function unrealize(instance::GskRenderer)
        ret = ccall(("gsk_renderer_unrealize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function RepeatNode(_bounds::GrapheneRect, _child::GskRenderNode, _child_bounds::Maybe(GrapheneRect))
        _child_bounds = if _child_bounds == nothing
                C_NULL
            else
                _child_bounds
            end
        ret = ccall(("gsk_repeat_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GObject}, Ptr{GrapheneRect}), _bounds, _child, _child_bounds)
        ret2 = convert(GskRepeatNode, ret, true)
        ret2
    end
    function get_child(instance::GskRepeatNode)
        ret = ccall(("gsk_repeat_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_child_bounds(instance::GskRepeatNode)
        ret = ccall(("gsk_repeat_node_get_child_bounds", "libgtk-4.so.1"), Ptr{GrapheneRect}, (Ptr{GObject},), instance)
        ret2 = convert(GrapheneRect, ret, false)
        ret2
    end
    function RepeatingLinearGradientNode(_bounds::GrapheneRect, _start::GraphenePoint, _end::GraphenePoint, _color_stops)
        _color_stops = convert(Vector{GskColorStop}, _color_stops)
        _n_color_stops = length(_color_stops)
        ret = ccall(("gsk_repeating_linear_gradient_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GskColorStop}, UInt64), _bounds, _start, _end, _color_stops, _n_color_stops)
        ret2 = convert(GskRepeatingLinearGradientNode, ret, true)
        ret2
    end
    function RepeatingRadialGradientNode(_bounds::GrapheneRect, _center::GraphenePoint, _hradius, _vradius, _start, _end, _color_stops)
        _color_stops = convert(Vector{GskColorStop}, _color_stops)
        _n_color_stops = length(_color_stops)
        ret = ccall(("gsk_repeating_radial_gradient_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Float32, Float32, Float32, Ptr{GskColorStop}, UInt64), _bounds, _center, _hradius, _vradius, _start, _end, _color_stops, _n_color_stops)
        ret2 = convert(GskRepeatingRadialGradientNode, ret, true)
        ret2
    end
    function RoundedClipNode(_child::GskRenderNode, _clip::GskRoundedRect)
        ret = ccall(("gsk_rounded_clip_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GskRoundedRect}), _child, _clip)
        ret2 = convert(GskRoundedClipNode, ret, false)
        ret2
    end
    function get_child(instance::GskRoundedClipNode)
        ret = ccall(("gsk_rounded_clip_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_clip(instance::GskRoundedClipNode)
        ret = ccall(("gsk_rounded_clip_node_get_clip", "libgtk-4.so.1"), Ptr{GskRoundedRect}, (Ptr{GObject},), instance)
        ret2 = convert(GskRoundedRect, ret)
        ret2
    end
    function ShadowNode(_child::GskRenderNode, _shadows)
        _shadows = convert(Vector{GskShadow}, _shadows)
        _n_shadows = length(_shadows)
        ret = ccall(("gsk_shadow_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GskShadow}, UInt64), _child, _shadows, _n_shadows)
        ret2 = convert(GskShadowNode, ret, true)
        ret2
    end
    function get_child(instance::GskShadowNode)
        ret = ccall(("gsk_shadow_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_n_shadows(instance::GskShadowNode)
        ret = ccall(("gsk_shadow_node_get_n_shadows", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_shadow(instance::GskShadowNode, _i)
        ret = ccall(("gsk_shadow_node_get_shadow", "libgtk-4.so.1"), Ptr{GskShadow}, (Ptr{GObject}, UInt64), instance, _i)
        ret2 = convert(GskShadow, ret)
        ret2
    end
    function TextNode(_font::PangoFont, _glyphs::PangoGlyphString, _color::GdkRGBA, _offset::GraphenePoint)
        ret = ccall(("gsk_text_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{PangoGlyphString}, Ptr{GdkRGBA}, Ptr{GraphenePoint}), _font, _glyphs, _color, _offset)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskTextNode, ret, true)
            end
        ret2
    end
    function get_color(instance::GskTextNode)
        ret = ccall(("gsk_text_node_get_color", "libgtk-4.so.1"), Ptr{GdkRGBA}, (Ptr{GObject},), instance)
        ret2 = convert(GdkRGBA, ret, false)
        ret2
    end
    function get_font(instance::GskTextNode)
        ret = ccall(("gsk_text_node_get_font", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoFont, ret, false)
        ret2
    end
    function get_glyphs(instance::GskTextNode)
        m_n_glyphs = mutable(UInt32)
        ret = ccall(("gsk_text_node_get_glyphs", "libgtk-4.so.1"), Ptr{PangoGlyphInfo}, (Ptr{GObject}, Ptr{UInt32}), instance, m_n_glyphs)
        _n_glyphs = m_n_glyphs[]
        ret
    end
    function get_num_glyphs(instance::GskTextNode)
        ret = ccall(("gsk_text_node_get_num_glyphs", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_offset(instance::GskTextNode)
        ret = ccall(("gsk_text_node_get_offset", "libgtk-4.so.1"), Ptr{GraphenePoint}, (Ptr{GObject},), instance)
        ret2 = convert(GraphenePoint, ret, false)
        ret2
    end
    function has_color_glyphs(instance::GskTextNode)
        ret = ccall(("gsk_text_node_has_color_glyphs", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function TextureNode(_texture::GdkTexture, _bounds::GrapheneRect)
        ret = ccall(("gsk_texture_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GrapheneRect}), _texture, _bounds)
        ret2 = convert(GskTextureNode, ret, true)
        ret2
    end
    function get_texture(instance::GskTextureNode)
        ret = ccall(("gsk_texture_node_get_texture", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkTexture, ret, false)
        ret2
    end
    function TransformNode(_child::GskRenderNode, _transform::GskTransform)
        ret = ccall(("gsk_transform_node_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GskTransform}), _child, _transform)
        ret2 = convert(GskTransformNode, ret, true)
        ret2
    end
    function get_child(instance::GskTransformNode)
        ret = ccall(("gsk_transform_node_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, false)
        ret2
    end
    function get_transform(instance::GskTransformNode)
        ret = ccall(("gsk_transform_node_get_transform", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GObject},), instance)
        ret2 = convert(GskTransform, ret, false)
        ret2
    end
end))
end
