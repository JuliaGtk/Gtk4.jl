quote
$(Expr(:toplevel, quote
    begin
        gboxed_types = Any[]
    end
    begin
        struct _GrapheneSimd4F
            x::Float32
            y::Float32
            z::Float32
            w::Float32
        end
        begin
            mutable struct GrapheneSimd4F
                handle::Ptr{_GrapheneSimd4F}
            end
        end
    end
    begin
        struct _GrapheneVec3
            value::GrapheneSimd4F
        end
        begin
            mutable struct GrapheneVec3 <: GBoxed
                handle::Ptr{_GrapheneVec3}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneVec3) = begin
                            ccall(("graphene_vec3_get_type", libgraphene), GType, ())
                        end
                    function GrapheneVec3(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneVec3)
                end
            end
        end
    end
    begin
        struct _GrapheneSimd4X4F
            x::GrapheneSimd4F
            y::GrapheneSimd4F
            z::GrapheneSimd4F
            w::GrapheneSimd4F
        end
        begin
            mutable struct GrapheneSimd4X4F
                handle::Ptr{_GrapheneSimd4X4F}
            end
        end
    end
    begin
        struct _GrapheneSize
            width::Float32
            height::Float32
        end
        begin
            mutable struct GrapheneSize <: GBoxed
                handle::Ptr{_GrapheneSize}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneSize) = begin
                            ccall(("graphene_size_get_type", libgraphene), GType, ())
                        end
                    function GrapheneSize(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneSize)
                end
            end
        end
    end
    begin
        struct _GrapheneBox
            min::_GrapheneVec3
            max::_GrapheneVec3
        end
        begin
            mutable struct GrapheneBox <: GBoxed
                handle::Ptr{_GrapheneBox}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneBox) = begin
                            ccall(("graphene_box_get_type", libgraphene), GType, ())
                        end
                    function GrapheneBox(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneBox)
                end
            end
        end
    end
    begin
        struct _GrapheneEuler
            angles::_GrapheneVec3
            order::UInt16
        end
        begin
            mutable struct GrapheneEuler <: GBoxed
                handle::Ptr{_GrapheneEuler}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneEuler) = begin
                            ccall(("graphene_euler_get_type", libgraphene), GType, ())
                        end
                    function GrapheneEuler(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneEuler)
                end
            end
        end
    end
    begin
        begin
            mutable struct GrapheneFrustum <: GBoxed
                handle::Ptr{GrapheneFrustum}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneFrustum) = begin
                            ccall(("graphene_frustum_get_type", libgraphene), GType, ())
                        end
                    function GrapheneFrustum(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneFrustum)
                end
            end
        end
        const _GrapheneFrustum = GrapheneFrustum
    end
    begin
        struct _GrapheneMatrix
            value::GrapheneSimd4X4F
        end
        begin
            mutable struct GrapheneMatrix <: GBoxed
                handle::Ptr{_GrapheneMatrix}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneMatrix) = begin
                            ccall(("graphene_matrix_get_type", libgraphene), GType, ())
                        end
                    function GrapheneMatrix(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneMatrix)
                end
            end
        end
    end
    begin
        struct _GraphenePlane
            normal::_GrapheneVec3
            constant::Float32
        end
        begin
            mutable struct GraphenePlane <: GBoxed
                handle::Ptr{_GraphenePlane}
                begin
                    (GLib.g_type(::Type{T}) where T <: GraphenePlane) = begin
                            ccall(("graphene_plane_get_type", libgraphene), GType, ())
                        end
                    function GraphenePlane(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GraphenePlane)
                end
            end
        end
    end
    begin
        struct _GraphenePoint
            x::Float32
            y::Float32
        end
        begin
            mutable struct GraphenePoint <: GBoxed
                handle::Ptr{_GraphenePoint}
                begin
                    (GLib.g_type(::Type{T}) where T <: GraphenePoint) = begin
                            ccall(("graphene_point_get_type", libgraphene), GType, ())
                        end
                    function GraphenePoint(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GraphenePoint)
                end
            end
        end
    end
    begin
        struct _GraphenePoint3D
            x::Float32
            y::Float32
            z::Float32
        end
        begin
            mutable struct GraphenePoint3D <: GBoxed
                handle::Ptr{_GraphenePoint3D}
                begin
                    (GLib.g_type(::Type{T}) where T <: GraphenePoint3D) = begin
                            ccall(("graphene_point3d_get_type", libgraphene), GType, ())
                        end
                    function GraphenePoint3D(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GraphenePoint3D)
                end
            end
        end
    end
    begin
        begin
            mutable struct GrapheneQuad <: GBoxed
                handle::Ptr{GrapheneQuad}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneQuad) = begin
                            ccall(("graphene_quad_get_type", libgraphene), GType, ())
                        end
                    function GrapheneQuad(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneQuad)
                end
            end
        end
        const _GrapheneQuad = GrapheneQuad
    end
    begin
        struct _GrapheneQuaternion
            x::Float32
            y::Float32
            z::Float32
            w::Float32
        end
        begin
            mutable struct GrapheneQuaternion <: GBoxed
                handle::Ptr{_GrapheneQuaternion}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneQuaternion) = begin
                            ccall(("graphene_quaternion_get_type", libgraphene), GType, ())
                        end
                    function GrapheneQuaternion(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneQuaternion)
                end
            end
        end
    end
    begin
        struct _GrapheneRay
            origin::_GrapheneVec3
            direction::_GrapheneVec3
        end
        begin
            mutable struct GrapheneRay <: GBoxed
                handle::Ptr{_GrapheneRay}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneRay) = begin
                            ccall(("graphene_ray_get_type", libgraphene), GType, ())
                        end
                    function GrapheneRay(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneRay)
                end
            end
        end
    end
    begin
        struct _GrapheneRect
            origin::_GraphenePoint
            size::_GrapheneSize
        end
        begin
            mutable struct GrapheneRect <: GBoxed
                handle::Ptr{_GrapheneRect}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneRect) = begin
                            ccall(("graphene_rect_get_type", libgraphene), GType, ())
                        end
                    function GrapheneRect(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneRect)
                end
            end
        end
    end
    begin
        struct _GrapheneSphere
            center::_GrapheneVec3
            radius::Float32
        end
        begin
            mutable struct GrapheneSphere <: GBoxed
                handle::Ptr{_GrapheneSphere}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneSphere) = begin
                            ccall(("graphene_sphere_get_type", libgraphene), GType, ())
                        end
                    function GrapheneSphere(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneSphere)
                end
            end
        end
    end
    begin
        struct _GrapheneTriangle
            a::_GrapheneVec3
            b::_GrapheneVec3
            c::_GrapheneVec3
        end
        begin
            mutable struct GrapheneTriangle <: GBoxed
                handle::Ptr{_GrapheneTriangle}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneTriangle) = begin
                            ccall(("graphene_triangle_get_type", libgraphene), GType, ())
                        end
                    function GrapheneTriangle(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneTriangle)
                end
            end
        end
    end
    begin
        struct _GrapheneVec2
            value::GrapheneSimd4F
        end
        begin
            mutable struct GrapheneVec2 <: GBoxed
                handle::Ptr{_GrapheneVec2}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneVec2) = begin
                            ccall(("graphene_vec2_get_type", libgraphene), GType, ())
                        end
                    function GrapheneVec2(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneVec2)
                end
            end
        end
    end
    begin
        struct _GrapheneVec4
            value::GrapheneSimd4F
        end
        begin
            mutable struct GrapheneVec4 <: GBoxed
                handle::Ptr{_GrapheneVec4}
                begin
                    (GLib.g_type(::Type{T}) where T <: GrapheneVec4) = begin
                            ccall(("graphene_vec4_get_type", libgraphene), GType, ())
                        end
                    function GrapheneVec4(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                        x = new(ref)
                        if own
                            finalizer(x) do x
                                GLib.delboxed(x)
                            end
                        end
                        x
                    end
                    push!(gboxed_types, GrapheneVec4)
                end
            end
        end
    end
    begin
        gboxed_cache_init() = begin
                append!(GLib.gboxed_types, gboxed_types)
            end
    end
    begin
        gtype_wrapper_cache = Dict{Symbol, Type}()
    end
    begin
        gtype_wrapper_cache_init() = begin
                merge!(GLib.gtype_wrappers, gtype_wrapper_cache)
            end
    end
    export GrapheneSimd4F, GrapheneVec3, GrapheneSimd4X4F, GrapheneSize, GrapheneBox, GrapheneEuler, GrapheneFrustum, GrapheneMatrix, GraphenePlane, GraphenePoint, GraphenePoint3D, GrapheneQuad, GrapheneQuaternion, GrapheneRay, GrapheneRect, GrapheneSphere, GrapheneTriangle, GrapheneVec2, GrapheneVec4
end))
end
