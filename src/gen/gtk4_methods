quote
$(Expr(:toplevel, quote
    function Border()
        ret = ccall(("gtk_border_new", "libgtk-4.so.1"), Ptr{GtkBorder}, ())
        ret2 = convert(GtkBorder, ret, true)
        ret2
    end
    function copy(instance::GtkBorder)
        ret = ccall(("gtk_border_copy", "libgtk-4.so.1"), Ptr{GtkBorder}, (Ptr{GtkBorder},), instance)
        ret2 = convert(GtkBorder, ret, true)
        ret2
    end
    function free(instance::GtkBorder)
        ret = ccall(("gtk_border_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkBorder},), instance)
        nothing
    end
    function evaluate(instance::GtkExpressionWatch, _value::GValue)
        ret = ccall(("gtk_expression_watch_evaluate", "libgtk-4.so.1"), Cint, (Ptr{GtkExpressionWatch}, Ptr{GValue}), instance, _value)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ref(instance::GtkExpressionWatch)
        ret = ccall(("gtk_expression_watch_ref", "libgtk-4.so.1"), Ptr{GtkExpressionWatch}, (Ptr{GtkExpressionWatch},), instance)
        ret2 = convert(GtkExpressionWatch, ret, true)
        ret2
    end
    function unref(instance::GtkExpressionWatch)
        ret = ccall(("gtk_expression_watch_unref", "libgtk-4.so.1"), Nothing, (Ptr{GtkExpressionWatch},), instance)
        nothing
    end
    function unwatch(instance::GtkExpressionWatch)
        ret = ccall(("gtk_expression_watch_unwatch", "libgtk-4.so.1"), Nothing, (Ptr{GtkExpressionWatch},), instance)
        nothing
    end
    function PaperSize(_name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_paper_size_new", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{UInt8},), _name)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function PaperSize_new_custom(_name, _display_name, _width, _height, _unit)
        ret = ccall(("gtk_paper_size_new_custom", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{UInt8}, Ptr{UInt8}, Float64, Float64, Int32), _name, _display_name, _width, _height, _unit)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function PaperSize_new_from_gvariant(_variant::GVariant)
        ret = ccall(("gtk_paper_size_new_from_gvariant", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{GVariant},), _variant)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function PaperSize_new_from_ipp(_ipp_name, _width, _height)
        ret = ccall(("gtk_paper_size_new_from_ipp", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{UInt8}, Float64, Float64), _ipp_name, _width, _height)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function PaperSize_new_from_key_file(_key_file::GKeyFile, _group_name)
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        err = err_buf()
        ret = ccall(("gtk_paper_size_new_from_key_file", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{GKeyFile}, Ptr{UInt8}, Ptr{Ptr{GError}}), _key_file, _group_name, err)
        check_err(err)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function PaperSize_new_from_ppd(_ppd_name, _ppd_display_name, _width, _height)
        ret = ccall(("gtk_paper_size_new_from_ppd", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{UInt8}, Ptr{UInt8}, Float64, Float64), _ppd_name, _ppd_display_name, _width, _height)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function copy(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_copy", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{GtkPaperSize},), instance)
        ret2 = convert(GtkPaperSize, ret, true)
        ret2
    end
    function free(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkPaperSize},), instance)
        nothing
    end
    function get_default_bottom_margin(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_default_bottom_margin", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function get_default_left_margin(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_default_left_margin", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function get_default_right_margin(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_default_right_margin", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function get_default_top_margin(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_default_top_margin", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function get_display_name(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_get_display_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkPaperSize},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_height(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_height", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function get_name(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkPaperSize},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_ppd_name(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_get_ppd_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkPaperSize},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_width(instance::GtkPaperSize, _unit)
        ret = ccall(("gtk_paper_size_get_width", "libgtk-4.so.1"), Float64, (Ptr{GtkPaperSize}, Int32), instance, _unit)
        ret
    end
    function is_custom(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_is_custom", "libgtk-4.so.1"), Cint, (Ptr{GtkPaperSize},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_equal(instance::GtkPaperSize, _size2::GtkPaperSize)
        ret = ccall(("gtk_paper_size_is_equal", "libgtk-4.so.1"), Cint, (Ptr{GtkPaperSize}, Ptr{GtkPaperSize}), instance, _size2)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_ipp(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_is_ipp", "libgtk-4.so.1"), Cint, (Ptr{GtkPaperSize},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_size(instance::GtkPaperSize, _width, _height, _unit)
        ret = ccall(("gtk_paper_size_set_size", "libgtk-4.so.1"), Nothing, (Ptr{GtkPaperSize}, Float64, Float64, Int32), instance, _width, _height, _unit)
        nothing
    end
    function to_gvariant(instance::GtkPaperSize)
        ret = ccall(("gtk_paper_size_to_gvariant", "libgtk-4.so.1"), Ptr{GVariant}, (Ptr{GtkPaperSize},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function to_key_file(instance::GtkPaperSize, _key_file::GKeyFile, _group_name)
        ret = ccall(("gtk_paper_size_to_key_file", "libgtk-4.so.1"), Nothing, (Ptr{GtkPaperSize}, Ptr{GKeyFile}, Ptr{UInt8}), instance, _key_file, _group_name)
        nothing
    end
    function create_app_info(instance::GtkRecentInfo, _app_name)
        _app_name = if _app_name == nothing
                C_NULL
            else
                _app_name
            end
        err = err_buf()
        ret = ccall(("gtk_recent_info_create_app_info", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkRecentInfo}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _app_name, err)
        check_err(err)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function exists(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_exists", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_added(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_added", "libgtk-4.so.1"), Ptr{GDateTime}, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(GDateTime, ret, false)
        ret2
    end
    function get_age(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_age", "libgtk-4.so.1"), Int32, (Ptr{GtkRecentInfo},), instance)
        ret
    end
    function get_application_info(instance::GtkRecentInfo, _app_name)
        m_app_exec = Ref{Ptr{UInt8}}()
        m_count = Ref{UInt32}()
        m_stamp = Ref{Ptr{GDateTime}}()
        ret = ccall(("gtk_recent_info_get_application_info", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo}, Ptr{UInt8}, Ptr{Ptr{UInt8}}, Ptr{UInt32}, Ptr{Ptr{GDateTime}}), instance, _app_name, m_app_exec, m_count, m_stamp)
        ret2 = convert(Bool, ret)
        _app_exec = m_app_exec[]
        _app_exec = if _app_exec == C_NULL
                nothing
            else
                bytestring(_app_exec, false)
            end
        _count = m_count[]
        _stamp = m_stamp[]
        _stamp = convert(GDateTime, _stamp, false)
        (ret2, _app_exec, _count, _stamp)
    end
    function get_applications(instance::GtkRecentInfo)
        m_length = Ref{UInt64}()
        ret = ccall(("gtk_recent_info_get_applications", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GtkRecentInfo}, Ptr{UInt64}), instance, m_length)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        _length = m_length[]
        ret2
    end
    function get_description(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_description", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_display_name(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_display_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_gicon(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_gicon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function get_groups(instance::GtkRecentInfo)
        m_length = Ref{UInt64}()
        ret = ccall(("gtk_recent_info_get_groups", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GtkRecentInfo}, Ptr{UInt64}), instance, m_length)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        _length = m_length[]
        ret2
    end
    function get_mime_type(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_mime_type", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_modified(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_modified", "libgtk-4.so.1"), Ptr{GDateTime}, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(GDateTime, ret, false)
        ret2
    end
    function get_private_hint(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_private_hint", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_short_name(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_short_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_uri(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_uri", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_uri_display(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_uri_display", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_visited(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_get_visited", "libgtk-4.so.1"), Ptr{GDateTime}, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(GDateTime, ret, false)
        ret2
    end
    function has_application(instance::GtkRecentInfo, _app_name)
        ret = ccall(("gtk_recent_info_has_application", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo}, Ptr{UInt8}), instance, _app_name)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_group(instance::GtkRecentInfo, _group_name)
        ret = ccall(("gtk_recent_info_has_group", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo}, Ptr{UInt8}), instance, _group_name)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_local(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_is_local", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function last_application(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_last_application", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkRecentInfo},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function match(instance::GtkRecentInfo, _info_b::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_match", "libgtk-4.so.1"), Cint, (Ptr{GtkRecentInfo}, Ptr{GtkRecentInfo}), instance, _info_b)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ref(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_ref", "libgtk-4.so.1"), Ptr{GtkRecentInfo}, (Ptr{GtkRecentInfo},), instance)
        ret2 = convert(GtkRecentInfo, ret, true)
        ret2
    end
    function unref(instance::GtkRecentInfo)
        ret = ccall(("gtk_recent_info_unref", "libgtk-4.so.1"), Nothing, (Ptr{GtkRecentInfo},), instance)
        nothing
    end
    function Requisition()
        ret = ccall(("gtk_requisition_new", "libgtk-4.so.1"), Ptr{GtkRequisition}, ())
        ret2 = convert(GtkRequisition, ret, true)
        ret2
    end
    function copy(instance::GtkRequisition)
        ret = ccall(("gtk_requisition_copy", "libgtk-4.so.1"), Ptr{GtkRequisition}, (Ptr{GtkRequisition},), instance)
        ret2 = convert(GtkRequisition, ret, true)
        ret2
    end
    function free(instance::GtkRequisition)
        ret = ccall(("gtk_requisition_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkRequisition},), instance)
        nothing
    end
    function assign(instance::GtkTextIter, _other::GtkTextIter)
        ret = ccall(("gtk_text_iter_assign", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _other)
        nothing
    end
    function backward_char(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_char", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_chars(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_chars", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_cursor_position(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_cursor_position", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_cursor_positions(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_cursor_positions", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_find_char(instance::GtkTextIter, _pred::Function, _user_data::Maybe(Nothing), _limit::Maybe(GtkTextIter))
        _pred = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Nothing, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _limit = if _limit == nothing
                C_NULL
            else
                _limit
            end
        ret = ccall(("gtk_text_iter_backward_find_char", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{Nothing}, Ptr{Nothing}, Ptr{GtkTextIter}), instance, _pred, _user_data, _limit)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_lines(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_lines", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_search(instance::GtkTextIter, _str, _flags, _limit::Maybe(GtkTextIter))
        m_match_start = Ref{Ptr{GtkTextIter}}()
        m_match_end = Ref{Ptr{GtkTextIter}}()
        _limit = if _limit == nothing
                C_NULL
            else
                _limit
            end
        ret = ccall(("gtk_text_iter_backward_search", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{UInt8}, Int32, Ptr{Ptr{GtkTextIter}}, Ptr{Ptr{GtkTextIter}}, Ptr{GtkTextIter}), instance, _str, _flags, m_match_start, m_match_end, _limit)
        ret2 = convert(Bool, ret)
        _match_start = m_match_start[]
        _match_start = convert(GtkTextIter, _match_start, false)
        _match_end = m_match_end[]
        _match_end = convert(GtkTextIter, _match_end, false)
        (ret2, _match_start, _match_end)
    end
    function backward_sentence_start(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_sentence_start", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_sentence_starts(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_sentence_starts", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_to_tag_toggle(instance::GtkTextIter, _tag::Maybe(GtkTextTag))
        _tag = if _tag == nothing
                C_NULL
            else
                _tag
            end
        ret = ccall(("gtk_text_iter_backward_to_tag_toggle", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_cursor_position(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_visible_cursor_position", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_cursor_positions(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_visible_cursor_positions", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_visible_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_lines(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_visible_lines", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_word_start(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_visible_word_start", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_visible_word_starts(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_visible_word_starts", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_word_start(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_backward_word_start", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_word_starts(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_backward_word_starts", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function can_insert(instance::GtkTextIter, _default_editability)
        ret = ccall(("gtk_text_iter_can_insert", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Cint), instance, _default_editability)
        ret2 = convert(Bool, ret)
        ret2
    end
    function compare(instance::GtkTextIter, _rhs::GtkTextIter)
        ret = ccall(("gtk_text_iter_compare", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _rhs)
        ret
    end
    function copy(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_copy", "libgtk-4.so.1"), Ptr{GtkTextIter}, (Ptr{GtkTextIter},), instance)
        ret2 = convert(GtkTextIter, ret, true)
        ret2
    end
    function editable(instance::GtkTextIter, _default_setting)
        ret = ccall(("gtk_text_iter_editable", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Cint), instance, _default_setting)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ends_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_ends_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ends_sentence(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_ends_sentence", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ends_tag(instance::GtkTextIter, _tag::Maybe(GtkTextTag))
        _tag = if _tag == nothing
                C_NULL
            else
                _tag
            end
        ret = ccall(("gtk_text_iter_ends_tag", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ends_word(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_ends_word", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function equal(instance::GtkTextIter, _rhs::GtkTextIter)
        ret = ccall(("gtk_text_iter_equal", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _rhs)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_char(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_char", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_chars(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_chars", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_cursor_position(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_cursor_position", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_cursor_positions(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_cursor_positions", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_find_char(instance::GtkTextIter, _pred::Function, _user_data::Maybe(Nothing), _limit::Maybe(GtkTextIter))
        _pred = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Nothing, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _limit = if _limit == nothing
                C_NULL
            else
                _limit
            end
        ret = ccall(("gtk_text_iter_forward_find_char", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{Nothing}, Ptr{Nothing}, Ptr{GtkTextIter}), instance, _pred, _user_data, _limit)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_lines(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_lines", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_search(instance::GtkTextIter, _str, _flags, _limit::Maybe(GtkTextIter))
        m_match_start = Ref{Ptr{GtkTextIter}}()
        m_match_end = Ref{Ptr{GtkTextIter}}()
        _limit = if _limit == nothing
                C_NULL
            else
                _limit
            end
        ret = ccall(("gtk_text_iter_forward_search", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{UInt8}, Int32, Ptr{Ptr{GtkTextIter}}, Ptr{Ptr{GtkTextIter}}, Ptr{GtkTextIter}), instance, _str, _flags, m_match_start, m_match_end, _limit)
        ret2 = convert(Bool, ret)
        _match_start = m_match_start[]
        _match_start = convert(GtkTextIter, _match_start, false)
        _match_end = m_match_end[]
        _match_end = convert(GtkTextIter, _match_end, false)
        (ret2, _match_start, _match_end)
    end
    function forward_sentence_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_sentence_end", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_sentence_ends(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_sentence_ends", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_to_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_to_end", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter},), instance)
        nothing
    end
    function forward_to_line_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_to_line_end", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_to_tag_toggle(instance::GtkTextIter, _tag::Maybe(GtkTextTag))
        _tag = if _tag == nothing
                C_NULL
            else
                _tag
            end
        ret = ccall(("gtk_text_iter_forward_to_tag_toggle", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_cursor_position(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_visible_cursor_position", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_cursor_positions(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_visible_cursor_positions", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_visible_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_lines(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_visible_lines", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_word_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_visible_word_end", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_visible_word_ends(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_visible_word_ends", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_word_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_forward_word_end", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_word_ends(instance::GtkTextIter, _count)
        ret = ccall(("gtk_text_iter_forward_word_ends", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Int32), instance, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function free(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter},), instance)
        nothing
    end
    function get_buffer(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkTextIter},), instance)
        ret2 = convert(GtkTextBuffer, ret, false)
        ret2
    end
    function get_bytes_in_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_bytes_in_line", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_char(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_char", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter},), instance)
        nothing
    end
    function get_chars_in_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_chars_in_line", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_child_anchor(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_child_anchor", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkTextIter},), instance)
        ret2 = convert(GtkTextChildAnchor, ret, false)
        ret2
    end
    function get_language(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_language", "libgtk-4.so.1"), Ptr{PangoLanguage}, (Ptr{GtkTextIter},), instance)
        ret2 = convert(PangoLanguage, ret, true)
        ret2
    end
    function get_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_line", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_line_index(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_line_index", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_line_offset(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_line_offset", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_marks(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_marks", "libgtk-4.so.1"), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GtkTextIter},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_offset(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_offset", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_paintable(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkTextIter},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_slice(instance::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_slice", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _end)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_tags(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_tags", "libgtk-4.so.1"), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GtkTextIter},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_text(instance::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _end)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_toggled_tags(instance::GtkTextIter, _toggled_on)
        ret = ccall(("gtk_text_iter_get_toggled_tags", "libgtk-4.so.1"), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GtkTextIter}, Cint), instance, _toggled_on)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_visible_line_index(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_visible_line_index", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_visible_line_offset(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_visible_line_offset", "libgtk-4.so.1"), Int32, (Ptr{GtkTextIter},), instance)
        ret
    end
    function get_visible_slice(instance::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_visible_slice", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _end)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_visible_text(instance::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_iter_get_visible_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _end)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function has_tag(instance::GtkTextIter, _tag::GtkTextTag)
        ret = ccall(("gtk_text_iter_has_tag", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function in_range(instance::GtkTextIter, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_iter_in_range", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _start, _end)
        ret2 = convert(Bool, ret)
        ret2
    end
    function inside_sentence(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_inside_sentence", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function inside_word(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_inside_word", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_cursor_position(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_is_cursor_position", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_end(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_is_end", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_start(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_is_start", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function order(instance::GtkTextIter, _second::GtkTextIter)
        ret = ccall(("gtk_text_iter_order", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _second)
        nothing
    end
    function set_line(instance::GtkTextIter, _line_number)
        ret = ccall(("gtk_text_iter_set_line", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _line_number)
        nothing
    end
    function set_line_index(instance::GtkTextIter, _byte_on_line)
        ret = ccall(("gtk_text_iter_set_line_index", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _byte_on_line)
        nothing
    end
    function set_line_offset(instance::GtkTextIter, _char_on_line)
        ret = ccall(("gtk_text_iter_set_line_offset", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _char_on_line)
        nothing
    end
    function set_offset(instance::GtkTextIter, _char_offset)
        ret = ccall(("gtk_text_iter_set_offset", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _char_offset)
        nothing
    end
    function set_visible_line_index(instance::GtkTextIter, _byte_on_line)
        ret = ccall(("gtk_text_iter_set_visible_line_index", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _byte_on_line)
        nothing
    end
    function set_visible_line_offset(instance::GtkTextIter, _char_on_line)
        ret = ccall(("gtk_text_iter_set_visible_line_offset", "libgtk-4.so.1"), Nothing, (Ptr{GtkTextIter}, Int32), instance, _char_on_line)
        nothing
    end
    function starts_line(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_starts_line", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function starts_sentence(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_starts_sentence", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function starts_tag(instance::GtkTextIter, _tag::Maybe(GtkTextTag))
        _tag = if _tag == nothing
                C_NULL
            else
                _tag
            end
        ret = ccall(("gtk_text_iter_starts_tag", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function starts_word(instance::GtkTextIter)
        ret = ccall(("gtk_text_iter_starts_word", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function toggles_tag(instance::GtkTextIter, _tag::Maybe(GtkTextTag))
        _tag = if _tag == nothing
                C_NULL
            else
                _tag
            end
        ret = ccall(("gtk_text_iter_toggles_tag", "libgtk-4.so.1"), Cint, (Ptr{GtkTextIter}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function copy(instance::GtkTreeIter)
        ret = ccall(("gtk_tree_iter_copy", "libgtk-4.so.1"), Ptr{GtkTreeIter}, (Ptr{GtkTreeIter},), instance)
        ret2 = convert(GtkTreeIter, ret, true)
        ret2
    end
    function free(instance::GtkTreeIter)
        ret = ccall(("gtk_tree_iter_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreeIter},), instance)
        nothing
    end
    function TreePath()
        ret = ccall(("gtk_tree_path_new", "libgtk-4.so.1"), Ptr{GtkTreePath}, ())
        ret2 = convert(GtkTreePath, ret, true)
        ret2
    end
    function TreePath_new_first()
        ret = ccall(("gtk_tree_path_new_first", "libgtk-4.so.1"), Ptr{GtkTreePath}, ())
        ret2 = convert(GtkTreePath, ret, true)
        ret2
    end
    function TreePath_new_from_indices(_indices)
        _indices = convert(Vector{Int32}, _indices)
        _length = length(_indices)
        ret = ccall(("gtk_tree_path_new_from_indicesv", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{Int32}, UInt64), _indices, _length)
        ret2 = convert(GtkTreePath, ret, true)
        ret2
    end
    function TreePath_new_from_string(_path)
        ret = ccall(("gtk_tree_path_new_from_string", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{UInt8},), _path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function append_index(instance::GtkTreePath, _index_)
        ret = ccall(("gtk_tree_path_append_index", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreePath}, Int32), instance, _index_)
        nothing
    end
    function compare(instance::GtkTreePath, _b::GtkTreePath)
        ret = ccall(("gtk_tree_path_compare", "libgtk-4.so.1"), Int32, (Ptr{GtkTreePath}, Ptr{GtkTreePath}), instance, _b)
        ret
    end
    function copy(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_copy", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GtkTreePath},), instance)
        ret2 = convert(GtkTreePath, ret, true)
        ret2
    end
    function down(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_down", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreePath},), instance)
        nothing
    end
    function free(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreePath},), instance)
        nothing
    end
    function get_depth(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_get_depth", "libgtk-4.so.1"), Int32, (Ptr{GtkTreePath},), instance)
        ret
    end
    function get_indices(instance::GtkTreePath)
        m_depth = Ref{Int32}()
        ret = ccall(("gtk_tree_path_get_indices_with_depth", "libgtk-4.so.1"), Ptr{Int32}, (Ptr{GtkTreePath}, Ptr{Int32}), instance, m_depth)
        _depth = m_depth[]
        ret
    end
    function is_ancestor(instance::GtkTreePath, _descendant::GtkTreePath)
        ret = ccall(("gtk_tree_path_is_ancestor", "libgtk-4.so.1"), Cint, (Ptr{GtkTreePath}, Ptr{GtkTreePath}), instance, _descendant)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_descendant(instance::GtkTreePath, _ancestor::GtkTreePath)
        ret = ccall(("gtk_tree_path_is_descendant", "libgtk-4.so.1"), Cint, (Ptr{GtkTreePath}, Ptr{GtkTreePath}), instance, _ancestor)
        ret2 = convert(Bool, ret)
        ret2
    end
    function next(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_next", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreePath},), instance)
        nothing
    end
    function prepend_index(instance::GtkTreePath, _index_)
        ret = ccall(("gtk_tree_path_prepend_index", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreePath}, Int32), instance, _index_)
        nothing
    end
    function prev(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_prev", "libgtk-4.so.1"), Cint, (Ptr{GtkTreePath},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function to_string(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_to_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GtkTreePath},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function up(instance::GtkTreePath)
        ret = ccall(("gtk_tree_path_up", "libgtk-4.so.1"), Cint, (Ptr{GtkTreePath},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function TreeRowReference(_model, _path::GtkTreePath)
        ret = ccall(("gtk_tree_row_reference_new", "libgtk-4.so.1"), Ptr{GtkTreeRowReference}, (Ptr{GObject}, Ptr{GtkTreePath}), _model, _path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeRowReference, ret, true)
            end
        ret2
    end
    function TreeRowReference_new_proxy(_proxy::GObject, _model, _path::GtkTreePath)
        ret = ccall(("gtk_tree_row_reference_new_proxy", "libgtk-4.so.1"), Ptr{GtkTreeRowReference}, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreePath}), _proxy, _model, _path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeRowReference, ret, true)
            end
        ret2
    end
    function copy(instance::GtkTreeRowReference)
        ret = ccall(("gtk_tree_row_reference_copy", "libgtk-4.so.1"), Ptr{GtkTreeRowReference}, (Ptr{GtkTreeRowReference},), instance)
        ret2 = convert(GtkTreeRowReference, ret, true)
        ret2
    end
    function free(instance::GtkTreeRowReference)
        ret = ccall(("gtk_tree_row_reference_free", "libgtk-4.so.1"), Nothing, (Ptr{GtkTreeRowReference},), instance)
        nothing
    end
    function get_model(instance::GtkTreeRowReference)
        ret = ccall(("gtk_tree_row_reference_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GtkTreeRowReference},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_path(instance::GtkTreeRowReference)
        ret = ccall(("gtk_tree_row_reference_get_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GtkTreeRowReference},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function valid(instance::GtkTreeRowReference)
        ret = ccall(("gtk_tree_row_reference_valid", "libgtk-4.so.1"), Cint, (Ptr{GtkTreeRowReference},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ATContext_create(_accessible_role, _accessible, _display::GdkDisplay)
        ret = ccall(("gtk_at_context_create", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Ptr{GObject}, Ptr{GObject}), _accessible_role, _accessible, _display)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkATContext, ret, true)
            end
        ret2
    end
    function get_accessible(instance::GtkATContext)
        ret = ccall(("gtk_at_context_get_accessible", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_accessible_role(instance::GtkATContext)
        ret = ccall(("gtk_at_context_get_accessible_role", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = AccessibleRole(ret)
        ret2
    end
    function AboutDialog()
        ret = ccall(("gtk_about_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_credit_section(instance::GtkAboutDialog, _section_name, _people)
        ret = ccall(("gtk_about_dialog_add_credit_section", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{UInt8}}), instance, _section_name, _people)
        nothing
    end
    function get_artists(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_artists", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret
    end
    function get_authors(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_authors", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret
    end
    function get_comments(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_comments", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_copyright(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_copyright", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_documenters(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_documenters", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret
    end
    function get_license(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_license", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_license_type(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_license_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = License(ret)
        ret2
    end
    function get_logo(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_logo", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_logo_icon_name(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_logo_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_program_name(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_program_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_system_information(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_system_information", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_translator_credits(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_translator_credits", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_version(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_version", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_website(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_website", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_website_label(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_website_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_wrap_license(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_wrap_license", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_artists(instance::GtkAboutDialog, _artists)
        ret = ccall(("gtk_about_dialog_set_artists", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}), instance, _artists)
        nothing
    end
    function set_authors(instance::GtkAboutDialog, _authors)
        ret = ccall(("gtk_about_dialog_set_authors", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}), instance, _authors)
        nothing
    end
    function set_comments(instance::GtkAboutDialog, _comments)
        _comments = if _comments == nothing
                C_NULL
            else
                _comments
            end
        ret = ccall(("gtk_about_dialog_set_comments", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _comments)
        nothing
    end
    function set_copyright(instance::GtkAboutDialog, _copyright)
        _copyright = if _copyright == nothing
                C_NULL
            else
                _copyright
            end
        ret = ccall(("gtk_about_dialog_set_copyright", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _copyright)
        nothing
    end
    function set_documenters(instance::GtkAboutDialog, _documenters)
        ret = ccall(("gtk_about_dialog_set_documenters", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}), instance, _documenters)
        nothing
    end
    function set_license(instance::GtkAboutDialog, _license)
        _license = if _license == nothing
                C_NULL
            else
                _license
            end
        ret = ccall(("gtk_about_dialog_set_license", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _license)
        nothing
    end
    function set_license_type(instance::GtkAboutDialog, _license_type)
        ret = ccall(("gtk_about_dialog_set_license_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _license_type)
        nothing
    end
    function set_logo(instance::GtkAboutDialog, _logo)
        _logo = if _logo == nothing
                C_NULL
            else
                _logo
            end
        ret = ccall(("gtk_about_dialog_set_logo", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _logo)
        nothing
    end
    function set_logo_icon_name(instance::GtkAboutDialog, _icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_about_dialog_set_logo_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _icon_name)
        nothing
    end
    function set_program_name(instance::GtkAboutDialog, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_about_dialog_set_program_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_system_information(instance::GtkAboutDialog, _system_information)
        _system_information = if _system_information == nothing
                C_NULL
            else
                _system_information
            end
        ret = ccall(("gtk_about_dialog_set_system_information", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _system_information)
        nothing
    end
    function set_translator_credits(instance::GtkAboutDialog, _translator_credits)
        _translator_credits = if _translator_credits == nothing
                C_NULL
            else
                _translator_credits
            end
        ret = ccall(("gtk_about_dialog_set_translator_credits", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _translator_credits)
        nothing
    end
    function set_version(instance::GtkAboutDialog, _version)
        _version = if _version == nothing
                C_NULL
            else
                _version
            end
        ret = ccall(("gtk_about_dialog_set_version", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _version)
        nothing
    end
    function set_website(instance::GtkAboutDialog, _website)
        _website = if _website == nothing
                C_NULL
            else
                _website
            end
        ret = ccall(("gtk_about_dialog_set_website", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _website)
        nothing
    end
    function set_website_label(instance::GtkAboutDialog, _website_label)
        ret = ccall(("gtk_about_dialog_set_website_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _website_label)
        nothing
    end
    function set_wrap_license(instance::GtkAboutDialog, _wrap_license)
        ret = ccall(("gtk_about_dialog_set_wrap_license", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _wrap_license)
        nothing
    end
    function ActionBar()
        ret = ccall(("gtk_action_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_center_widget(instance::GtkActionBar)
        ret = ccall(("gtk_action_bar_get_center_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_revealed(instance::GtkActionBar)
        ret = ccall(("gtk_action_bar_get_revealed", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function pack_end(instance::GtkActionBar, _child::GtkWidget)
        ret = ccall(("gtk_action_bar_pack_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function pack_start(instance::GtkActionBar, _child::GtkWidget)
        ret = ccall(("gtk_action_bar_pack_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::GtkActionBar, _child::GtkWidget)
        ret = ccall(("gtk_action_bar_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_center_widget(instance::GtkActionBar, _center_widget::Maybe(GtkWidget))
        _center_widget = if _center_widget == nothing
                C_NULL
            else
                _center_widget
            end
        ret = ccall(("gtk_action_bar_set_center_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _center_widget)
        nothing
    end
    function set_revealed(instance::GtkActionBar, _revealed)
        ret = ccall(("gtk_action_bar_set_revealed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _revealed)
        nothing
    end
    function get()
        ret = ccall(("gtk_activate_action_get", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkActivateAction, ret, false)
        ret2
    end
    function Adjustment(_value, _lower, _upper, _step_increment, _page_increment, _page_size)
        ret = ccall(("gtk_adjustment_new", "libgtk-4.so.1"), Ptr{GObject}, (Float64, Float64, Float64, Float64, Float64, Float64), _value, _lower, _upper, _step_increment, _page_increment, _page_size)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function clamp_page(instance::GtkAdjustment, _lower, _upper)
        ret = ccall(("gtk_adjustment_clamp_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64), instance, _lower, _upper)
        nothing
    end
    function configure(instance::GtkAdjustment, _value, _lower, _upper, _step_increment, _page_increment, _page_size)
        ret = ccall(("gtk_adjustment_configure", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64, Float64, Float64, Float64, Float64), instance, _value, _lower, _upper, _step_increment, _page_increment, _page_size)
        nothing
    end
    function get_lower(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_lower", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_minimum_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_minimum_increment", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_page_increment", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_size(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_page_size", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_step_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_step_increment", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_upper(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_upper", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_lower(instance::GtkAdjustment, _lower)
        ret = ccall(("gtk_adjustment_set_lower", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _lower)
        nothing
    end
    function set_page_increment(instance::GtkAdjustment, _page_increment)
        ret = ccall(("gtk_adjustment_set_page_increment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _page_increment)
        nothing
    end
    function set_page_size(instance::GtkAdjustment, _page_size)
        ret = ccall(("gtk_adjustment_set_page_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _page_size)
        nothing
    end
    function set_step_increment(instance::GtkAdjustment, _step_increment)
        ret = ccall(("gtk_adjustment_set_step_increment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _step_increment)
        nothing
    end
    function set_upper(instance::GtkAdjustment, _upper)
        ret = ccall(("gtk_adjustment_set_upper", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _upper)
        nothing
    end
    function set_value(instance::GtkAdjustment, _value)
        ret = ccall(("gtk_adjustment_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function AlternativeTrigger(_first::GtkShortcutTrigger, _second::GtkShortcutTrigger)
        ret = ccall(("gtk_alternative_trigger_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _first, _second)
        ret2 = convert(GtkShortcutTrigger, ret, true)
        ret2
    end
    function get_first(instance::GtkAlternativeTrigger)
        ret = ccall(("gtk_alternative_trigger_get_first", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkShortcutTrigger, ret, false)
        ret2
    end
    function get_second(instance::GtkAlternativeTrigger)
        ret = ccall(("gtk_alternative_trigger_get_second", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkShortcutTrigger, ret, false)
        ret2
    end
    function AnyFilter()
        ret = ccall(("gtk_any_filter_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkAnyFilter, ret, true)
        ret2
    end
    function AppChooserButton(_content_type)
        ret = ccall(("gtk_app_chooser_button_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _content_type)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append_custom_item(instance::GtkAppChooserButton, _name, _label, _icon)
        ret = ccall(("gtk_app_chooser_button_append_custom_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}, Ptr{GObject}), instance, _name, _label, _icon)
        nothing
    end
    function append_separator(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_append_separator", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_heading(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_heading", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_modal(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_modal", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_default_item(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_show_default_item", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_dialog_item(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_show_dialog_item", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active_custom_item(instance::GtkAppChooserButton, _name)
        ret = ccall(("gtk_app_chooser_button_set_active_custom_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_heading(instance::GtkAppChooserButton, _heading)
        ret = ccall(("gtk_app_chooser_button_set_heading", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _heading)
        nothing
    end
    function set_modal(instance::GtkAppChooserButton, _modal)
        ret = ccall(("gtk_app_chooser_button_set_modal", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_show_default_item(instance::GtkAppChooserButton, _setting)
        ret = ccall(("gtk_app_chooser_button_set_show_default_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_dialog_item(instance::GtkAppChooserButton, _setting)
        ret = ccall(("gtk_app_chooser_button_set_show_dialog_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function AppChooserDialog(_parent::Maybe(GtkWindow), _flags, _file)
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_app_chooser_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, Ptr{GObject}), _parent, _flags, _file)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function AppChooserDialog_new_for_content_type(_parent::Maybe(GtkWindow), _flags, _content_type)
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_app_chooser_dialog_new_for_content_type", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, Ptr{UInt8}), _parent, _flags, _content_type)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_heading(instance::GtkAppChooserDialog)
        ret = ccall(("gtk_app_chooser_dialog_get_heading", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_widget(instance::GtkAppChooserDialog)
        ret = ccall(("gtk_app_chooser_dialog_get_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_heading(instance::GtkAppChooserDialog, _heading)
        ret = ccall(("gtk_app_chooser_dialog_set_heading", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _heading)
        nothing
    end
    function AppChooserWidget(_content_type)
        ret = ccall(("gtk_app_chooser_widget_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _content_type)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_default_text(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_default_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_show_all(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_all", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_default(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_fallback(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_fallback", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_other(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_other", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_recommended(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_recommended", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_text(instance::GtkAppChooserWidget, _text)
        ret = ccall(("gtk_app_chooser_widget_set_default_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_show_all(instance::GtkAppChooserWidget, _setting)
        ret = ccall(("gtk_app_chooser_widget_set_show_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_default(instance::GtkAppChooserWidget, _setting)
        ret = ccall(("gtk_app_chooser_widget_set_show_default", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_fallback(instance::GtkAppChooserWidget, _setting)
        ret = ccall(("gtk_app_chooser_widget_set_show_fallback", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_other(instance::GtkAppChooserWidget, _setting)
        ret = ccall(("gtk_app_chooser_widget_set_show_other", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_recommended(instance::GtkAppChooserWidget, _setting)
        ret = ccall(("gtk_app_chooser_widget_set_show_recommended", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function Application(_application_id, _flags)
        _application_id = if _application_id == nothing
                C_NULL
            else
                _application_id
            end
        ret = ccall(("gtk_application_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Int32), _application_id, _flags)
        ret2 = convert(GtkApplication, ret, true)
        ret2
    end
    function add_window(instance::GtkApplication, _window::GtkWindow)
        ret = ccall(("gtk_application_add_window", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _window)
        nothing
    end
    function get_accels_for_action(instance::GtkApplication, _detailed_action_name)
        ret = ccall(("gtk_application_get_accels_for_action", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject}, Ptr{UInt8}), instance, _detailed_action_name)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        ret2
    end
    function get_actions_for_accel(instance::GtkApplication, _accel)
        ret = ccall(("gtk_application_get_actions_for_accel", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject}, Ptr{UInt8}), instance, _accel)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        ret2
    end
    function get_active_window(instance::GtkApplication)
        ret = ccall(("gtk_application_get_active_window", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_menu_by_id(instance::GtkApplication, _id)
        ret = ccall(("gtk_application_get_menu_by_id", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _id)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenu, ret, false)
            end
        ret2
    end
    function get_menubar(instance::GtkApplication)
        ret = ccall(("gtk_application_get_menubar", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_window_by_id(instance::GtkApplication, _id)
        ret = ccall(("gtk_application_get_window_by_id", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _id)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_windows(instance::GtkApplication)
        ret = ccall(("gtk_application_get_windows", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function inhibit(instance::GtkApplication, _window::Maybe(GtkWindow), _flags, _reason)
        _window = if _window == nothing
                C_NULL
            else
                _window
            end
        _reason = if _reason == nothing
                C_NULL
            else
                _reason
            end
        ret = ccall(("gtk_application_inhibit", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, Ptr{GObject}, Int32, Ptr{UInt8}), instance, _window, _flags, _reason)
        ret
    end
    function list_action_descriptions(instance::GtkApplication)
        ret = ccall(("gtk_application_list_action_descriptions", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        ret2
    end
    function remove_window(instance::GtkApplication, _window::GtkWindow)
        ret = ccall(("gtk_application_remove_window", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _window)
        nothing
    end
    function set_accels_for_action(instance::GtkApplication, _detailed_action_name, _accels)
        ret = ccall(("gtk_application_set_accels_for_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{UInt8}}), instance, _detailed_action_name, _accels)
        nothing
    end
    function set_menubar(instance::GtkApplication, _menubar::Maybe(GMenuModel))
        _menubar = if _menubar == nothing
                C_NULL
            else
                _menubar
            end
        ret = ccall(("gtk_application_set_menubar", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menubar)
        nothing
    end
    function uninhibit(instance::GtkApplication, _cookie)
        ret = ccall(("gtk_application_uninhibit", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _cookie)
        nothing
    end
    function ApplicationWindow(_application::GtkApplication)
        ret = ccall(("gtk_application_window_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _application)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_help_overlay(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_help_overlay", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkShortcutsWindow, ret, false)
            end
        ret2
    end
    function get_id(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_id", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_menubar(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_show_menubar", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_help_overlay(instance::GtkApplicationWindow, _help_overlay::Maybe(GtkShortcutsWindow))
        _help_overlay = if _help_overlay == nothing
                C_NULL
            else
                _help_overlay
            end
        ret = ccall(("gtk_application_window_set_help_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _help_overlay)
        nothing
    end
    function set_show_menubar(instance::GtkApplicationWindow, _show_menubar)
        ret = ccall(("gtk_application_window_set_show_menubar", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_menubar)
        nothing
    end
    function AspectFrame(_xalign, _yalign, _ratio, _obey_child)
        ret = ccall(("gtk_aspect_frame_new", "libgtk-4.so.1"), Ptr{GObject}, (Float32, Float32, Float32, Cint), _xalign, _yalign, _ratio, _obey_child)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkAspectFrame)
        ret = ccall(("gtk_aspect_frame_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_obey_child(instance::GtkAspectFrame)
        ret = ccall(("gtk_aspect_frame_get_obey_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_ratio(instance::GtkAspectFrame)
        ret = ccall(("gtk_aspect_frame_get_ratio", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_xalign(instance::GtkAspectFrame)
        ret = ccall(("gtk_aspect_frame_get_xalign", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_yalign(instance::GtkAspectFrame)
        ret = ccall(("gtk_aspect_frame_get_yalign", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function set_child(instance::GtkAspectFrame, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_aspect_frame_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_obey_child(instance::GtkAspectFrame, _obey_child)
        ret = ccall(("gtk_aspect_frame_set_obey_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _obey_child)
        nothing
    end
    function set_ratio(instance::GtkAspectFrame, _ratio)
        ret = ccall(("gtk_aspect_frame_set_ratio", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _ratio)
        nothing
    end
    function set_xalign(instance::GtkAspectFrame, _xalign)
        ret = ccall(("gtk_aspect_frame_set_xalign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_yalign(instance::GtkAspectFrame, _yalign)
        ret = ccall(("gtk_aspect_frame_set_yalign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _yalign)
        nothing
    end
    function Assistant()
        ret = ccall(("gtk_assistant_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_action_widget(instance::GtkAssistant, _child::GtkWidget)
        ret = ccall(("gtk_assistant_add_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function append_page(instance::GtkAssistant, _page::GtkWidget)
        ret = ccall(("gtk_assistant_append_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret
    end
    function commit(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_commit", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_current_page(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_get_current_page", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_pages(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_get_n_pages", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_nth_page(instance::GtkAssistant, _page_num)
        ret = ccall(("gtk_assistant_get_nth_page", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _page_num)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_page(instance::GtkAssistant, _child::GtkWidget)
        ret = ccall(("gtk_assistant_get_page", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(GtkAssistantPage, ret, false)
        ret2
    end
    function get_page_complete(instance::GtkAssistant, _page::GtkWidget)
        ret = ccall(("gtk_assistant_get_page_complete", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_page_title(instance::GtkAssistant, _page::GtkWidget)
        ret = ccall(("gtk_assistant_get_page_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_page_type(instance::GtkAssistant, _page::GtkWidget)
        ret = ccall(("gtk_assistant_get_page_type", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = AssistantPageType(ret)
        ret2
    end
    function get_pages(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_get_pages", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function insert_page(instance::GtkAssistant, _page::GtkWidget, _position)
        ret = ccall(("gtk_assistant_insert_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _page, _position)
        ret
    end
    function next_page(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_next_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function prepend_page(instance::GtkAssistant, _page::GtkWidget)
        ret = ccall(("gtk_assistant_prepend_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret
    end
    function previous_page(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_previous_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_action_widget(instance::GtkAssistant, _child::GtkWidget)
        ret = ccall(("gtk_assistant_remove_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove_page(instance::GtkAssistant, _page_num)
        ret = ccall(("gtk_assistant_remove_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function set_current_page(instance::GtkAssistant, _page_num)
        ret = ccall(("gtk_assistant_set_current_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function set_forward_page_func(instance::GtkAssistant, _page_func::Maybe(Function), _data::Maybe(Nothing), _destroy::Function)
        _page_func = if _page_func == nothing
                C_NULL
            else
                _page_func
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_assistant_set_forward_page_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _page_func, _data, _destroy)
        nothing
    end
    function set_page_complete(instance::GtkAssistant, _page::GtkWidget, _complete)
        ret = ccall(("gtk_assistant_set_page_complete", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _page, _complete)
        nothing
    end
    function set_page_title(instance::GtkAssistant, _page::GtkWidget, _title)
        ret = ccall(("gtk_assistant_set_page_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _page, _title)
        nothing
    end
    function set_page_type(instance::GtkAssistant, _page::GtkWidget, _type)
        ret = ccall(("gtk_assistant_set_page_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _page, _type)
        nothing
    end
    function update_buttons_state(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_update_buttons_state", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_child(instance::GtkAssistantPage)
        ret = ccall(("gtk_assistant_page_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function BinLayout()
        ret = ccall(("gtk_bin_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function BookmarkList(_filename, _attributes)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        _attributes = if _attributes == nothing
                C_NULL
            else
                _attributes
            end
        ret = ccall(("gtk_bookmark_list_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{UInt8}), _filename, _attributes)
        ret2 = convert(GtkBookmarkList, ret, true)
        ret2
    end
    function get_attributes(instance::GtkBookmarkList)
        ret = ccall(("gtk_bookmark_list_get_attributes", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_filename(instance::GtkBookmarkList)
        ret = ccall(("gtk_bookmark_list_get_filename", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_io_priority(instance::GtkBookmarkList)
        ret = ccall(("gtk_bookmark_list_get_io_priority", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function is_loading(instance::GtkBookmarkList)
        ret = ccall(("gtk_bookmark_list_is_loading", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_attributes(instance::GtkBookmarkList, _attributes)
        _attributes = if _attributes == nothing
                C_NULL
            else
                _attributes
            end
        ret = ccall(("gtk_bookmark_list_set_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _attributes)
        nothing
    end
    function set_io_priority(instance::GtkBookmarkList, _io_priority)
        ret = ccall(("gtk_bookmark_list_set_io_priority", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _io_priority)
        nothing
    end
    function Box(_orientation, _spacing)
        ret = ccall(("gtk_box_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Int32), _orientation, _spacing)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append(instance::GtkBox, _child::GtkWidget)
        ret = ccall(("gtk_box_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function get_baseline_position(instance::GtkBox)
        ret = ccall(("gtk_box_get_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_homogeneous(instance::GtkBox)
        ret = ccall(("gtk_box_get_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_spacing(instance::GtkBox)
        ret = ccall(("gtk_box_get_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function insert_child_after(instance::GtkBox, _child::GtkWidget, _sibling::Maybe(GtkWidget))
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_box_insert_child_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _sibling)
        nothing
    end
    function prepend(instance::GtkBox, _child::GtkWidget)
        ret = ccall(("gtk_box_prepend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::GtkBox, _child::GtkWidget)
        ret = ccall(("gtk_box_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function reorder_child_after(instance::GtkBox, _child::GtkWidget, _sibling::Maybe(GtkWidget))
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_box_reorder_child_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _sibling)
        nothing
    end
    function set_baseline_position(instance::GtkBox, _position)
        ret = ccall(("gtk_box_set_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_homogeneous(instance::GtkBox, _homogeneous)
        ret = ccall(("gtk_box_set_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_spacing(instance::GtkBox, _spacing)
        ret = ccall(("gtk_box_set_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function BoxLayout(_orientation)
        ret = ccall(("gtk_box_layout_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _orientation)
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function get_baseline_position(instance::GtkBoxLayout)
        ret = ccall(("gtk_box_layout_get_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_homogeneous(instance::GtkBoxLayout)
        ret = ccall(("gtk_box_layout_get_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_spacing(instance::GtkBoxLayout)
        ret = ccall(("gtk_box_layout_get_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_baseline_position(instance::GtkBoxLayout, _position)
        ret = ccall(("gtk_box_layout_set_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_homogeneous(instance::GtkBoxLayout, _homogeneous)
        ret = ccall(("gtk_box_layout_set_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_spacing(instance::GtkBoxLayout, _spacing)
        ret = ccall(("gtk_box_layout_set_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function Builder()
        ret = ccall(("gtk_builder_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkBuilder, ret, true)
        ret2
    end
    function Builder_new_from_file(_filename)
        ret = ccall(("gtk_builder_new_from_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _filename)
        ret2 = convert(GtkBuilder, ret, true)
        ret2
    end
    function Builder_new_from_resource(_resource_path)
        ret = ccall(("gtk_builder_new_from_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GtkBuilder, ret, true)
        ret2
    end
    function Builder_new_from_string(_string, _length)
        ret = ccall(("gtk_builder_new_from_string", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Int64), _string, _length)
        ret2 = convert(GtkBuilder, ret, true)
        ret2
    end
    function add_from_file(instance::GtkBuilder, _filename)
        err = err_buf()
        ret = ccall(("gtk_builder_add_from_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _filename, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function add_from_resource(instance::GtkBuilder, _resource_path)
        err = err_buf()
        ret = ccall(("gtk_builder_add_from_resource", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _resource_path, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function add_from_string(instance::GtkBuilder, _buffer, _length)
        err = err_buf()
        ret = ccall(("gtk_builder_add_from_string", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Int64, Ptr{Ptr{GError}}), instance, _buffer, _length, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function add_objects_from_file(instance::GtkBuilder, _filename, _object_ids)
        err = err_buf()
        ret = ccall(("gtk_builder_add_objects_from_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{UInt8}}, Ptr{Ptr{GError}}), instance, _filename, _object_ids, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function add_objects_from_resource(instance::GtkBuilder, _resource_path, _object_ids)
        err = err_buf()
        ret = ccall(("gtk_builder_add_objects_from_resource", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{UInt8}}, Ptr{Ptr{GError}}), instance, _resource_path, _object_ids, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function add_objects_from_string(instance::GtkBuilder, _buffer, _length, _object_ids)
        err = err_buf()
        ret = ccall(("gtk_builder_add_objects_from_string", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Int64, Ptr{Ptr{UInt8}}, Ptr{Ptr{GError}}), instance, _buffer, _length, _object_ids, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function expose_object(instance::GtkBuilder, _name, _object::GObject)
        ret = ccall(("gtk_builder_expose_object", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{GObject}), instance, _name, _object)
        nothing
    end
    function extend_with_template(instance::GtkBuilder, _object::GObject, _template_type, _buffer, _length)
        err = err_buf()
        ret = ccall(("gtk_builder_extend_with_template", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, UInt64, Ptr{UInt8}, Int64, Ptr{Ptr{GError}}), instance, _object, _template_type, _buffer, _length, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_current_object(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_current_object", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_object(instance::GtkBuilder, _name)
        ret = ccall(("gtk_builder_get_object", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_objects(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_objects", "libgtk-4.so.1"), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_scope(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_scope", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_translation_domain(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_translation_domain", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_type_from_name(instance::GtkBuilder, _type_name)
        ret = ccall(("gtk_builder_get_type_from_name", "libgtk-4.so.1"), UInt64, (Ptr{GObject}, Ptr{UInt8}), instance, _type_name)
        ret
    end
    function set_current_object(instance::GtkBuilder, _current_object::Maybe(GObject))
        _current_object = if _current_object == nothing
                C_NULL
            else
                _current_object
            end
        ret = ccall(("gtk_builder_set_current_object", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _current_object)
        nothing
    end
    function set_scope(instance::GtkBuilder, _scope)
        _scope = if _scope == nothing
                C_NULL
            else
                _scope
            end
        ret = ccall(("gtk_builder_set_scope", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _scope)
        nothing
    end
    function set_translation_domain(instance::GtkBuilder, _domain)
        _domain = if _domain == nothing
                C_NULL
            else
                _domain
            end
        ret = ccall(("gtk_builder_set_translation_domain", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _domain)
        nothing
    end
    function value_from_string(instance::GtkBuilder, _pspec::GParamSpec, _string)
        m_value = Ref{Ptr{GValue}}()
        err = err_buf()
        ret = ccall(("gtk_builder_value_from_string", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GValue}}, Ptr{Ptr{GError}}), instance, _pspec, _string, m_value, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        _value = m_value[]
        _value = convert(GValue, _value, false)
        (ret2, _value)
    end
    function value_from_string_type(instance::GtkBuilder, _type, _string)
        m_value = Ref{Ptr{GValue}}()
        err = err_buf()
        ret = ccall(("gtk_builder_value_from_string_type", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt64, Ptr{UInt8}, Ptr{Ptr{GValue}}, Ptr{Ptr{GError}}), instance, _type, _string, m_value, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        _value = m_value[]
        _value = convert(GValue, _value, false)
        (ret2, _value)
    end
    function BuilderCScope()
        ret = ccall(("gtk_builder_cscope_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkBuilderCScope, ret, true)
        ret2
    end
    function add_callback_symbol(instance::GtkBuilderCScope, _callback_name, _callback_symbol::Function)
        _callback_symbol = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing ()
            end
        ret = ccall(("gtk_builder_cscope_add_callback_symbol", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{Nothing}), instance, _callback_name, _callback_symbol)
        nothing
    end
    function BuilderListItemFactory_new_from_bytes(_scope, _bytes::GBytes)
        _scope = if _scope == nothing
                C_NULL
            else
                _scope
            end
        ret = ccall(("gtk_builder_list_item_factory_new_from_bytes", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GBytes}), _scope, _bytes)
        ret2 = convert(GtkListItemFactory, ret, true)
        ret2
    end
    function BuilderListItemFactory_new_from_resource(_scope, _resource_path)
        _scope = if _scope == nothing
                C_NULL
            else
                _scope
            end
        ret = ccall(("gtk_builder_list_item_factory_new_from_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), _scope, _resource_path)
        ret2 = convert(GtkListItemFactory, ret, true)
        ret2
    end
    function get_bytes(instance::GtkBuilderListItemFactory)
        ret = ccall(("gtk_builder_list_item_factory_get_bytes", "libgtk-4.so.1"), Ptr{GBytes}, (Ptr{GObject},), instance)
        ret2 = convert(GBytes, ret, false)
        ret2
    end
    function get_resource(instance::GtkBuilderListItemFactory)
        ret = ccall(("gtk_builder_list_item_factory_get_resource", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_scope(instance::GtkBuilderListItemFactory)
        ret = ccall(("gtk_builder_list_item_factory_get_scope", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function Button()
        ret = ccall(("gtk_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Button_new_from_icon_name(_icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_button_new_from_icon_name", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _icon_name)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Button_new_with_label(_label)
        ret = ccall(("gtk_button_new_with_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Button_new_with_mnemonic(_label)
        ret = ccall(("gtk_button_new_with_mnemonic", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkButton)
        ret = ccall(("gtk_button_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_has_frame(instance::GtkButton)
        ret = ccall(("gtk_button_get_has_frame", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_name(instance::GtkButton)
        ret = ccall(("gtk_button_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label(instance::GtkButton)
        ret = ccall(("gtk_button_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_underline(instance::GtkButton)
        ret = ccall(("gtk_button_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_child(instance::GtkButton, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_button_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_has_frame(instance::GtkButton, _has_frame)
        ret = ccall(("gtk_button_set_has_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_frame)
        nothing
    end
    function set_icon_name(instance::GtkButton, _icon_name)
        ret = ccall(("gtk_button_set_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _icon_name)
        nothing
    end
    function set_label(instance::GtkButton, _label)
        ret = ccall(("gtk_button_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_use_underline(instance::GtkButton, _use_underline)
        ret = ccall(("gtk_button_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function Calendar()
        ret = ccall(("gtk_calendar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function clear_marks(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_clear_marks", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_date(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_date", "libgtk-4.so.1"), Ptr{GDateTime}, (Ptr{GObject},), instance)
        ret2 = convert(GDateTime, ret, true)
        ret2
    end
    function get_day_is_marked(instance::GtkCalendar, _day)
        ret = ccall(("gtk_calendar_get_day_is_marked", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32), instance, _day)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_day_names(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_show_day_names", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_heading(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_show_heading", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_week_numbers(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_show_week_numbers", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function mark_day(instance::GtkCalendar, _day)
        ret = ccall(("gtk_calendar_mark_day", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _day)
        nothing
    end
    function select_day(instance::GtkCalendar, _date::GDateTime)
        ret = ccall(("gtk_calendar_select_day", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GDateTime}), instance, _date)
        nothing
    end
    function set_show_day_names(instance::GtkCalendar, _value)
        ret = ccall(("gtk_calendar_set_show_day_names", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _value)
        nothing
    end
    function set_show_heading(instance::GtkCalendar, _value)
        ret = ccall(("gtk_calendar_set_show_heading", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _value)
        nothing
    end
    function set_show_week_numbers(instance::GtkCalendar, _value)
        ret = ccall(("gtk_calendar_set_show_week_numbers", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _value)
        nothing
    end
    function unmark_day(instance::GtkCalendar, _day)
        ret = ccall(("gtk_calendar_unmark_day", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _day)
        nothing
    end
    function CallbackAction(_callback::Maybe(Function), _data::Maybe(Nothing), _destroy::Function)
        _callback = if _callback == nothing
                C_NULL
            else
                _callback
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_callback_action_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _callback, _data, _destroy)
        ret2 = convert(GtkCallbackAction, ret, true)
        ret2
    end
    function add(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_add", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        nothing
    end
    function add_focus_sibling(instance::GtkCellArea, _renderer::GtkCellRenderer, _sibling::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_add_focus_sibling", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _renderer, _sibling)
        nothing
    end
    function apply_attributes(instance::GtkCellArea, _tree_model, _iter::GtkTreeIter, _is_expander, _is_expanded)
        ret = ccall(("gtk_cell_area_apply_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreeIter}, Cint, Cint), instance, _tree_model, _iter, _is_expander, _is_expanded)
        nothing
    end
    function attribute_connect(instance::GtkCellArea, _renderer::GtkCellRenderer, _attribute, _column)
        ret = ccall(("gtk_cell_area_attribute_connect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Int32), instance, _renderer, _attribute, _column)
        nothing
    end
    function attribute_disconnect(instance::GtkCellArea, _renderer::GtkCellRenderer, _attribute)
        ret = ccall(("gtk_cell_area_attribute_disconnect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _renderer, _attribute)
        nothing
    end
    function attribute_get_column(instance::GtkCellArea, _renderer::GtkCellRenderer, _attribute)
        ret = ccall(("gtk_cell_area_attribute_get_column", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _renderer, _attribute)
        ret
    end
    function cell_get_property(instance::GtkCellArea, _renderer::GtkCellRenderer, _property_name, _value::GValue)
        ret = ccall(("gtk_cell_area_cell_get_property", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Ptr{GValue}), instance, _renderer, _property_name, _value)
        nothing
    end
    function cell_set_property(instance::GtkCellArea, _renderer::GtkCellRenderer, _property_name, _value::GValue)
        ret = ccall(("gtk_cell_area_cell_set_property", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Ptr{GValue}), instance, _renderer, _property_name, _value)
        nothing
    end
    function copy_context(instance::GtkCellArea, _context::GtkCellAreaContext)
        ret = ccall(("gtk_cell_area_copy_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _context)
        ret2 = convert(GtkCellAreaContext, ret, true)
        ret2
    end
    function create_context(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_create_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellAreaContext, ret, true)
        ret2
    end
    function focus(instance::GtkCellArea, _direction)
        ret = ccall(("gtk_cell_area_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _direction)
        ret2 = convert(Bool, ret)
        ret2
    end
    function foreach(instance::GtkCellArea, _callback::Function, _callback_data::Maybe(Nothing))
        _callback = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{Nothing})
            end
        _callback_data = if _callback_data == nothing
                C_NULL
            else
                _callback_data
            end
        ret = ccall(("gtk_cell_area_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _callback, _callback_data)
        nothing
    end
    function foreach_alloc(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _cell_area::GdkRectangle, _background_area::GdkRectangle, _callback::Function, _callback_data::Maybe(Nothing))
        _callback = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{GdkRectangle}, Ptr{GdkRectangle}, Ptr{Nothing})
            end
        _callback_data = if _callback_data == nothing
                C_NULL
            else
                _callback_data
            end
        ret = ccall(("gtk_cell_area_foreach_alloc", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Ptr{GdkRectangle}, Ptr{Nothing}, Ptr{Nothing}), instance, _context, _widget, _cell_area, _background_area, _callback, _callback_data)
        nothing
    end
    function get_cell_allocation(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _renderer::GtkCellRenderer, _cell_area::GdkRectangle)
        m_allocation = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_cell_area_get_cell_allocation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Ptr{Ptr{GdkRectangle}}), instance, _context, _widget, _renderer, _cell_area, m_allocation)
        _allocation = m_allocation[]
        _allocation = convert(GdkRectangle, _allocation, false)
        _allocation
    end
    function get_cell_at_position(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _cell_area::GdkRectangle, _x, _y)
        m_alloc_area = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_cell_area_get_cell_at_position", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Int32, Int32, Ptr{Ptr{GdkRectangle}}), instance, _context, _widget, _cell_area, _x, _y, m_alloc_area)
        ret2 = convert(GtkCellRenderer, ret, false)
        _alloc_area = m_alloc_area[]
        _alloc_area = convert(GdkRectangle, _alloc_area, false)
        (ret2, _alloc_area)
    end
    function get_current_path_string(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_current_path_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_edit_widget(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_edit_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_edited_cell(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_edited_cell", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function get_focus_cell(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_focus_cell", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function get_focus_from_sibling(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_get_focus_from_sibling", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkCellRenderer, ret, false)
            end
        ret2
    end
    function get_focus_siblings(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_get_focus_siblings", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_preferred_height(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget)
        m_minimum_height = Ref{Int32}()
        m_natural_height = Ref{Int32}()
        ret = ccall(("gtk_cell_area_get_preferred_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _context, _widget, m_minimum_height, m_natural_height)
        _minimum_height = m_minimum_height[]
        _natural_height = m_natural_height[]
        (_minimum_height, _natural_height)
    end
    function get_preferred_height_for_width(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _width)
        m_minimum_height = Ref{Int32}()
        m_natural_height = Ref{Int32}()
        ret = ccall(("gtk_cell_area_get_preferred_height_for_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _context, _widget, _width, m_minimum_height, m_natural_height)
        _minimum_height = m_minimum_height[]
        _natural_height = m_natural_height[]
        (_minimum_height, _natural_height)
    end
    function get_preferred_width(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget)
        m_minimum_width = Ref{Int32}()
        m_natural_width = Ref{Int32}()
        ret = ccall(("gtk_cell_area_get_preferred_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _context, _widget, m_minimum_width, m_natural_width)
        _minimum_width = m_minimum_width[]
        _natural_width = m_natural_width[]
        (_minimum_width, _natural_width)
    end
    function get_preferred_width_for_height(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _height)
        m_minimum_width = Ref{Int32}()
        m_natural_width = Ref{Int32}()
        ret = ccall(("gtk_cell_area_get_preferred_width_for_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _context, _widget, _height, m_minimum_width, m_natural_width)
        _minimum_width = m_minimum_width[]
        _natural_width = m_natural_width[]
        (_minimum_width, _natural_width)
    end
    function get_request_mode(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_request_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function has_renderer(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_has_renderer", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        ret2 = convert(Bool, ret)
        ret2
    end
    function inner_cell_area(instance::GtkCellArea, _widget::GtkWidget, _cell_area::GdkRectangle)
        m_inner_area = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_cell_area_inner_cell_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Ptr{Ptr{GdkRectangle}}), instance, _widget, _cell_area, m_inner_area)
        _inner_area = m_inner_area[]
        _inner_area = convert(GdkRectangle, _inner_area, false)
        _inner_area
    end
    function is_activatable(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_is_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_focus_sibling(instance::GtkCellArea, _renderer::GtkCellRenderer, _sibling::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_is_focus_sibling", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _renderer, _sibling)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        nothing
    end
    function remove_focus_sibling(instance::GtkCellArea, _renderer::GtkCellRenderer, _sibling::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_remove_focus_sibling", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _renderer, _sibling)
        nothing
    end
    function request_renderer(instance::GtkCellArea, _renderer::GtkCellRenderer, _orientation, _widget::GtkWidget, _for_size)
        m_minimum_size = Ref{Int32}()
        m_natural_size = Ref{Int32}()
        ret = ccall(("gtk_cell_area_request_renderer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _renderer, _orientation, _widget, _for_size, m_minimum_size, m_natural_size)
        _minimum_size = m_minimum_size[]
        _natural_size = m_natural_size[]
        (_minimum_size, _natural_size)
    end
    function set_focus_cell(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_set_focus_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        nothing
    end
    function snapshot(instance::GtkCellArea, _context::GtkCellAreaContext, _widget::GtkWidget, _snapshot::GtkSnapshot, _background_area::GdkRectangle, _cell_area::GdkRectangle, _flags, _paint_focus)
        ret = ccall(("gtk_cell_area_snapshot", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Ptr{GdkRectangle}, Int32, Cint), instance, _context, _widget, _snapshot, _background_area, _cell_area, _flags, _paint_focus)
        nothing
    end
    function stop_editing(instance::GtkCellArea, _canceled)
        ret = ccall(("gtk_cell_area_stop_editing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _canceled)
        nothing
    end
    function CellAreaBox()
        ret = ccall(("gtk_cell_area_box_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellArea, ret, false)
        ret2
    end
    function get_spacing(instance::GtkCellAreaBox)
        ret = ccall(("gtk_cell_area_box_get_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function pack_end(instance::GtkCellAreaBox, _renderer::GtkCellRenderer, _expand, _align, _fixed)
        ret = ccall(("gtk_cell_area_box_pack_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint, Cint, Cint), instance, _renderer, _expand, _align, _fixed)
        nothing
    end
    function pack_start(instance::GtkCellAreaBox, _renderer::GtkCellRenderer, _expand, _align, _fixed)
        ret = ccall(("gtk_cell_area_box_pack_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint, Cint, Cint), instance, _renderer, _expand, _align, _fixed)
        nothing
    end
    function set_spacing(instance::GtkCellAreaBox, _spacing)
        ret = ccall(("gtk_cell_area_box_set_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function allocate(instance::GtkCellAreaContext, _width, _height)
        ret = ccall(("gtk_cell_area_context_allocate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function get_allocation(instance::GtkCellAreaContext)
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_cell_area_context_get_allocation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_width, m_height)
        _width = m_width[]
        _height = m_height[]
        (_width, _height)
    end
    function get_area(instance::GtkCellAreaContext)
        ret = ccall(("gtk_cell_area_context_get_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellArea, ret, false)
        ret2
    end
    function get_preferred_height(instance::GtkCellAreaContext)
        m_minimum_height = Ref{Int32}()
        m_natural_height = Ref{Int32}()
        ret = ccall(("gtk_cell_area_context_get_preferred_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_minimum_height, m_natural_height)
        _minimum_height = m_minimum_height[]
        _natural_height = m_natural_height[]
        (_minimum_height, _natural_height)
    end
    function get_preferred_height_for_width(instance::GtkCellAreaContext, _width)
        m_minimum_height = Ref{Int32}()
        m_natural_height = Ref{Int32}()
        ret = ccall(("gtk_cell_area_context_get_preferred_height_for_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _width, m_minimum_height, m_natural_height)
        _minimum_height = m_minimum_height[]
        _natural_height = m_natural_height[]
        (_minimum_height, _natural_height)
    end
    function get_preferred_width(instance::GtkCellAreaContext)
        m_minimum_width = Ref{Int32}()
        m_natural_width = Ref{Int32}()
        ret = ccall(("gtk_cell_area_context_get_preferred_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_minimum_width, m_natural_width)
        _minimum_width = m_minimum_width[]
        _natural_width = m_natural_width[]
        (_minimum_width, _natural_width)
    end
    function get_preferred_width_for_height(instance::GtkCellAreaContext, _height)
        m_minimum_width = Ref{Int32}()
        m_natural_width = Ref{Int32}()
        ret = ccall(("gtk_cell_area_context_get_preferred_width_for_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _height, m_minimum_width, m_natural_width)
        _minimum_width = m_minimum_width[]
        _natural_width = m_natural_width[]
        (_minimum_width, _natural_width)
    end
    function push_preferred_height(instance::GtkCellAreaContext, _minimum_height, _natural_height)
        ret = ccall(("gtk_cell_area_context_push_preferred_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _minimum_height, _natural_height)
        nothing
    end
    function push_preferred_width(instance::GtkCellAreaContext, _minimum_width, _natural_width)
        ret = ccall(("gtk_cell_area_context_push_preferred_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _minimum_width, _natural_width)
        nothing
    end
    function reset(instance::GtkCellAreaContext)
        ret = ccall(("gtk_cell_area_context_reset", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_aligned_area(instance::GtkCellRenderer, _widget::GtkWidget, _flags, _cell_area::GdkRectangle)
        m_aligned_area = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_cell_renderer_get_aligned_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Ptr{GdkRectangle}, Ptr{Ptr{GdkRectangle}}), instance, _widget, _flags, _cell_area, m_aligned_area)
        _aligned_area = m_aligned_area[]
        _aligned_area = convert(GdkRectangle, _aligned_area, false)
        _aligned_area
    end
    function get_alignment(instance::GtkCellRenderer)
        m_xalign = Ref{Float32}()
        m_yalign = Ref{Float32}()
        ret = ccall(("gtk_cell_renderer_get_alignment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Float32}, Ptr{Float32}), instance, m_xalign, m_yalign)
        _xalign = m_xalign[]
        _yalign = m_yalign[]
        (_xalign, _yalign)
    end
    function get_fixed_size(instance::GtkCellRenderer)
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_fixed_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_width, m_height)
        _width = m_width[]
        _height = m_height[]
        (_width, _height)
    end
    function get_is_expanded(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_is_expanded", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_is_expander(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_is_expander", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_padding(instance::GtkCellRenderer)
        m_xpad = Ref{Int32}()
        m_ypad = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_padding", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_xpad, m_ypad)
        _xpad = m_xpad[]
        _ypad = m_ypad[]
        (_xpad, _ypad)
    end
    function get_preferred_height(instance::GtkCellRenderer, _widget::GtkWidget)
        m_minimum_size = Ref{Int32}()
        m_natural_size = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_preferred_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _widget, m_minimum_size, m_natural_size)
        _minimum_size = m_minimum_size[]
        _natural_size = m_natural_size[]
        (_minimum_size, _natural_size)
    end
    function get_preferred_height_for_width(instance::GtkCellRenderer, _widget::GtkWidget, _width)
        m_minimum_height = Ref{Int32}()
        m_natural_height = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_preferred_height_for_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _widget, _width, m_minimum_height, m_natural_height)
        _minimum_height = m_minimum_height[]
        _natural_height = m_natural_height[]
        (_minimum_height, _natural_height)
    end
    function get_preferred_size(instance::GtkCellRenderer, _widget::GtkWidget)
        m_minimum_size = Ref{Ptr{GtkRequisition}}()
        m_natural_size = Ref{Ptr{GtkRequisition}}()
        ret = ccall(("gtk_cell_renderer_get_preferred_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GtkRequisition}}, Ptr{Ptr{GtkRequisition}}), instance, _widget, m_minimum_size, m_natural_size)
        _minimum_size = m_minimum_size[]
        _minimum_size = convert(GtkRequisition, _minimum_size, false)
        _natural_size = m_natural_size[]
        _natural_size = convert(GtkRequisition, _natural_size, false)
        (_minimum_size, _natural_size)
    end
    function get_preferred_width(instance::GtkCellRenderer, _widget::GtkWidget)
        m_minimum_size = Ref{Int32}()
        m_natural_size = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_preferred_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _widget, m_minimum_size, m_natural_size)
        _minimum_size = m_minimum_size[]
        _natural_size = m_natural_size[]
        (_minimum_size, _natural_size)
    end
    function get_preferred_width_for_height(instance::GtkCellRenderer, _widget::GtkWidget, _height)
        m_minimum_width = Ref{Int32}()
        m_natural_width = Ref{Int32}()
        ret = ccall(("gtk_cell_renderer_get_preferred_width_for_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Int32}), instance, _widget, _height, m_minimum_width, m_natural_width)
        _minimum_width = m_minimum_width[]
        _natural_width = m_natural_width[]
        (_minimum_width, _natural_width)
    end
    function get_request_mode(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_request_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function get_sensitive(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_sensitive", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_state(instance::GtkCellRenderer, _widget::Maybe(GtkWidget), _cell_state)
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_cell_renderer_get_state", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _widget, _cell_state)
        ret
    end
    function get_visible(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_activatable(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_is_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_alignment(instance::GtkCellRenderer, _xalign, _yalign)
        ret = ccall(("gtk_cell_renderer_set_alignment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32, Float32), instance, _xalign, _yalign)
        nothing
    end
    function set_fixed_size(instance::GtkCellRenderer, _width, _height)
        ret = ccall(("gtk_cell_renderer_set_fixed_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_is_expanded(instance::GtkCellRenderer, _is_expanded)
        ret = ccall(("gtk_cell_renderer_set_is_expanded", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _is_expanded)
        nothing
    end
    function set_is_expander(instance::GtkCellRenderer, _is_expander)
        ret = ccall(("gtk_cell_renderer_set_is_expander", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _is_expander)
        nothing
    end
    function set_padding(instance::GtkCellRenderer, _xpad, _ypad)
        ret = ccall(("gtk_cell_renderer_set_padding", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _xpad, _ypad)
        nothing
    end
    function set_sensitive(instance::GtkCellRenderer, _sensitive)
        ret = ccall(("gtk_cell_renderer_set_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _sensitive)
        nothing
    end
    function set_visible(instance::GtkCellRenderer, _visible)
        ret = ccall(("gtk_cell_renderer_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function snapshot(instance::GtkCellRenderer, _snapshot::GtkSnapshot, _widget::GtkWidget, _background_area::GdkRectangle, _cell_area::GdkRectangle, _flags)
        ret = ccall(("gtk_cell_renderer_snapshot", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GdkRectangle}, Ptr{GdkRectangle}, Int32), instance, _snapshot, _widget, _background_area, _cell_area, _flags)
        nothing
    end
    function stop_editing(instance::GtkCellRenderer, _canceled)
        ret = ccall(("gtk_cell_renderer_stop_editing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _canceled)
        nothing
    end
    function CellRendererAccel()
        ret = ccall(("gtk_cell_renderer_accel_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererCombo()
        ret = ccall(("gtk_cell_renderer_combo_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererPixbuf()
        ret = ccall(("gtk_cell_renderer_pixbuf_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererProgress()
        ret = ccall(("gtk_cell_renderer_progress_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererSpin()
        ret = ccall(("gtk_cell_renderer_spin_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererSpinner()
        ret = ccall(("gtk_cell_renderer_spinner_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function CellRendererText()
        ret = ccall(("gtk_cell_renderer_text_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function set_fixed_height_from_font(instance::GtkCellRendererText, _number_of_rows)
        ret = ccall(("gtk_cell_renderer_text_set_fixed_height_from_font", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _number_of_rows)
        nothing
    end
    function CellRendererToggle()
        ret = ccall(("gtk_cell_renderer_toggle_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function get_activatable(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_active(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_radio(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_radio", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activatable(instance::GtkCellRendererToggle, _setting)
        ret = ccall(("gtk_cell_renderer_toggle_set_activatable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_active(instance::GtkCellRendererToggle, _setting)
        ret = ccall(("gtk_cell_renderer_toggle_set_active", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_radio(instance::GtkCellRendererToggle, _radio)
        ret = ccall(("gtk_cell_renderer_toggle_set_radio", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _radio)
        nothing
    end
    function CellView()
        ret = ccall(("gtk_cell_view_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CellView_new_with_context(_area::GtkCellArea, _context::GtkCellAreaContext)
        ret = ccall(("gtk_cell_view_new_with_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _area, _context)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CellView_new_with_markup(_markup)
        ret = ccall(("gtk_cell_view_new_with_markup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _markup)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CellView_new_with_text(_text)
        ret = ccall(("gtk_cell_view_new_with_text", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _text)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CellView_new_with_texture(_texture::GdkTexture)
        ret = ccall(("gtk_cell_view_new_with_texture", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _texture)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_displayed_row(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_displayed_row", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function get_draw_sensitive(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_draw_sensitive", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_fit_model(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_fit_model", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function set_displayed_row(instance::GtkCellView, _path::Maybe(GtkTreePath))
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        ret = ccall(("gtk_cell_view_set_displayed_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function set_draw_sensitive(instance::GtkCellView, _draw_sensitive)
        ret = ccall(("gtk_cell_view_set_draw_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _draw_sensitive)
        nothing
    end
    function set_fit_model(instance::GtkCellView, _fit_model)
        ret = ccall(("gtk_cell_view_set_fit_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _fit_model)
        nothing
    end
    function set_model(instance::GtkCellView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_cell_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function CenterBox()
        ret = ccall(("gtk_center_box_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_baseline_position(instance::GtkCenterBox)
        ret = ccall(("gtk_center_box_get_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_center_widget(instance::GtkCenterBox)
        ret = ccall(("gtk_center_box_get_center_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_end_widget(instance::GtkCenterBox)
        ret = ccall(("gtk_center_box_get_end_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_start_widget(instance::GtkCenterBox)
        ret = ccall(("gtk_center_box_get_start_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_baseline_position(instance::GtkCenterBox, _position)
        ret = ccall(("gtk_center_box_set_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_center_widget(instance::GtkCenterBox, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_center_box_set_center_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_end_widget(instance::GtkCenterBox, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_center_box_set_end_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_start_widget(instance::GtkCenterBox, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_center_box_set_start_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function CenterLayout()
        ret = ccall(("gtk_center_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function get_baseline_position(instance::GtkCenterLayout)
        ret = ccall(("gtk_center_layout_get_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_center_widget(instance::GtkCenterLayout)
        ret = ccall(("gtk_center_layout_get_center_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_end_widget(instance::GtkCenterLayout)
        ret = ccall(("gtk_center_layout_get_end_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_orientation(instance::GtkCenterLayout)
        ret = ccall(("gtk_center_layout_get_orientation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_start_widget(instance::GtkCenterLayout)
        ret = ccall(("gtk_center_layout_get_start_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_baseline_position(instance::GtkCenterLayout, _baseline_position)
        ret = ccall(("gtk_center_layout_set_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _baseline_position)
        nothing
    end
    function set_center_widget(instance::GtkCenterLayout, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_center_layout_set_center_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_end_widget(instance::GtkCenterLayout, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_center_layout_set_end_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_orientation(instance::GtkCenterLayout, _orientation)
        ret = ccall(("gtk_center_layout_set_orientation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_start_widget(instance::GtkCenterLayout, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_center_layout_set_start_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function CheckButton()
        ret = ccall(("gtk_check_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CheckButton_new_with_label(_label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_check_button_new_with_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function CheckButton_new_with_mnemonic(_label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_check_button_new_with_mnemonic", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_active(instance::GtkCheckButton)
        ret = ccall(("gtk_check_button_get_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inconsistent(instance::GtkCheckButton)
        ret = ccall(("gtk_check_button_get_inconsistent", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_label(instance::GtkCheckButton)
        ret = ccall(("gtk_check_button_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_underline(instance::GtkCheckButton)
        ret = ccall(("gtk_check_button_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkCheckButton, _setting)
        ret = ccall(("gtk_check_button_set_active", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_group(instance::GtkCheckButton, _group::Maybe(GtkCheckButton))
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_check_button_set_group", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _group)
        nothing
    end
    function set_inconsistent(instance::GtkCheckButton, _inconsistent)
        ret = ccall(("gtk_check_button_set_inconsistent", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _inconsistent)
        nothing
    end
    function set_label(instance::GtkCheckButton, _label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_check_button_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_use_underline(instance::GtkCheckButton, _setting)
        ret = ccall(("gtk_check_button_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function ColorButton()
        ret = ccall(("gtk_color_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ColorButton_new_with_rgba(_rgba::GdkRGBA)
        ret = ccall(("gtk_color_button_new_with_rgba", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GdkRGBA},), _rgba)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_modal(instance::GtkColorButton)
        ret = ccall(("gtk_color_button_get_modal", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkColorButton)
        ret = ccall(("gtk_color_button_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_modal(instance::GtkColorButton, _modal)
        ret = ccall(("gtk_color_button_set_modal", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_title(instance::GtkColorButton, _title)
        ret = ccall(("gtk_color_button_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function ColorChooserDialog(_title, _parent::Maybe(GtkWindow))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_color_chooser_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _title, _parent)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ColorChooserWidget()
        ret = ccall(("gtk_color_chooser_widget_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ColumnView(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_column_view_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append_column(instance::GtkColumnView, _column::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_append_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        nothing
    end
    function get_columns(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_columns", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_enable_rubberband(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_enable_rubberband", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_reorderable(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_reorderable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_column_separators(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_show_column_separators", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_row_separators(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_show_row_separators", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_single_click_activate(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_single_click_activate", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sorter(instance::GtkColumnView)
        ret = ccall(("gtk_column_view_get_sorter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkSorter, ret, false)
            end
        ret2
    end
    function insert_column(instance::GtkColumnView, _position, _column::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_insert_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, Ptr{GObject}), instance, _position, _column)
        nothing
    end
    function remove_column(instance::GtkColumnView, _column::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_remove_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        nothing
    end
    function set_enable_rubberband(instance::GtkColumnView, _enable_rubberband)
        ret = ccall(("gtk_column_view_set_enable_rubberband", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_rubberband)
        nothing
    end
    function set_model(instance::GtkColumnView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_column_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_reorderable(instance::GtkColumnView, _reorderable)
        ret = ccall(("gtk_column_view_set_reorderable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_show_column_separators(instance::GtkColumnView, _show_column_separators)
        ret = ccall(("gtk_column_view_set_show_column_separators", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_column_separators)
        nothing
    end
    function set_show_row_separators(instance::GtkColumnView, _show_row_separators)
        ret = ccall(("gtk_column_view_set_show_row_separators", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_row_separators)
        nothing
    end
    function set_single_click_activate(instance::GtkColumnView, _single_click_activate)
        ret = ccall(("gtk_column_view_set_single_click_activate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single_click_activate)
        nothing
    end
    function sort_by_column(instance::GtkColumnView, _column::Maybe(GtkColumnViewColumn), _direction)
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        ret = ccall(("gtk_column_view_sort_by_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _column, _direction)
        nothing
    end
    function ColumnViewColumn(_title, _factory::Maybe(GtkListItemFactory))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_column_view_column_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _title, _factory)
        ret2 = convert(GtkColumnViewColumn, ret, true)
        ret2
    end
    function get_column_view(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_column_view", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkColumnView, ret, false)
            end
        ret2
    end
    function get_expand(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_expand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_factory(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_factory", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListItemFactory, ret, false)
            end
        ret2
    end
    function get_fixed_width(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_fixed_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_header_menu(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_header_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_resizable(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_resizable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sorter(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_sorter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkSorter, ret, false)
            end
        ret2
    end
    function get_title(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkColumnViewColumn)
        ret = ccall(("gtk_column_view_column_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_expand(instance::GtkColumnViewColumn, _expand)
        ret = ccall(("gtk_column_view_column_set_expand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_factory(instance::GtkColumnViewColumn, _factory::Maybe(GtkListItemFactory))
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_column_view_column_set_factory", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _factory)
        nothing
    end
    function set_fixed_width(instance::GtkColumnViewColumn, _fixed_width)
        ret = ccall(("gtk_column_view_column_set_fixed_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _fixed_width)
        nothing
    end
    function set_header_menu(instance::GtkColumnViewColumn, _menu::Maybe(GMenuModel))
        _menu = if _menu == nothing
                C_NULL
            else
                _menu
            end
        ret = ccall(("gtk_column_view_column_set_header_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu)
        nothing
    end
    function set_resizable(instance::GtkColumnViewColumn, _resizable)
        ret = ccall(("gtk_column_view_column_set_resizable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resizable)
        nothing
    end
    function set_sorter(instance::GtkColumnViewColumn, _sorter::Maybe(GtkSorter))
        _sorter = if _sorter == nothing
                C_NULL
            else
                _sorter
            end
        ret = ccall(("gtk_column_view_column_set_sorter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sorter)
        nothing
    end
    function set_title(instance::GtkColumnViewColumn, _title)
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        ret = ccall(("gtk_column_view_column_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function set_visible(instance::GtkColumnViewColumn, _visible)
        ret = ccall(("gtk_column_view_column_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function ComboBox()
        ret = ccall(("gtk_combo_box_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ComboBox_new_with_entry()
        ret = ccall(("gtk_combo_box_new_with_entry", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ComboBox_new_with_model(_model)
        ret = ccall(("gtk_combo_box_new_with_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ComboBox_new_with_model_and_entry(_model)
        ret = ccall(("gtk_combo_box_new_with_model_and_entry", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_active(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_active", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_active_id(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_active_id", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_active_iter(instance::GtkComboBox)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_combo_box_get_active_iter", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}), instance, m_iter)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function get_button_sensitivity(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_button_sensitivity", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SensitivityType(ret)
        ret2
    end
    function get_child(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_entry_text_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_entry_text_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_has_entry(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_has_entry", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_id_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_id_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_popup_fixed_width(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_popup_fixed_width", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function popdown(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_popdown", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_popup", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup_for_device(instance::GtkComboBox, _device::GdkDevice)
        ret = ccall(("gtk_combo_box_popup_for_device", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _device)
        nothing
    end
    function set_active(instance::GtkComboBox, _index_)
        ret = ccall(("gtk_combo_box_set_active", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _index_)
        nothing
    end
    function set_active_id(instance::GtkComboBox, _active_id)
        _active_id = if _active_id == nothing
                C_NULL
            else
                _active_id
            end
        ret = ccall(("gtk_combo_box_set_active_id", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}), instance, _active_id)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active_iter(instance::GtkComboBox, _iter::Maybe(GtkTreeIter))
        _iter = if _iter == nothing
                C_NULL
            else
                _iter
            end
        ret = ccall(("gtk_combo_box_set_active_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        nothing
    end
    function set_button_sensitivity(instance::GtkComboBox, _sensitivity)
        ret = ccall(("gtk_combo_box_set_button_sensitivity", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _sensitivity)
        nothing
    end
    function set_child(instance::GtkComboBox, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_combo_box_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_entry_text_column(instance::GtkComboBox, _text_column)
        ret = ccall(("gtk_combo_box_set_entry_text_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _text_column)
        nothing
    end
    function set_id_column(instance::GtkComboBox, _id_column)
        ret = ccall(("gtk_combo_box_set_id_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _id_column)
        nothing
    end
    function set_model(instance::GtkComboBox, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_combo_box_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_popup_fixed_width(instance::GtkComboBox, _fixed)
        ret = ccall(("gtk_combo_box_set_popup_fixed_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _fixed)
        nothing
    end
    function set_row_separator_func(instance::GtkComboBox, _func::Maybe(Function), _data::Maybe(Nothing), _destroy::Maybe(Function))
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_combo_box_set_row_separator_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data, _destroy)
        nothing
    end
    function ComboBoxText()
        ret = ccall(("gtk_combo_box_text_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ComboBoxText_new_with_entry()
        ret = ccall(("gtk_combo_box_text_new_with_entry", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append(instance::GtkComboBoxText, _id, _text)
        _id = if _id == nothing
                C_NULL
            else
                _id
            end
        ret = ccall(("gtk_combo_box_text_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}), instance, _id, _text)
        nothing
    end
    function append_text(instance::GtkComboBoxText, _text)
        ret = ccall(("gtk_combo_box_text_append_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function get_active_text(instance::GtkComboBoxText)
        ret = ccall(("gtk_combo_box_text_get_active_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function insert(instance::GtkComboBoxText, _position, _id, _text)
        _id = if _id == nothing
                C_NULL
            else
                _id
            end
        ret = ccall(("gtk_combo_box_text_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt8}, Ptr{UInt8}), instance, _position, _id, _text)
        nothing
    end
    function insert_text(instance::GtkComboBoxText, _position, _text)
        ret = ccall(("gtk_combo_box_text_insert_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt8}), instance, _position, _text)
        nothing
    end
    function prepend(instance::GtkComboBoxText, _id, _text)
        _id = if _id == nothing
                C_NULL
            else
                _id
            end
        ret = ccall(("gtk_combo_box_text_prepend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}), instance, _id, _text)
        nothing
    end
    function prepend_text(instance::GtkComboBoxText, _text)
        ret = ccall(("gtk_combo_box_text_prepend_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function remove(instance::GtkComboBoxText, _position)
        ret = ccall(("gtk_combo_box_text_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function remove_all(instance::GtkComboBoxText)
        ret = ccall(("gtk_combo_box_text_remove_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function Constraint(_target, _target_attribute, _relation, _source, _source_attribute, _multiplier, _constant, _strength)
        _target = if _target == nothing
                C_NULL
            else
                _target
            end
        _source = if _source == nothing
                C_NULL
            else
                _source
            end
        ret = ccall(("gtk_constraint_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, UInt16, Ptr{GObject}, Int32, Float64, Float64, Int32), _target, _target_attribute, _relation, _source, _source_attribute, _multiplier, _constant, _strength)
        ret2 = convert(GtkConstraint, ret, true)
        ret2
    end
    function Constraint_new_constant(_target, _target_attribute, _relation, _constant, _strength)
        _target = if _target == nothing
                C_NULL
            else
                _target
            end
        ret = ccall(("gtk_constraint_new_constant", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, UInt16, Float64, Int32), _target, _target_attribute, _relation, _constant, _strength)
        ret2 = convert(GtkConstraint, ret, true)
        ret2
    end
    function get_constant(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_constant", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_multiplier(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_multiplier", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_relation(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_relation", "libgtk-4.so.1"), UInt16, (Ptr{GObject},), instance)
        ret2 = ConstraintRelation(ret)
        ret2
    end
    function get_source(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_source", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_source_attribute(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_source_attribute", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ConstraintAttribute(ret)
        ret2
    end
    function get_strength(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_strength", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_target(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_target", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_target_attribute(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_get_target_attribute", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ConstraintAttribute(ret)
        ret2
    end
    function is_attached(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_is_attached", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_constant(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_is_constant", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_required(instance::GtkConstraint)
        ret = ccall(("gtk_constraint_is_required", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ConstraintGuide()
        ret = ccall(("gtk_constraint_guide_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkConstraintGuide, ret, true)
        ret2
    end
    function get_max_size(instance::GtkConstraintGuide, _width::Maybe(Int32), _height::Maybe(Int32))
        _width = if _width == nothing
                C_NULL
            else
                _width
            end
        _height = if _height == nothing
                C_NULL
            else
                _height
            end
        ret = ccall(("gtk_constraint_guide_get_max_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _width, _height)
        nothing
    end
    function get_min_size(instance::GtkConstraintGuide, _width::Maybe(Int32), _height::Maybe(Int32))
        _width = if _width == nothing
                C_NULL
            else
                _width
            end
        _height = if _height == nothing
                C_NULL
            else
                _height
            end
        ret = ccall(("gtk_constraint_guide_get_min_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _width, _height)
        nothing
    end
    function get_name(instance::GtkConstraintGuide)
        ret = ccall(("gtk_constraint_guide_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_nat_size(instance::GtkConstraintGuide, _width::Maybe(Int32), _height::Maybe(Int32))
        _width = if _width == nothing
                C_NULL
            else
                _width
            end
        _height = if _height == nothing
                C_NULL
            else
                _height
            end
        ret = ccall(("gtk_constraint_guide_get_nat_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _width, _height)
        nothing
    end
    function get_strength(instance::GtkConstraintGuide)
        ret = ccall(("gtk_constraint_guide_get_strength", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ConstraintStrength(ret)
        ret2
    end
    function set_max_size(instance::GtkConstraintGuide, _width, _height)
        ret = ccall(("gtk_constraint_guide_set_max_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_min_size(instance::GtkConstraintGuide, _width, _height)
        ret = ccall(("gtk_constraint_guide_set_min_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_name(instance::GtkConstraintGuide, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_constraint_guide_set_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_nat_size(instance::GtkConstraintGuide, _width, _height)
        ret = ccall(("gtk_constraint_guide_set_nat_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_strength(instance::GtkConstraintGuide, _strength)
        ret = ccall(("gtk_constraint_guide_set_strength", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _strength)
        nothing
    end
    function ConstraintLayout()
        ret = ccall(("gtk_constraint_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function add_constraint(instance::GtkConstraintLayout, _constraint::GtkConstraint)
        ret = ccall(("gtk_constraint_layout_add_constraint", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _constraint)
        nothing
    end
    function add_constraints_from_description(instance::GtkConstraintLayout, _lines, _hspacing, _vspacing, _views)
        _n_lines = length(_lines)
        err = err_buf()
        ret = ccall(("gtk_constraint_layout_add_constraints_from_descriptionv", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject}, Ptr{Ptr{UInt8}}, UInt64, Int32, Int32, Ptr{GHashTable}, Ptr{Ptr{GError}}), instance, _lines, _n_lines, _hspacing, _vspacing, _views, err)
        check_err(err)
        ret2 = GLib.GList(ret)
        ret2
    end
    function add_guide(instance::GtkConstraintLayout, _guide::GtkConstraintGuide)
        ret = ccall(("gtk_constraint_layout_add_guide", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _guide)
        nothing
    end
    function observe_constraints(instance::GtkConstraintLayout)
        ret = ccall(("gtk_constraint_layout_observe_constraints", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function observe_guides(instance::GtkConstraintLayout)
        ret = ccall(("gtk_constraint_layout_observe_guides", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function remove_all_constraints(instance::GtkConstraintLayout)
        ret = ccall(("gtk_constraint_layout_remove_all_constraints", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_constraint(instance::GtkConstraintLayout, _constraint::GtkConstraint)
        ret = ccall(("gtk_constraint_layout_remove_constraint", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _constraint)
        nothing
    end
    function remove_guide(instance::GtkConstraintLayout, _guide::GtkConstraintGuide)
        ret = ccall(("gtk_constraint_layout_remove_guide", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _guide)
        nothing
    end
    function CssProvider()
        ret = ccall(("gtk_css_provider_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkCssProvider, ret, true)
        ret2
    end
    function load_from_data(instance::GtkCssProvider, _data)
        _data = convert(Vector{UInt8}, _data)
        _length = length(_data)
        ret = ccall(("gtk_css_provider_load_from_data", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int64), instance, _data, _length)
        nothing
    end
    function load_from_file(instance::GtkCssProvider, _file)
        ret = ccall(("gtk_css_provider_load_from_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _file)
        nothing
    end
    function load_from_path(instance::GtkCssProvider, _path)
        ret = ccall(("gtk_css_provider_load_from_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _path)
        nothing
    end
    function load_from_resource(instance::GtkCssProvider, _resource_path)
        ret = ccall(("gtk_css_provider_load_from_resource", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _resource_path)
        nothing
    end
    function load_named(instance::GtkCssProvider, _name, _variant)
        _variant = if _variant == nothing
                C_NULL
            else
                _variant
            end
        ret = ccall(("gtk_css_provider_load_named", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}), instance, _name, _variant)
        nothing
    end
    function to_string(instance::GtkCssProvider)
        ret = ccall(("gtk_css_provider_to_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function CustomFilter(_match_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Function)
        _match_func = if _match_func == nothing
                C_NULL
            else
                _match_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_custom_filter_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _match_func, _user_data, _user_destroy)
        ret2 = convert(GtkCustomFilter, ret, true)
        ret2
    end
    function set_filter_func(instance::GtkCustomFilter, _match_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Function)
        _match_func = if _match_func == nothing
                C_NULL
            else
                _match_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_custom_filter_set_filter_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _match_func, _user_data, _user_destroy)
        nothing
    end
    function CustomLayout(_request_mode::Maybe(Function), _measure::Function, _allocate::Function)
        _request_mode = if _request_mode == nothing
                C_NULL
            else
                _request_mode
            end
        _measure = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Int32, Int32, Int32, Int32, Int32, Int32)
            end
        _allocate = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Int32, Int32, Int32)
            end
        ret = ccall(("gtk_custom_layout_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _request_mode, _measure, _allocate)
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function CustomSorter(_sort_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Maybe(Function))
        _sort_func = if _sort_func == nothing
                C_NULL
            else
                _sort_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = if _user_destroy == nothing
                C_NULL
            else
                _user_destroy
            end
        ret = ccall(("gtk_custom_sorter_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _sort_func, _user_data, _user_destroy)
        ret2 = convert(GtkCustomSorter, ret, true)
        ret2
    end
    function set_sort_func(instance::GtkCustomSorter, _sort_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Function)
        _sort_func = if _sort_func == nothing
                C_NULL
            else
                _sort_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_custom_sorter_set_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _sort_func, _user_data, _user_destroy)
        nothing
    end
    function Dialog()
        ret = ccall(("gtk_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_action_widget(instance::GtkDialog, _child::GtkWidget, _response_id)
        ret = ccall(("gtk_dialog_add_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _response_id)
        nothing
    end
    function add_button(instance::GtkDialog, _button_text, _response_id)
        ret = ccall(("gtk_dialog_add_button", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _button_text, _response_id)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_content_area(instance::GtkDialog)
        ret = ccall(("gtk_dialog_get_content_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBox, ret, false)
        ret2
    end
    function get_header_bar(instance::GtkDialog)
        ret = ccall(("gtk_dialog_get_header_bar", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkHeaderBar, ret, false)
        ret2
    end
    function get_response_for_widget(instance::GtkDialog, _widget::GtkWidget)
        ret = ccall(("gtk_dialog_get_response_for_widget", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        ret
    end
    function get_widget_for_response(instance::GtkDialog, _response_id)
        ret = ccall(("gtk_dialog_get_widget_for_response", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _response_id)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function response(instance::GtkDialog, _response_id)
        ret = ccall(("gtk_dialog_response", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function set_default_response(instance::GtkDialog, _response_id)
        ret = ccall(("gtk_dialog_set_default_response", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function set_response_sensitive(instance::GtkDialog, _response_id, _setting)
        ret = ccall(("gtk_dialog_set_response_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Cint), instance, _response_id, _setting)
        nothing
    end
    function DirectoryList(_attributes, _file)
        _attributes = if _attributes == nothing
                C_NULL
            else
                _attributes
            end
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_directory_list_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _attributes, _file)
        ret2 = convert(GtkDirectoryList, ret, true)
        ret2
    end
    function get_attributes(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_get_attributes", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_error(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_get_error", "libgtk-4.so.1"), Ptr{GError}, (Ptr{GObject},), instance)
        ret
    end
    function get_file(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_io_priority(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_get_io_priority", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_monitored(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_get_monitored", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_loading(instance::GtkDirectoryList)
        ret = ccall(("gtk_directory_list_is_loading", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_attributes(instance::GtkDirectoryList, _attributes)
        _attributes = if _attributes == nothing
                C_NULL
            else
                _attributes
            end
        ret = ccall(("gtk_directory_list_set_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _attributes)
        nothing
    end
    function set_file(instance::GtkDirectoryList, _file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_directory_list_set_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _file)
        nothing
    end
    function set_io_priority(instance::GtkDirectoryList, _io_priority)
        ret = ccall(("gtk_directory_list_set_io_priority", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _io_priority)
        nothing
    end
    function set_monitored(instance::GtkDirectoryList, _monitored)
        ret = ccall(("gtk_directory_list_set_monitored", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _monitored)
        nothing
    end
    function create_widget_for_value(_value::GValue)
        ret = ccall(("gtk_drag_icon_create_widget_for_value", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GValue},), _value)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, true)
            end
        ret2
    end
    function get_for_drag(_drag::GdkDrag)
        ret = ccall(("gtk_drag_icon_get_for_drag", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _drag)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_from_paintable(_drag::GdkDrag, _paintable, _hot_x, _hot_y)
        ret = ccall(("gtk_drag_icon_set_from_paintable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32), _drag, _paintable, _hot_x, _hot_y)
        nothing
    end
    function get_child(instance::GtkDragIcon)
        ret = ccall(("gtk_drag_icon_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_child(instance::GtkDragIcon, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_drag_icon_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function DragSource()
        ret = ccall(("gtk_drag_source_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkDragSource, ret, true)
        ret2
    end
    function drag_cancel(instance::GtkDragSource)
        ret = ccall(("gtk_drag_source_drag_cancel", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_actions(instance::GtkDragSource)
        ret = ccall(("gtk_drag_source_get_actions", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_content(instance::GtkDragSource)
        ret = ccall(("gtk_drag_source_get_content", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkContentProvider, ret, false)
            end
        ret2
    end
    function get_drag(instance::GtkDragSource)
        ret = ccall(("gtk_drag_source_get_drag", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDrag, ret, false)
            end
        ret2
    end
    function set_actions(instance::GtkDragSource, _actions)
        ret = ccall(("gtk_drag_source_set_actions", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _actions)
        nothing
    end
    function set_content(instance::GtkDragSource, _content::Maybe(GdkContentProvider))
        _content = if _content == nothing
                C_NULL
            else
                _content
            end
        ret = ccall(("gtk_drag_source_set_content", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content)
        nothing
    end
    function set_icon(instance::GtkDragSource, _paintable, _hot_x, _hot_y)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_drag_source_set_icon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32), instance, _paintable, _hot_x, _hot_y)
        nothing
    end
    function DrawingArea()
        ret = ccall(("gtk_drawing_area_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_content_height(instance::GtkDrawingArea)
        ret = ccall(("gtk_drawing_area_get_content_height", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_content_width(instance::GtkDrawingArea)
        ret = ccall(("gtk_drawing_area_get_content_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_content_height(instance::GtkDrawingArea, _height)
        ret = ccall(("gtk_drawing_area_set_content_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _height)
        nothing
    end
    function set_content_width(instance::GtkDrawingArea, _width)
        ret = ccall(("gtk_drawing_area_set_content_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function set_draw_func(instance::GtkDrawingArea, _draw_func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _draw_func = if _draw_func == nothing
                C_NULL
            else
                _draw_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_drawing_area_set_draw_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _draw_func, _user_data, _destroy)
        nothing
    end
    function DropControllerMotion()
        ret = ccall(("gtk_drop_controller_motion_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function contains_pointer(instance::GtkDropControllerMotion)
        ret = ccall(("gtk_drop_controller_motion_contains_pointer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_drop(instance::GtkDropControllerMotion)
        ret = ccall(("gtk_drop_controller_motion_get_drop", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDrop, ret, false)
            end
        ret2
    end
    function is_pointer(instance::GtkDropControllerMotion)
        ret = ccall(("gtk_drop_controller_motion_is_pointer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function DropTarget(_type, _actions)
        ret = ccall(("gtk_drop_target_new", "libgtk-4.so.1"), Ptr{GObject}, (UInt64, Int32), _type, _actions)
        ret2 = convert(GtkDropTarget, ret, true)
        ret2
    end
    function get_actions(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_get_actions", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_current_drop(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_get_current_drop", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDrop, ret, false)
            end
        ret2
    end
    function get_formats(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_get_formats", "libgtk-4.so.1"), Ptr{GdkContentFormats}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkContentFormats, ret, true)
            end
        ret2
    end
    function get_gtypes(instance::GtkDropTarget)
        m_n_types = Ref{UInt64}()
        ret = ccall(("gtk_drop_target_get_gtypes", "libgtk-4.so.1"), Ptr{UInt64}, (Ptr{GObject}, Ptr{UInt64}), instance, m_n_types)
        _n_types = m_n_types[]
        ret
    end
    function get_preload(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_get_preload", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_value(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_get_value", "libgtk-4.so.1"), Ptr{GValue}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GValue, ret, false)
            end
        ret2
    end
    function reject(instance::GtkDropTarget)
        ret = ccall(("gtk_drop_target_reject", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_actions(instance::GtkDropTarget, _actions)
        ret = ccall(("gtk_drop_target_set_actions", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _actions)
        nothing
    end
    function set_gtypes(instance::GtkDropTarget, _types)
        _types = convert(Vector{UInt64}, _types)
        _n_types = length(_types)
        ret = ccall(("gtk_drop_target_set_gtypes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt64}, UInt64), instance, _types, _n_types)
        nothing
    end
    function set_preload(instance::GtkDropTarget, _preload)
        ret = ccall(("gtk_drop_target_set_preload", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _preload)
        nothing
    end
    function DropTargetAsync(_formats::Maybe(GdkContentFormats), _actions)
        _formats = if _formats == nothing
                C_NULL
            else
                _formats
            end
        ret = ccall(("gtk_drop_target_async_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GdkContentFormats}, Int32), _formats, _actions)
        ret2 = convert(GtkDropTargetAsync, ret, true)
        ret2
    end
    function get_actions(instance::GtkDropTargetAsync)
        ret = ccall(("gtk_drop_target_async_get_actions", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_formats(instance::GtkDropTargetAsync)
        ret = ccall(("gtk_drop_target_async_get_formats", "libgtk-4.so.1"), Ptr{GdkContentFormats}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkContentFormats, ret, true)
            end
        ret2
    end
    function reject_drop(instance::GtkDropTargetAsync, _drop::GdkDrop)
        ret = ccall(("gtk_drop_target_async_reject_drop", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _drop)
        nothing
    end
    function set_actions(instance::GtkDropTargetAsync, _actions)
        ret = ccall(("gtk_drop_target_async_set_actions", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _actions)
        nothing
    end
    function set_formats(instance::GtkDropTargetAsync, _formats::Maybe(GdkContentFormats))
        _formats = if _formats == nothing
                C_NULL
            else
                _formats
            end
        ret = ccall(("gtk_drop_target_async_set_formats", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkContentFormats}), instance, _formats)
        nothing
    end
    function EditableLabel(_str)
        ret = ccall(("gtk_editable_label_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _str)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_editing(instance::GtkEditableLabel)
        ret = ccall(("gtk_editable_label_get_editing", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function stop_editing(instance::GtkEditableLabel, _commit)
        ret = ccall(("gtk_editable_label_stop_editing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _commit)
        nothing
    end
    function EmojiChooser()
        ret = ccall(("gtk_emoji_chooser_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Entry()
        ret = ccall(("gtk_entry_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Entry_new_with_buffer(_buffer::GtkEntryBuffer)
        ret = ccall(("gtk_entry_new_with_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _buffer)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_activates_default(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_activates_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_alignment(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_alignment", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_attributes(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_attributes", "libgtk-4.so.1"), Ptr{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoAttrList, ret, false)
            end
        ret2
    end
    function get_buffer(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkEntryBuffer, ret, false)
        ret2
    end
    function get_completion(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_completion", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkEntryCompletion, ret, false)
            end
        ret2
    end
    function get_current_icon_drag_source(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_current_icon_drag_source", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_extra_menu(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_extra_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_has_frame(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_has_frame", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_activatable(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_area(instance::GtkEntry, _icon_pos)
        m_icon_area = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_entry_get_icon_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Ptr{GdkRectangle}}), instance, _icon_pos, m_icon_area)
        _icon_area = m_icon_area[]
        _icon_area = convert(GdkRectangle, _icon_area, false)
        _icon_area
    end
    function get_icon_at_pos(instance::GtkEntry, _x, _y)
        ret = ccall(("gtk_entry_get_icon_at_pos", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32, Int32), instance, _x, _y)
        ret
    end
    function get_icon_gicon(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_gicon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_icon_name(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_icon_paintable(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_icon_sensitive(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_sensitive", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_storage_type(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_storage_type", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = ImageType(ret)
        ret2
    end
    function get_icon_tooltip_markup(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_tooltip_markup", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_icon_tooltip_text(instance::GtkEntry, _icon_pos)
        ret = ccall(("gtk_entry_get_icon_tooltip_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32), instance, _icon_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_input_hints(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_input_hints", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_purpose(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_input_purpose", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_invisible_char(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_max_length(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_max_length", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_overwrite_mode(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_overwrite_mode", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_placeholder_text(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_placeholder_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_progress_fraction(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_progress_fraction", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_progress_pulse_step(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_progress_pulse_step", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_tabs(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_tabs", "libgtk-4.so.1"), Ptr{PangoTabArray}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoTabArray, ret, false)
            end
        ret2
    end
    function get_text_length(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_text_length", "libgtk-4.so.1"), UInt16, (Ptr{GObject},), instance)
        ret
    end
    function get_visibility(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_visibility", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function grab_focus_without_selecting(instance::GtkEntry)
        ret = ccall(("gtk_entry_grab_focus_without_selecting", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function progress_pulse(instance::GtkEntry)
        ret = ccall(("gtk_entry_progress_pulse", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function reset_im_context(instance::GtkEntry)
        ret = ccall(("gtk_entry_reset_im_context", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_activates_default(instance::GtkEntry, _setting)
        ret = ccall(("gtk_entry_set_activates_default", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_alignment(instance::GtkEntry, _xalign)
        ret = ccall(("gtk_entry_set_alignment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_attributes(instance::GtkEntry, _attrs::PangoAttrList)
        ret = ccall(("gtk_entry_set_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoAttrList}), instance, _attrs)
        nothing
    end
    function set_buffer(instance::GtkEntry, _buffer::GtkEntryBuffer)
        ret = ccall(("gtk_entry_set_buffer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _buffer)
        nothing
    end
    function set_completion(instance::GtkEntry, _completion::Maybe(GtkEntryCompletion))
        _completion = if _completion == nothing
                C_NULL
            else
                _completion
            end
        ret = ccall(("gtk_entry_set_completion", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _completion)
        nothing
    end
    function set_extra_menu(instance::GtkEntry, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_entry_set_extra_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_has_frame(instance::GtkEntry, _setting)
        ret = ccall(("gtk_entry_set_has_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_icon_activatable(instance::GtkEntry, _icon_pos, _activatable)
        ret = ccall(("gtk_entry_set_icon_activatable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Cint), instance, _icon_pos, _activatable)
        nothing
    end
    function set_icon_drag_source(instance::GtkEntry, _icon_pos, _provider::GdkContentProvider, _actions)
        ret = ccall(("gtk_entry_set_icon_drag_source", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GObject}, Int32), instance, _icon_pos, _provider, _actions)
        nothing
    end
    function set_icon_from_gicon(instance::GtkEntry, _icon_pos, _icon)
        _icon = if _icon == nothing
                C_NULL
            else
                _icon
            end
        ret = ccall(("gtk_entry_set_icon_from_gicon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GObject}), instance, _icon_pos, _icon)
        nothing
    end
    function set_icon_from_icon_name(instance::GtkEntry, _icon_pos, _icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_entry_set_icon_from_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt8}), instance, _icon_pos, _icon_name)
        nothing
    end
    function set_icon_from_paintable(instance::GtkEntry, _icon_pos, _paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_entry_set_icon_from_paintable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GObject}), instance, _icon_pos, _paintable)
        nothing
    end
    function set_icon_sensitive(instance::GtkEntry, _icon_pos, _sensitive)
        ret = ccall(("gtk_entry_set_icon_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Cint), instance, _icon_pos, _sensitive)
        nothing
    end
    function set_icon_tooltip_markup(instance::GtkEntry, _icon_pos, _tooltip)
        _tooltip = if _tooltip == nothing
                C_NULL
            else
                _tooltip
            end
        ret = ccall(("gtk_entry_set_icon_tooltip_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt8}), instance, _icon_pos, _tooltip)
        nothing
    end
    function set_icon_tooltip_text(instance::GtkEntry, _icon_pos, _tooltip)
        _tooltip = if _tooltip == nothing
                C_NULL
            else
                _tooltip
            end
        ret = ccall(("gtk_entry_set_icon_tooltip_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt8}), instance, _icon_pos, _tooltip)
        nothing
    end
    function set_input_hints(instance::GtkEntry, _hints)
        ret = ccall(("gtk_entry_set_input_hints", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::GtkEntry, _purpose)
        ret = ccall(("gtk_entry_set_input_purpose", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _purpose)
        nothing
    end
    function set_invisible_char(instance::GtkEntry, _ch)
        ret = ccall(("gtk_entry_set_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Nothing), instance, _ch)
        nothing
    end
    function set_max_length(instance::GtkEntry, _max)
        ret = ccall(("gtk_entry_set_max_length", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _max)
        nothing
    end
    function set_overwrite_mode(instance::GtkEntry, _overwrite)
        ret = ccall(("gtk_entry_set_overwrite_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _overwrite)
        nothing
    end
    function set_placeholder_text(instance::GtkEntry, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_entry_set_placeholder_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_progress_fraction(instance::GtkEntry, _fraction)
        ret = ccall(("gtk_entry_set_progress_fraction", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_progress_pulse_step(instance::GtkEntry, _fraction)
        ret = ccall(("gtk_entry_set_progress_pulse_step", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_tabs(instance::GtkEntry, _tabs::Maybe(PangoTabArray))
        _tabs = if _tabs == nothing
                C_NULL
            else
                _tabs
            end
        ret = ccall(("gtk_entry_set_tabs", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoTabArray}), instance, _tabs)
        nothing
    end
    function set_visibility(instance::GtkEntry, _visible)
        ret = ccall(("gtk_entry_set_visibility", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function unset_invisible_char(instance::GtkEntry)
        ret = ccall(("gtk_entry_unset_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function EntryBuffer(_initial_chars, _n_initial_chars)
        _initial_chars = if _initial_chars == nothing
                C_NULL
            else
                _initial_chars
            end
        ret = ccall(("gtk_entry_buffer_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Int32), _initial_chars, _n_initial_chars)
        ret2 = convert(GtkEntryBuffer, ret, true)
        ret2
    end
    function delete_text(instance::GtkEntryBuffer, _position, _n_chars)
        ret = ccall(("gtk_entry_buffer_delete_text", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, UInt32, Int32), instance, _position, _n_chars)
        ret
    end
    function emit_deleted_text(instance::GtkEntryBuffer, _position, _n_chars)
        ret = ccall(("gtk_entry_buffer_emit_deleted_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, UInt32), instance, _position, _n_chars)
        nothing
    end
    function emit_inserted_text(instance::GtkEntryBuffer, _position, _chars, _n_chars)
        ret = ccall(("gtk_entry_buffer_emit_inserted_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, Ptr{UInt8}, UInt32), instance, _position, _chars, _n_chars)
        nothing
    end
    function get_bytes(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_bytes", "libgtk-4.so.1"), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_length(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_length", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_length(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_max_length", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_text(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function insert_text(instance::GtkEntryBuffer, _position, _chars, _n_chars)
        ret = ccall(("gtk_entry_buffer_insert_text", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, UInt32, Ptr{UInt8}, Int32), instance, _position, _chars, _n_chars)
        ret
    end
    function set_max_length(instance::GtkEntryBuffer, _max_length)
        ret = ccall(("gtk_entry_buffer_set_max_length", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _max_length)
        nothing
    end
    function set_text(instance::GtkEntryBuffer, _chars, _n_chars)
        ret = ccall(("gtk_entry_buffer_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _chars, _n_chars)
        nothing
    end
    function EntryCompletion()
        ret = ccall(("gtk_entry_completion_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEntryCompletion, ret, true)
        ret2
    end
    function EntryCompletion_new_with_area(_area::GtkCellArea)
        ret = ccall(("gtk_entry_completion_new_with_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _area)
        ret2 = convert(GtkEntryCompletion, ret, true)
        ret2
    end
    function complete(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_complete", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function compute_prefix(instance::GtkEntryCompletion, _key)
        ret = ccall(("gtk_entry_completion_compute_prefix", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{UInt8}), instance, _key)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_completion_prefix(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_completion_prefix", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_entry(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_entry", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_inline_completion(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_inline_completion", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inline_selection(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_inline_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_minimum_key_length(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_minimum_key_length", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_popup_completion(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_completion", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_popup_set_width(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_set_width", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_popup_single_match(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_single_match", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text_column(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_text_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function insert_prefix(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_insert_prefix", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_inline_completion(instance::GtkEntryCompletion, _inline_completion)
        ret = ccall(("gtk_entry_completion_set_inline_completion", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _inline_completion)
        nothing
    end
    function set_inline_selection(instance::GtkEntryCompletion, _inline_selection)
        ret = ccall(("gtk_entry_completion_set_inline_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _inline_selection)
        nothing
    end
    function set_match_func(instance::GtkEntryCompletion, _func::Function, _func_data::Maybe(Nothing), _func_notify::Function)
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{UInt8}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _func_data = if _func_data == nothing
                C_NULL
            else
                _func_data
            end
        _func_notify = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_entry_completion_set_match_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _func_data, _func_notify)
        nothing
    end
    function set_minimum_key_length(instance::GtkEntryCompletion, _length)
        ret = ccall(("gtk_entry_completion_set_minimum_key_length", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _length)
        nothing
    end
    function set_model(instance::GtkEntryCompletion, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_entry_completion_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_popup_completion(instance::GtkEntryCompletion, _popup_completion)
        ret = ccall(("gtk_entry_completion_set_popup_completion", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _popup_completion)
        nothing
    end
    function set_popup_set_width(instance::GtkEntryCompletion, _popup_set_width)
        ret = ccall(("gtk_entry_completion_set_popup_set_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _popup_set_width)
        nothing
    end
    function set_popup_single_match(instance::GtkEntryCompletion, _popup_single_match)
        ret = ccall(("gtk_entry_completion_set_popup_single_match", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _popup_single_match)
        nothing
    end
    function set_text_column(instance::GtkEntryCompletion, _column)
        ret = ccall(("gtk_entry_completion_set_text_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function get_current_event(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_current_event", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkEvent, ret, false)
            end
        ret2
    end
    function get_current_event_device(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_current_event_device", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDevice, ret, false)
            end
        ret2
    end
    function get_current_event_state(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_current_event_state", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_current_event_time(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_current_event_time", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_name(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_propagation_limit(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_propagation_limit", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PropagationLimit(ret)
        ret2
    end
    function get_propagation_phase(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_propagation_phase", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PropagationPhase(ret)
        ret2
    end
    function get_widget(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function reset(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_reset", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_name(instance::GtkEventController, _name)
        ret = ccall(("gtk_event_controller_set_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_propagation_limit(instance::GtkEventController, _limit)
        ret = ccall(("gtk_event_controller_set_propagation_limit", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _limit)
        nothing
    end
    function set_propagation_phase(instance::GtkEventController, _phase)
        ret = ccall(("gtk_event_controller_set_propagation_phase", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _phase)
        nothing
    end
    function EventControllerFocus()
        ret = ccall(("gtk_event_controller_focus_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function contains_focus(instance::GtkEventControllerFocus)
        ret = ccall(("gtk_event_controller_focus_contains_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_focus(instance::GtkEventControllerFocus)
        ret = ccall(("gtk_event_controller_focus_is_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function EventControllerKey()
        ret = ccall(("gtk_event_controller_key_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function forward(instance::GtkEventControllerKey, _widget::GtkWidget)
        ret = ccall(("gtk_event_controller_key_forward", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_group(instance::GtkEventControllerKey)
        ret = ccall(("gtk_event_controller_key_get_group", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_im_context(instance::GtkEventControllerKey)
        ret = ccall(("gtk_event_controller_key_get_im_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkIMContext, ret, false)
        ret2
    end
    function set_im_context(instance::GtkEventControllerKey, _im_context::GtkIMContext)
        ret = ccall(("gtk_event_controller_key_set_im_context", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _im_context)
        nothing
    end
    function EventControllerLegacy()
        ret = ccall(("gtk_event_controller_legacy_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function EventControllerMotion()
        ret = ccall(("gtk_event_controller_motion_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function contains_pointer(instance::GtkEventControllerMotion)
        ret = ccall(("gtk_event_controller_motion_contains_pointer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_pointer(instance::GtkEventControllerMotion)
        ret = ccall(("gtk_event_controller_motion_is_pointer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function EventControllerScroll(_flags)
        ret = ccall(("gtk_event_controller_scroll_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _flags)
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function get_flags(instance::GtkEventControllerScroll)
        ret = ccall(("gtk_event_controller_scroll_get_flags", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_flags(instance::GtkEventControllerScroll, _flags)
        ret = ccall(("gtk_event_controller_scroll_set_flags", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function EveryFilter()
        ret = ccall(("gtk_every_filter_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEveryFilter, ret, true)
        ret2
    end
    function Expander(_label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_expander_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Expander_new_with_mnemonic(_label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_expander_new_with_mnemonic", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_expanded(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_expanded", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_label(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_widget(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_label_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_resize_toplevel(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_resize_toplevel", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_markup(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_use_markup", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_child(instance::GtkExpander, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_expander_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_expanded(instance::GtkExpander, _expanded)
        ret = ccall(("gtk_expander_set_expanded", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expanded)
        nothing
    end
    function set_label(instance::GtkExpander, _label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_expander_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_label_widget(instance::GtkExpander, _label_widget::Maybe(GtkWidget))
        _label_widget = if _label_widget == nothing
                C_NULL
            else
                _label_widget
            end
        ret = ccall(("gtk_expander_set_label_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function set_resize_toplevel(instance::GtkExpander, _resize_toplevel)
        ret = ccall(("gtk_expander_set_resize_toplevel", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resize_toplevel)
        nothing
    end
    function set_use_markup(instance::GtkExpander, _use_markup)
        ret = ccall(("gtk_expander_set_use_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function set_use_underline(instance::GtkExpander, _use_underline)
        ret = ccall(("gtk_expander_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function FileChooserNative(_title, _parent::Maybe(GtkWindow), _action, _accept_label, _cancel_label)
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _accept_label = if _accept_label == nothing
                C_NULL
            else
                _accept_label
            end
        _cancel_label = if _cancel_label == nothing
                C_NULL
            else
                _cancel_label
            end
        ret = ccall(("gtk_file_chooser_native_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}, Int32, Ptr{UInt8}, Ptr{UInt8}), _title, _parent, _action, _accept_label, _cancel_label)
        ret2 = convert(GtkFileChooserNative, ret, true)
        ret2
    end
    function get_accept_label(instance::GtkFileChooserNative)
        ret = ccall(("gtk_file_chooser_native_get_accept_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_cancel_label(instance::GtkFileChooserNative)
        ret = ccall(("gtk_file_chooser_native_get_cancel_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_accept_label(instance::GtkFileChooserNative, _accept_label)
        _accept_label = if _accept_label == nothing
                C_NULL
            else
                _accept_label
            end
        ret = ccall(("gtk_file_chooser_native_set_accept_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _accept_label)
        nothing
    end
    function set_cancel_label(instance::GtkFileChooserNative, _cancel_label)
        _cancel_label = if _cancel_label == nothing
                C_NULL
            else
                _cancel_label
            end
        ret = ccall(("gtk_file_chooser_native_set_cancel_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _cancel_label)
        nothing
    end
    function FileChooserWidget(_action)
        ret = ccall(("gtk_file_chooser_widget_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _action)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function FileFilter()
        ret = ccall(("gtk_file_filter_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkFileFilter, ret, true)
        ret2
    end
    function FileFilter_new_from_gvariant(_variant::GVariant)
        ret = ccall(("gtk_file_filter_new_from_gvariant", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GVariant},), _variant)
        ret2 = convert(GtkFileFilter, ret, true)
        ret2
    end
    function add_mime_type(instance::GtkFileFilter, _mime_type)
        ret = ccall(("gtk_file_filter_add_mime_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _mime_type)
        nothing
    end
    function add_pattern(instance::GtkFileFilter, _pattern)
        ret = ccall(("gtk_file_filter_add_pattern", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _pattern)
        nothing
    end
    function add_pixbuf_formats(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_add_pixbuf_formats", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function add_suffix(instance::GtkFileFilter, _suffix)
        ret = ccall(("gtk_file_filter_add_suffix", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _suffix)
        nothing
    end
    function get_attributes(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_get_attributes", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret
    end
    function get_name(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_name(instance::GtkFileFilter, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_file_filter_set_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function to_gvariant(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_to_gvariant", "libgtk-4.so.1"), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function changed(instance::GtkFilter, _change)
        ret = ccall(("gtk_filter_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _change)
        nothing
    end
    function get_strictness(instance::GtkFilter)
        ret = ccall(("gtk_filter_get_strictness", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = FilterMatch(ret)
        ret2
    end
    function match(instance::GtkFilter, _item::GObject)
        ret = ccall(("gtk_filter_match", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _item)
        ret2 = convert(Bool, ret)
        ret2
    end
    function FilterListModel(_model, _filter::Maybe(GtkFilter))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _filter = if _filter == nothing
                C_NULL
            else
                _filter
            end
        ret = ccall(("gtk_filter_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _model, _filter)
        ret2 = convert(GtkFilterListModel, ret, true)
        ret2
    end
    function get_filter(instance::GtkFilterListModel)
        ret = ccall(("gtk_filter_list_model_get_filter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkFilter, ret, false)
            end
        ret2
    end
    function get_incremental(instance::GtkFilterListModel)
        ret = ccall(("gtk_filter_list_model_get_incremental", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkFilterListModel)
        ret = ccall(("gtk_filter_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_pending(instance::GtkFilterListModel)
        ret = ccall(("gtk_filter_list_model_get_pending", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_filter(instance::GtkFilterListModel, _filter::Maybe(GtkFilter))
        _filter = if _filter == nothing
                C_NULL
            else
                _filter
            end
        ret = ccall(("gtk_filter_list_model_set_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function set_incremental(instance::GtkFilterListModel, _incremental)
        ret = ccall(("gtk_filter_list_model_set_incremental", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _incremental)
        nothing
    end
    function set_model(instance::GtkFilterListModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_filter_list_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function Fixed()
        ret = ccall(("gtk_fixed_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child_position(instance::GtkFixed, _widget::GtkWidget)
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_fixed_get_child_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, _widget, m_x, m_y)
        _x = m_x[]
        _y = m_y[]
        (_x, _y)
    end
    function get_child_transform(instance::GtkFixed, _widget::GtkWidget)
        ret = ccall(("gtk_fixed_get_child_transform", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskTransform, ret, false)
            end
        ret2
    end
    function move(instance::GtkFixed, _widget::GtkWidget, _x, _y)
        ret = ccall(("gtk_fixed_move", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64), instance, _widget, _x, _y)
        nothing
    end
    function put(instance::GtkFixed, _widget::GtkWidget, _x, _y)
        ret = ccall(("gtk_fixed_put", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64), instance, _widget, _x, _y)
        nothing
    end
    function remove(instance::GtkFixed, _widget::GtkWidget)
        ret = ccall(("gtk_fixed_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_child_transform(instance::GtkFixed, _widget::GtkWidget, _transform::Maybe(GskTransform))
        _transform = if _transform == nothing
                C_NULL
            else
                _transform
            end
        ret = ccall(("gtk_fixed_set_child_transform", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GskTransform}), instance, _widget, _transform)
        nothing
    end
    function FixedLayout()
        ret = ccall(("gtk_fixed_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function get_transform(instance::GtkFixedLayoutChild)
        ret = ccall(("gtk_fixed_layout_child_get_transform", "libgtk-4.so.1"), Ptr{GskTransform}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GskTransform, ret, false)
            end
        ret2
    end
    function set_transform(instance::GtkFixedLayoutChild, _transform::GskTransform)
        ret = ccall(("gtk_fixed_layout_child_set_transform", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskTransform}), instance, _transform)
        nothing
    end
    function FlattenListModel(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_flatten_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkFlattenListModel, ret, true)
        ret2
    end
    function get_model(instance::GtkFlattenListModel)
        ret = ccall(("gtk_flatten_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_model_for_item(instance::GtkFlattenListModel, _position)
        ret = ccall(("gtk_flatten_list_model_get_model_for_item", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function set_model(instance::GtkFlattenListModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_flatten_list_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function FlowBox()
        ret = ccall(("gtk_flow_box_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function bind_model(instance::GtkFlowBox, _model, _create_widget_func::Function, _user_data::Maybe(Nothing), _user_data_free_func::Function)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _create_widget_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Ptr{GObject} (Ptr{GObject}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_data_free_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_flow_box_bind_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _model, _create_widget_func, _user_data, _user_data_free_func)
        nothing
    end
    function get_activate_on_single_click(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_activate_on_single_click", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child_at_index(instance::GtkFlowBox, _idx)
        ret = ccall(("gtk_flow_box_get_child_at_index", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _idx)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkFlowBoxChild, ret, false)
            end
        ret2
    end
    function get_child_at_pos(instance::GtkFlowBox, _x, _y)
        ret = ccall(("gtk_flow_box_get_child_at_pos", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, Int32), instance, _x, _y)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkFlowBoxChild, ret, false)
            end
        ret2
    end
    function get_column_spacing(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_column_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_homogeneous(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_children_per_line(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_max_children_per_line", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_children_per_line(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_min_children_per_line", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_spacing(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_row_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_children(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_selected_children", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_selection_mode(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_selection_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function insert(instance::GtkFlowBox, _widget::GtkWidget, _position)
        ret = ccall(("gtk_flow_box_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _widget, _position)
        nothing
    end
    function invalidate_filter(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_invalidate_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function invalidate_sort(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_invalidate_sort", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove(instance::GtkFlowBox, _widget::GtkWidget)
        ret = ccall(("gtk_flow_box_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function select_all(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_select_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function select_child(instance::GtkFlowBox, _child::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_select_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function selected_foreach(instance::GtkFlowBox, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_flow_box_selected_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function set_activate_on_single_click(instance::GtkFlowBox, _single)
        ret = ccall(("gtk_flow_box_set_activate_on_single_click", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_column_spacing(instance::GtkFlowBox, _spacing)
        ret = ccall(("gtk_flow_box_set_column_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_filter_func(instance::GtkFlowBox, _filter_func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _filter_func = if _filter_func == nothing
                C_NULL
            else
                _filter_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_flow_box_set_filter_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _filter_func, _user_data, _destroy)
        nothing
    end
    function set_hadjustment(instance::GtkFlowBox, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_flow_box_set_hadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_homogeneous(instance::GtkFlowBox, _homogeneous)
        ret = ccall(("gtk_flow_box_set_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_max_children_per_line(instance::GtkFlowBox, _n_children)
        ret = ccall(("gtk_flow_box_set_max_children_per_line", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _n_children)
        nothing
    end
    function set_min_children_per_line(instance::GtkFlowBox, _n_children)
        ret = ccall(("gtk_flow_box_set_min_children_per_line", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _n_children)
        nothing
    end
    function set_row_spacing(instance::GtkFlowBox, _spacing)
        ret = ccall(("gtk_flow_box_set_row_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_selection_mode(instance::GtkFlowBox, _mode)
        ret = ccall(("gtk_flow_box_set_selection_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_sort_func(instance::GtkFlowBox, _sort_func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _sort_func = if _sort_func == nothing
                C_NULL
            else
                _sort_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_flow_box_set_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _sort_func, _user_data, _destroy)
        nothing
    end
    function set_vadjustment(instance::GtkFlowBox, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_flow_box_set_vadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function unselect_all(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_unselect_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unselect_child(instance::GtkFlowBox, _child::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_unselect_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function FlowBoxChild()
        ret = ccall(("gtk_flow_box_child_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function changed(instance::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_child_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_child(instance::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_child_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_index(instance::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_child_get_index", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function is_selected(instance::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_child_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_child(instance::GtkFlowBoxChild, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_flow_box_child_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function FontButton()
        ret = ccall(("gtk_font_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function FontButton_new_with_font(_fontname)
        ret = ccall(("gtk_font_button_new_with_font", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _fontname)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_modal(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_modal", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_font(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_use_font", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_size(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_use_size", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_modal(instance::GtkFontButton, _modal)
        ret = ccall(("gtk_font_button_set_modal", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_title(instance::GtkFontButton, _title)
        ret = ccall(("gtk_font_button_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function set_use_font(instance::GtkFontButton, _use_font)
        ret = ccall(("gtk_font_button_set_use_font", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_font)
        nothing
    end
    function set_use_size(instance::GtkFontButton, _use_size)
        ret = ccall(("gtk_font_button_set_use_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_size)
        nothing
    end
    function FontChooserDialog(_title, _parent::Maybe(GtkWindow))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_font_chooser_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _title, _parent)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function FontChooserWidget()
        ret = ccall(("gtk_font_chooser_widget_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Frame(_label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_frame_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_label(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_align(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_label_align", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_label_widget(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_label_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_child(instance::GtkFrame, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_frame_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_label(instance::GtkFrame, _label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_frame_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_label_align(instance::GtkFrame, _xalign)
        ret = ccall(("gtk_frame_set_label_align", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_label_widget(instance::GtkFrame, _label_widget::Maybe(GtkWidget))
        _label_widget = if _label_widget == nothing
                C_NULL
            else
                _label_widget
            end
        ret = ccall(("gtk_frame_set_label_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function GLArea()
        ret = ccall(("gtk_gl_area_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function attach_buffers(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_attach_buffers", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_auto_render(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_auto_render", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_context(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkGLContext, ret, false)
        ret2
    end
    function get_error(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_error", "libgtk-4.so.1"), Ptr{GError}, (Ptr{GObject},), instance)
        ret
    end
    function get_has_depth_buffer(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_has_depth_buffer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_stencil_buffer(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_has_stencil_buffer", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_required_version(instance::GtkGLArea)
        m_major = Ref{Int32}()
        m_minor = Ref{Int32}()
        ret = ccall(("gtk_gl_area_get_required_version", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_major, m_minor)
        _major = m_major[]
        _minor = m_minor[]
        (_major, _minor)
    end
    function get_use_es(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_use_es", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function make_current(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_make_current", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function queue_render(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_queue_render", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_auto_render(instance::GtkGLArea, _auto_render)
        ret = ccall(("gtk_gl_area_set_auto_render", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _auto_render)
        nothing
    end
    function set_error(instance::GtkGLArea, _error)
        _error = if _error == nothing
                C_NULL
            else
                _error
            end
        ret = ccall(("gtk_gl_area_set_error", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GError}), instance, _error)
        nothing
    end
    function set_has_depth_buffer(instance::GtkGLArea, _has_depth_buffer)
        ret = ccall(("gtk_gl_area_set_has_depth_buffer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_depth_buffer)
        nothing
    end
    function set_has_stencil_buffer(instance::GtkGLArea, _has_stencil_buffer)
        ret = ccall(("gtk_gl_area_set_has_stencil_buffer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_stencil_buffer)
        nothing
    end
    function set_required_version(instance::GtkGLArea, _major, _minor)
        ret = ccall(("gtk_gl_area_set_required_version", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _major, _minor)
        nothing
    end
    function set_use_es(instance::GtkGLArea, _use_es)
        ret = ccall(("gtk_gl_area_set_use_es", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_es)
        nothing
    end
    function get_bounding_box(instance::GtkGesture)
        m_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_gesture_get_bounding_box", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_rect)
        ret2 = convert(Bool, ret)
        _rect = m_rect[]
        _rect = convert(GdkRectangle, _rect, false)
        (ret2, _rect)
    end
    function get_bounding_box_center(instance::GtkGesture)
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_gesture_get_bounding_box_center", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_x, m_y)
        ret2 = convert(Bool, ret)
        _x = m_x[]
        _y = m_y[]
        (ret2, _x, _y)
    end
    function get_device(instance::GtkGesture)
        ret = ccall(("gtk_gesture_get_device", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDevice, ret, false)
            end
        ret2
    end
    function get_group(instance::GtkGesture)
        ret = ccall(("gtk_gesture_get_group", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_last_event(instance::GtkGesture, _sequence::Maybe(GdkEventSequence))
        _sequence = if _sequence == nothing
                C_NULL
            else
                _sequence
            end
        ret = ccall(("gtk_gesture_get_last_event", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GdkEventSequence}), instance, _sequence)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkEvent, ret, false)
            end
        ret2
    end
    function get_last_updated_sequence(instance::GtkGesture)
        ret = ccall(("gtk_gesture_get_last_updated_sequence", "libgtk-4.so.1"), Ptr{GdkEventSequence}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkEventSequence, ret, false)
            end
        ret2
    end
    function get_point(instance::GtkGesture, _sequence::Maybe(GdkEventSequence))
        _sequence = if _sequence == nothing
                C_NULL
            else
                _sequence
            end
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_gesture_get_point", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GdkEventSequence}, Ptr{Float64}, Ptr{Float64}), instance, _sequence, m_x, m_y)
        ret2 = convert(Bool, ret)
        _x = m_x[]
        _y = m_y[]
        (ret2, _x, _y)
    end
    function get_sequence_state(instance::GtkGesture, _sequence::GdkEventSequence)
        ret = ccall(("gtk_gesture_get_sequence_state", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GdkEventSequence}), instance, _sequence)
        ret2 = EventSequenceState(ret)
        ret2
    end
    function get_sequences(instance::GtkGesture)
        ret = ccall(("gtk_gesture_get_sequences", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GdkEventSequence}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function group(instance::GtkGesture, _gesture::GtkGesture)
        ret = ccall(("gtk_gesture_group", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _gesture)
        nothing
    end
    function handles_sequence(instance::GtkGesture, _sequence::Maybe(GdkEventSequence))
        _sequence = if _sequence == nothing
                C_NULL
            else
                _sequence
            end
        ret = ccall(("gtk_gesture_handles_sequence", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GdkEventSequence}), instance, _sequence)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_active(instance::GtkGesture)
        ret = ccall(("gtk_gesture_is_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_grouped_with(instance::GtkGesture, _other::GtkGesture)
        ret = ccall(("gtk_gesture_is_grouped_with", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _other)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_recognized(instance::GtkGesture)
        ret = ccall(("gtk_gesture_is_recognized", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_sequence_state(instance::GtkGesture, _sequence::GdkEventSequence, _state)
        ret = ccall(("gtk_gesture_set_sequence_state", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GdkEventSequence}, Int32), instance, _sequence, _state)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_state(instance::GtkGesture, _state)
        ret = ccall(("gtk_gesture_set_state", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _state)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ungroup(instance::GtkGesture)
        ret = ccall(("gtk_gesture_ungroup", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function GestureClick()
        ret = ccall(("gtk_gesture_click_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function GestureDrag()
        ret = ccall(("gtk_gesture_drag_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_offset(instance::GtkGestureDrag)
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_gesture_drag_get_offset", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_x, m_y)
        ret2 = convert(Bool, ret)
        _x = m_x[]
        _y = m_y[]
        (ret2, _x, _y)
    end
    function get_start_point(instance::GtkGestureDrag)
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_gesture_drag_get_start_point", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_x, m_y)
        ret2 = convert(Bool, ret)
        _x = m_x[]
        _y = m_y[]
        (ret2, _x, _y)
    end
    function GestureLongPress()
        ret = ccall(("gtk_gesture_long_press_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_delay_factor(instance::GtkGestureLongPress)
        ret = ccall(("gtk_gesture_long_press_get_delay_factor", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_delay_factor(instance::GtkGestureLongPress, _delay_factor)
        ret = ccall(("gtk_gesture_long_press_set_delay_factor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _delay_factor)
        nothing
    end
    function GesturePan(_orientation)
        ret = ccall(("gtk_gesture_pan_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _orientation)
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_orientation(instance::GtkGesturePan)
        ret = ccall(("gtk_gesture_pan_get_orientation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function set_orientation(instance::GtkGesturePan, _orientation)
        ret = ccall(("gtk_gesture_pan_set_orientation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function GestureRotate()
        ret = ccall(("gtk_gesture_rotate_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_angle_delta(instance::GtkGestureRotate)
        ret = ccall(("gtk_gesture_rotate_get_angle_delta", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_button(instance::GtkGestureSingle)
        ret = ccall(("gtk_gesture_single_get_button", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_current_button(instance::GtkGestureSingle)
        ret = ccall(("gtk_gesture_single_get_current_button", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_current_sequence(instance::GtkGestureSingle)
        ret = ccall(("gtk_gesture_single_get_current_sequence", "libgtk-4.so.1"), Ptr{GdkEventSequence}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkEventSequence, ret, true)
            end
        ret2
    end
    function get_exclusive(instance::GtkGestureSingle)
        ret = ccall(("gtk_gesture_single_get_exclusive", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_touch_only(instance::GtkGestureSingle)
        ret = ccall(("gtk_gesture_single_get_touch_only", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_button(instance::GtkGestureSingle, _button)
        ret = ccall(("gtk_gesture_single_set_button", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _button)
        nothing
    end
    function set_exclusive(instance::GtkGestureSingle, _exclusive)
        ret = ccall(("gtk_gesture_single_set_exclusive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _exclusive)
        nothing
    end
    function set_touch_only(instance::GtkGestureSingle, _touch_only)
        ret = ccall(("gtk_gesture_single_set_touch_only", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _touch_only)
        nothing
    end
    function GestureStylus()
        ret = ccall(("gtk_gesture_stylus_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_axes(instance::GtkGestureStylus, _axes)
        _axes = convert(Vector{Int32}, _axes)
        m_values = Ref{Ptr{Float64}}()
        ret = ccall(("gtk_gesture_stylus_get_axes", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Int32}, Ptr{Ptr{Float64}}), instance, _axes, m_values)
        ret2 = convert(Bool, ret)
        _values = m_values[]
        (ret2, _values)
    end
    function get_axis(instance::GtkGestureStylus, _axis)
        m_value = Ref{Float64}()
        ret = ccall(("gtk_gesture_stylus_get_axis", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Ptr{Float64}), instance, _axis, m_value)
        ret2 = convert(Bool, ret)
        _value = m_value[]
        (ret2, _value)
    end
    function get_backlog(instance::GtkGestureStylus)
        m_backlog = Ref{Ptr{GdkTimeCoord}}()
        m_n_elems = Ref{UInt32}()
        ret = ccall(("gtk_gesture_stylus_get_backlog", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GdkTimeCoord}}, Ptr{UInt32}), instance, m_backlog, m_n_elems)
        ret2 = convert(Bool, ret)
        _backlog = m_backlog[]
        _n_elems = m_n_elems[]
        (ret2, _backlog)
    end
    function get_device_tool(instance::GtkGestureStylus)
        ret = ccall(("gtk_gesture_stylus_get_device_tool", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDeviceTool, ret, false)
            end
        ret2
    end
    function GestureSwipe()
        ret = ccall(("gtk_gesture_swipe_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_velocity(instance::GtkGestureSwipe)
        m_velocity_x = Ref{Float64}()
        m_velocity_y = Ref{Float64}()
        ret = ccall(("gtk_gesture_swipe_get_velocity", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_velocity_x, m_velocity_y)
        ret2 = convert(Bool, ret)
        _velocity_x = m_velocity_x[]
        _velocity_y = m_velocity_y[]
        (ret2, _velocity_x, _velocity_y)
    end
    function GestureZoom()
        ret = ccall(("gtk_gesture_zoom_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkGesture, ret, true)
        ret2
    end
    function get_scale_delta(instance::GtkGestureZoom)
        ret = ccall(("gtk_gesture_zoom_get_scale_delta", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function Grid()
        ret = ccall(("gtk_grid_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function attach(instance::GtkGrid, _child::GtkWidget, _column, _row, _width, _height)
        ret = ccall(("gtk_grid_attach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32, Int32, Int32), instance, _child, _column, _row, _width, _height)
        nothing
    end
    function attach_next_to(instance::GtkGrid, _child::GtkWidget, _sibling::Maybe(GtkWidget), _side, _width, _height)
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_grid_attach_next_to", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32, Int32, Int32), instance, _child, _sibling, _side, _width, _height)
        nothing
    end
    function get_baseline_row(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_baseline_row", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_child_at(instance::GtkGrid, _column, _row)
        ret = ccall(("gtk_grid_get_child_at", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, Int32), instance, _column, _row)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_column_homogeneous(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_column_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_column_spacing(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_column_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_baseline_position(instance::GtkGrid, _row)
        ret = ccall(("gtk_grid_get_row_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _row)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_row_homogeneous(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_row_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_spacing(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_row_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function insert_column(instance::GtkGrid, _position)
        ret = ccall(("gtk_grid_insert_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function insert_next_to(instance::GtkGrid, _sibling::GtkWidget, _side)
        ret = ccall(("gtk_grid_insert_next_to", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _sibling, _side)
        nothing
    end
    function insert_row(instance::GtkGrid, _position)
        ret = ccall(("gtk_grid_insert_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function query_child(instance::GtkGrid, _child::GtkWidget)
        m_column = Ref{Int32}()
        m_row = Ref{Int32}()
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_grid_query_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}), instance, _child, m_column, m_row, m_width, m_height)
        _column = m_column[]
        _row = m_row[]
        _width = m_width[]
        _height = m_height[]
        (_column, _row, _width, _height)
    end
    function remove(instance::GtkGrid, _child::GtkWidget)
        ret = ccall(("gtk_grid_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove_column(instance::GtkGrid, _position)
        ret = ccall(("gtk_grid_remove_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function remove_row(instance::GtkGrid, _position)
        ret = ccall(("gtk_grid_remove_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_baseline_row(instance::GtkGrid, _row)
        ret = ccall(("gtk_grid_set_baseline_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _row)
        nothing
    end
    function set_column_homogeneous(instance::GtkGrid, _homogeneous)
        ret = ccall(("gtk_grid_set_column_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_column_spacing(instance::GtkGrid, _spacing)
        ret = ccall(("gtk_grid_set_column_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_row_baseline_position(instance::GtkGrid, _row, _pos)
        ret = ccall(("gtk_grid_set_row_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _row, _pos)
        nothing
    end
    function set_row_homogeneous(instance::GtkGrid, _homogeneous)
        ret = ccall(("gtk_grid_set_row_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_row_spacing(instance::GtkGrid, _spacing)
        ret = ccall(("gtk_grid_set_row_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function GridLayout()
        ret = ccall(("gtk_grid_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function get_baseline_row(instance::GtkGridLayout)
        ret = ccall(("gtk_grid_layout_get_baseline_row", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_column_homogeneous(instance::GtkGridLayout)
        ret = ccall(("gtk_grid_layout_get_column_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_column_spacing(instance::GtkGridLayout)
        ret = ccall(("gtk_grid_layout_get_column_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_baseline_position(instance::GtkGridLayout, _row)
        ret = ccall(("gtk_grid_layout_get_row_baseline_position", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _row)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_row_homogeneous(instance::GtkGridLayout)
        ret = ccall(("gtk_grid_layout_get_row_homogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_spacing(instance::GtkGridLayout)
        ret = ccall(("gtk_grid_layout_get_row_spacing", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_baseline_row(instance::GtkGridLayout, _row)
        ret = ccall(("gtk_grid_layout_set_baseline_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _row)
        nothing
    end
    function set_column_homogeneous(instance::GtkGridLayout, _homogeneous)
        ret = ccall(("gtk_grid_layout_set_column_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_column_spacing(instance::GtkGridLayout, _spacing)
        ret = ccall(("gtk_grid_layout_set_column_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_row_baseline_position(instance::GtkGridLayout, _row, _pos)
        ret = ccall(("gtk_grid_layout_set_row_baseline_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _row, _pos)
        nothing
    end
    function set_row_homogeneous(instance::GtkGridLayout, _homogeneous)
        ret = ccall(("gtk_grid_layout_set_row_homogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_row_spacing(instance::GtkGridLayout, _spacing)
        ret = ccall(("gtk_grid_layout_set_row_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function get_column(instance::GtkGridLayoutChild)
        ret = ccall(("gtk_grid_layout_child_get_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_column_span(instance::GtkGridLayoutChild)
        ret = ccall(("gtk_grid_layout_child_get_column_span", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_row(instance::GtkGridLayoutChild)
        ret = ccall(("gtk_grid_layout_child_get_row", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_span(instance::GtkGridLayoutChild)
        ret = ccall(("gtk_grid_layout_child_get_row_span", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_column(instance::GtkGridLayoutChild, _column)
        ret = ccall(("gtk_grid_layout_child_set_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_column_span(instance::GtkGridLayoutChild, _span)
        ret = ccall(("gtk_grid_layout_child_set_column_span", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _span)
        nothing
    end
    function set_row(instance::GtkGridLayoutChild, _row)
        ret = ccall(("gtk_grid_layout_child_set_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _row)
        nothing
    end
    function set_row_span(instance::GtkGridLayoutChild, _span)
        ret = ccall(("gtk_grid_layout_child_set_row_span", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _span)
        nothing
    end
    function GridView(_model, _factory::Maybe(GtkListItemFactory))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_grid_view_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _model, _factory)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_enable_rubberband(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_enable_rubberband", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_factory(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_factory", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListItemFactory, ret, false)
            end
        ret2
    end
    function get_max_columns(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_max_columns", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_columns(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_min_columns", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_single_click_activate(instance::GtkGridView)
        ret = ccall(("gtk_grid_view_get_single_click_activate", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_enable_rubberband(instance::GtkGridView, _enable_rubberband)
        ret = ccall(("gtk_grid_view_set_enable_rubberband", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_rubberband)
        nothing
    end
    function set_factory(instance::GtkGridView, _factory::Maybe(GtkListItemFactory))
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_grid_view_set_factory", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _factory)
        nothing
    end
    function set_max_columns(instance::GtkGridView, _max_columns)
        ret = ccall(("gtk_grid_view_set_max_columns", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _max_columns)
        nothing
    end
    function set_min_columns(instance::GtkGridView, _min_columns)
        ret = ccall(("gtk_grid_view_set_min_columns", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _min_columns)
        nothing
    end
    function set_model(instance::GtkGridView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_grid_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_single_click_activate(instance::GtkGridView, _single_click_activate)
        ret = ccall(("gtk_grid_view_set_single_click_activate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single_click_activate)
        nothing
    end
    function HeaderBar()
        ret = ccall(("gtk_header_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_decoration_layout(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_decoration_layout", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_show_title_buttons(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_show_title_buttons", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title_widget(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_title_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function pack_end(instance::GtkHeaderBar, _child::GtkWidget)
        ret = ccall(("gtk_header_bar_pack_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function pack_start(instance::GtkHeaderBar, _child::GtkWidget)
        ret = ccall(("gtk_header_bar_pack_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::GtkHeaderBar, _child::GtkWidget)
        ret = ccall(("gtk_header_bar_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_decoration_layout(instance::GtkHeaderBar, _layout)
        _layout = if _layout == nothing
                C_NULL
            else
                _layout
            end
        ret = ccall(("gtk_header_bar_set_decoration_layout", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _layout)
        nothing
    end
    function set_show_title_buttons(instance::GtkHeaderBar, _setting)
        ret = ccall(("gtk_header_bar_set_show_title_buttons", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_title_widget(instance::GtkHeaderBar, _title_widget::Maybe(GtkWidget))
        _title_widget = if _title_widget == nothing
                C_NULL
            else
                _title_widget
            end
        ret = ccall(("gtk_header_bar_set_title_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _title_widget)
        nothing
    end
    function delete_surrounding(instance::GtkIMContext, _offset, _n_chars)
        ret = ccall(("gtk_im_context_delete_surrounding", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32), instance, _offset, _n_chars)
        ret2 = convert(Bool, ret)
        ret2
    end
    function filter_key(instance::GtkIMContext, _press, _surface::GdkSurface, _device::GdkDevice, _time, _keycode, _state, _group)
        ret = ccall(("gtk_im_context_filter_key", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Cint, Ptr{GObject}, Ptr{GObject}, UInt32, UInt32, Int32, Int32), instance, _press, _surface, _device, _time, _keycode, _state, _group)
        ret2 = convert(Bool, ret)
        ret2
    end
    function focus_in(instance::GtkIMContext)
        ret = ccall(("gtk_im_context_focus_in", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function focus_out(instance::GtkIMContext)
        ret = ccall(("gtk_im_context_focus_out", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_preedit_string(instance::GtkIMContext)
        m_str = Ref{Ptr{UInt8}}()
        m_attrs = Ref{Ptr{PangoAttrList}}()
        m_cursor_pos = Ref{Int32}()
        ret = ccall(("gtk_im_context_get_preedit_string", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}, Ptr{Ptr{PangoAttrList}}, Ptr{Int32}), instance, m_str, m_attrs, m_cursor_pos)
        _str = m_str[]
        _str = if _str == C_NULL
                nothing
            else
                bytestring(_str, true)
            end
        _attrs = m_attrs[]
        _attrs = convert(PangoAttrList, _attrs, true)
        _cursor_pos = m_cursor_pos[]
        (_str, _attrs, _cursor_pos)
    end
    function get_surrounding_with_selection(instance::GtkIMContext)
        m_text = Ref{Ptr{UInt8}}()
        m_cursor_index = Ref{Int32}()
        m_anchor_index = Ref{Int32}()
        ret = ccall(("gtk_im_context_get_surrounding_with_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{UInt8}}, Ptr{Int32}, Ptr{Int32}), instance, m_text, m_cursor_index, m_anchor_index)
        ret2 = convert(Bool, ret)
        _text = m_text[]
        _text = if _text == C_NULL
                nothing
            else
                bytestring(_text, true)
            end
        _cursor_index = m_cursor_index[]
        _anchor_index = m_anchor_index[]
        (ret2, _text, _cursor_index, _anchor_index)
    end
    function reset(instance::GtkIMContext)
        ret = ccall(("gtk_im_context_reset", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_client_widget(instance::GtkIMContext, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_im_context_set_client_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_cursor_location(instance::GtkIMContext, _area::GdkRectangle)
        ret = ccall(("gtk_im_context_set_cursor_location", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRectangle}), instance, _area)
        nothing
    end
    function set_surrounding_with_selection(instance::GtkIMContext, _text, _len, _cursor_index, _anchor_index)
        ret = ccall(("gtk_im_context_set_surrounding_with_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32, Int32, Int32), instance, _text, _len, _cursor_index, _anchor_index)
        nothing
    end
    function set_use_preedit(instance::GtkIMContext, _use_preedit)
        ret = ccall(("gtk_im_context_set_use_preedit", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_preedit)
        nothing
    end
    function IMContextSimple()
        ret = ccall(("gtk_im_context_simple_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkIMContext, ret, true)
        ret2
    end
    function add_compose_file(instance::GtkIMContextSimple, _compose_file)
        ret = ccall(("gtk_im_context_simple_add_compose_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _compose_file)
        nothing
    end
    function IMMulticontext()
        ret = ccall(("gtk_im_multicontext_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkIMContext, ret, true)
        ret2
    end
    function get_context_id(instance::GtkIMMulticontext)
        ret = ccall(("gtk_im_multicontext_get_context_id", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_context_id(instance::GtkIMMulticontext, _context_id)
        _context_id = if _context_id == nothing
                C_NULL
            else
                _context_id
            end
        ret = ccall(("gtk_im_multicontext_set_context_id", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _context_id)
        nothing
    end
    function IconPaintable_new_for_file(_file, _size, _scale)
        ret = ccall(("gtk_icon_paintable_new_for_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32, Int32), _file, _size, _scale)
        ret2 = convert(GtkIconPaintable, ret, true)
        ret2
    end
    function get_file(instance::GtkIconPaintable)
        ret = ccall(("gtk_icon_paintable_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function get_icon_name(instance::GtkIconPaintable)
        ret = ccall(("gtk_icon_paintable_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function is_symbolic(instance::GtkIconPaintable)
        ret = ccall(("gtk_icon_paintable_is_symbolic", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function IconView()
        ret = ccall(("gtk_icon_view_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function IconView_new_with_area(_area::GtkCellArea)
        ret = ccall(("gtk_icon_view_new_with_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _area)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function IconView_new_with_model(_model)
        ret = ccall(("gtk_icon_view_new_with_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function create_drag_icon(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_create_drag_icon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function enable_model_drag_dest(instance::GtkIconView, _formats::GdkContentFormats, _actions)
        ret = ccall(("gtk_icon_view_enable_model_drag_dest", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkContentFormats}, Int32), instance, _formats, _actions)
        nothing
    end
    function enable_model_drag_source(instance::GtkIconView, _start_button_mask, _formats::GdkContentFormats, _actions)
        ret = ccall(("gtk_icon_view_enable_model_drag_source", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GdkContentFormats}, Int32), instance, _start_button_mask, _formats, _actions)
        nothing
    end
    function get_activate_on_single_click(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_activate_on_single_click", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_cell_rect(instance::GtkIconView, _path::GtkTreePath, _cell::Maybe(GtkCellRenderer))
        _cell = if _cell == nothing
                C_NULL
            else
                _cell
            end
        m_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_icon_view_get_cell_rect", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, _path, _cell, m_rect)
        ret2 = convert(Bool, ret)
        _rect = m_rect[]
        _rect = convert(GdkRectangle, _rect, false)
        (ret2, _rect)
    end
    function get_column_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_column_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_columns(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_columns", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_cursor(instance::GtkIconView)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_cell = Ref{Ptr{GObject}}()
        ret = ccall(("gtk_icon_view_get_cursor", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GObject}}), instance, m_path, m_cell)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _cell = m_cell[]
        _cell = convert(GtkCellRenderer, _cell, false)
        (ret2, _path, _cell)
    end
    function get_dest_item_at_pos(instance::GtkIconView, _drag_x, _drag_y)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_pos = Ref{Int32}()
        ret = ccall(("gtk_icon_view_get_dest_item_at_pos", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Ptr{Ptr{GtkTreePath}}, Ptr{Int32}), instance, _drag_x, _drag_y, m_path, m_pos)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _pos = m_pos[]
        _pos = IconViewDropPosition(_pos)
        (ret2, _path, _pos)
    end
    function get_drag_dest_item(instance::GtkIconView)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_pos = Ref{Int32}()
        ret = ccall(("gtk_icon_view_get_drag_dest_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Int32}), instance, m_path, m_pos)
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _pos = m_pos[]
        _pos = IconViewDropPosition(_pos)
        (_path, _pos)
    end
    function get_item_at_pos(instance::GtkIconView, _x, _y)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_cell = Ref{Ptr{GObject}}()
        ret = ccall(("gtk_icon_view_get_item_at_pos", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GObject}}), instance, _x, _y, m_path, m_cell)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _cell = m_cell[]
        _cell = convert(GtkCellRenderer, _cell, false)
        (ret2, _path, _cell)
    end
    function get_item_column(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_get_item_column", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret
    end
    function get_item_orientation(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_orientation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_item_padding(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_padding", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_item_row(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_get_item_row", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret
    end
    function get_item_width(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_margin", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_markup_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_markup_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_path_at_pos(instance::GtkIconView, _x, _y)
        ret = ccall(("gtk_icon_view_get_path_at_pos", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Int32, Int32), instance, _x, _y)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function get_pixbuf_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_pixbuf_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reorderable(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_reorderable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_row_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_items(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_selected_items", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GtkTreePath}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_selection_mode(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_selection_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function get_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_text_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_text_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tooltip_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_tooltip_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tooltip_context(instance::GtkIconView, _x, _y, _keyboard_tip)
        m_model = Ref{Ptr{GObject}}()
        m_path = Ref{Ptr{GtkTreePath}}()
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_icon_view_get_tooltip_context", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Cint, Ptr{Ptr{GObject}}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GtkTreeIter}}), instance, _x, _y, _keyboard_tip, m_model, m_path, m_iter)
        ret2 = convert(Bool, ret)
        _model = m_model[]
        _model = convert(GObject, _model, false)
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _model, _path, _iter)
    end
    function get_visible_range(instance::GtkIconView)
        m_start_path = Ref{Ptr{GtkTreePath}}()
        m_end_path = Ref{Ptr{GtkTreePath}}()
        ret = ccall(("gtk_icon_view_get_visible_range", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GtkTreePath}}), instance, m_start_path, m_end_path)
        ret2 = convert(Bool, ret)
        _start_path = m_start_path[]
        _start_path = convert(GtkTreePath, _start_path, true)
        _end_path = m_end_path[]
        _end_path = convert(GtkTreePath, _end_path, true)
        (ret2, _start_path, _end_path)
    end
    function item_activated(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_item_activated", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function path_is_selected(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_path_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function scroll_to_path(instance::GtkIconView, _path::GtkTreePath, _use_align, _row_align, _col_align)
        ret = ccall(("gtk_icon_view_scroll_to_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Cint, Float32, Float32), instance, _path, _use_align, _row_align, _col_align)
        nothing
    end
    function select_all(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_select_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function select_path(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_select_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function selected_foreach(instance::GtkIconView, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_icon_view_selected_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function set_activate_on_single_click(instance::GtkIconView, _single)
        ret = ccall(("gtk_icon_view_set_activate_on_single_click", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_column_spacing(instance::GtkIconView, _column_spacing)
        ret = ccall(("gtk_icon_view_set_column_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column_spacing)
        nothing
    end
    function set_columns(instance::GtkIconView, _columns)
        ret = ccall(("gtk_icon_view_set_columns", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _columns)
        nothing
    end
    function set_cursor(instance::GtkIconView, _path::GtkTreePath, _cell::Maybe(GtkCellRenderer), _start_editing)
        _cell = if _cell == nothing
                C_NULL
            else
                _cell
            end
        ret = ccall(("gtk_icon_view_set_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Cint), instance, _path, _cell, _start_editing)
        nothing
    end
    function set_drag_dest_item(instance::GtkIconView, _path::Maybe(GtkTreePath), _pos)
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        ret = ccall(("gtk_icon_view_set_drag_dest_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Int32), instance, _path, _pos)
        nothing
    end
    function set_item_orientation(instance::GtkIconView, _orientation)
        ret = ccall(("gtk_icon_view_set_item_orientation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_item_padding(instance::GtkIconView, _item_padding)
        ret = ccall(("gtk_icon_view_set_item_padding", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _item_padding)
        nothing
    end
    function set_item_width(instance::GtkIconView, _item_width)
        ret = ccall(("gtk_icon_view_set_item_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _item_width)
        nothing
    end
    function set_margin(instance::GtkIconView, _margin)
        ret = ccall(("gtk_icon_view_set_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_markup_column(instance::GtkIconView, _column)
        ret = ccall(("gtk_icon_view_set_markup_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_model(instance::GtkIconView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_icon_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_pixbuf_column(instance::GtkIconView, _column)
        ret = ccall(("gtk_icon_view_set_pixbuf_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_reorderable(instance::GtkIconView, _reorderable)
        ret = ccall(("gtk_icon_view_set_reorderable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_row_spacing(instance::GtkIconView, _row_spacing)
        ret = ccall(("gtk_icon_view_set_row_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _row_spacing)
        nothing
    end
    function set_selection_mode(instance::GtkIconView, _mode)
        ret = ccall(("gtk_icon_view_set_selection_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_spacing(instance::GtkIconView, _spacing)
        ret = ccall(("gtk_icon_view_set_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function set_text_column(instance::GtkIconView, _column)
        ret = ccall(("gtk_icon_view_set_text_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_tooltip_cell(instance::GtkIconView, _tooltip::GtkTooltip, _path::GtkTreePath, _cell::Maybe(GtkCellRenderer))
        _cell = if _cell == nothing
                C_NULL
            else
                _cell
            end
        ret = ccall(("gtk_icon_view_set_tooltip_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}), instance, _tooltip, _path, _cell)
        nothing
    end
    function set_tooltip_column(instance::GtkIconView, _column)
        ret = ccall(("gtk_icon_view_set_tooltip_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_tooltip_item(instance::GtkIconView, _tooltip::GtkTooltip, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_set_tooltip_item", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreePath}), instance, _tooltip, _path)
        nothing
    end
    function unselect_all(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_unselect_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unselect_path(instance::GtkIconView, _path::GtkTreePath)
        ret = ccall(("gtk_icon_view_unselect_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function unset_model_drag_dest(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_unset_model_drag_dest", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unset_model_drag_source(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_unset_model_drag_source", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function Image()
        ret = ccall(("gtk_image_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_file(_filename)
        ret = ccall(("gtk_image_new_from_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _filename)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_gicon(_icon)
        ret = ccall(("gtk_image_new_from_gicon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _icon)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_icon_name(_icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_image_new_from_icon_name", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _icon_name)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_paintable(_paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_image_new_from_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _paintable)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_pixbuf(_pixbuf::Maybe(GdkPixbuf))
        _pixbuf = if _pixbuf == nothing
                C_NULL
            else
                _pixbuf
            end
        ret = ccall(("gtk_image_new_from_pixbuf", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _pixbuf)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Image_new_from_resource(_resource_path)
        ret = ccall(("gtk_image_new_from_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function clear(instance::GtkImage)
        ret = ccall(("gtk_image_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_gicon(instance::GtkImage)
        ret = ccall(("gtk_image_get_gicon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_icon_name(instance::GtkImage)
        ret = ccall(("gtk_image_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_icon_size(instance::GtkImage)
        ret = ccall(("gtk_image_get_icon_size", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = IconSize(ret)
        ret2
    end
    function get_paintable(instance::GtkImage)
        ret = ccall(("gtk_image_get_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_pixel_size(instance::GtkImage)
        ret = ccall(("gtk_image_get_pixel_size", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_storage_type(instance::GtkImage)
        ret = ccall(("gtk_image_get_storage_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ImageType(ret)
        ret2
    end
    function set_from_file(instance::GtkImage, _filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_image_set_from_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _filename)
        nothing
    end
    function set_from_gicon(instance::GtkImage, _icon)
        ret = ccall(("gtk_image_set_from_gicon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _icon)
        nothing
    end
    function set_from_icon_name(instance::GtkImage, _icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_image_set_from_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _icon_name)
        nothing
    end
    function set_from_paintable(instance::GtkImage, _paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_image_set_from_paintable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _paintable)
        nothing
    end
    function set_from_pixbuf(instance::GtkImage, _pixbuf::Maybe(GdkPixbuf))
        _pixbuf = if _pixbuf == nothing
                C_NULL
            else
                _pixbuf
            end
        ret = ccall(("gtk_image_set_from_pixbuf", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _pixbuf)
        nothing
    end
    function set_from_resource(instance::GtkImage, _resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_image_set_from_resource", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _resource_path)
        nothing
    end
    function set_icon_size(instance::GtkImage, _icon_size)
        ret = ccall(("gtk_image_set_icon_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _icon_size)
        nothing
    end
    function set_pixel_size(instance::GtkImage, _pixel_size)
        ret = ccall(("gtk_image_set_pixel_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pixel_size)
        nothing
    end
    function InfoBar()
        ret = ccall(("gtk_info_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_action_widget(instance::GtkInfoBar, _child::GtkWidget, _response_id)
        ret = ccall(("gtk_info_bar_add_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _response_id)
        nothing
    end
    function add_button(instance::GtkInfoBar, _button_text, _response_id)
        ret = ccall(("gtk_info_bar_add_button", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _button_text, _response_id)
        ret2 = convert(GtkButton, ret, false)
        ret2
    end
    function add_child(instance::GtkInfoBar, _widget::GtkWidget)
        ret = ccall(("gtk_info_bar_add_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_message_type(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_message_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = MessageType(ret)
        ret2
    end
    function get_revealed(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_revealed", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_close_button(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_show_close_button", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove_action_widget(instance::GtkInfoBar, _widget::GtkWidget)
        ret = ccall(("gtk_info_bar_remove_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function remove_child(instance::GtkInfoBar, _widget::GtkWidget)
        ret = ccall(("gtk_info_bar_remove_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function response(instance::GtkInfoBar, _response_id)
        ret = ccall(("gtk_info_bar_response", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function set_default_response(instance::GtkInfoBar, _response_id)
        ret = ccall(("gtk_info_bar_set_default_response", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function set_message_type(instance::GtkInfoBar, _message_type)
        ret = ccall(("gtk_info_bar_set_message_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _message_type)
        nothing
    end
    function set_response_sensitive(instance::GtkInfoBar, _response_id, _setting)
        ret = ccall(("gtk_info_bar_set_response_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Cint), instance, _response_id, _setting)
        nothing
    end
    function set_revealed(instance::GtkInfoBar, _revealed)
        ret = ccall(("gtk_info_bar_set_revealed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _revealed)
        nothing
    end
    function set_show_close_button(instance::GtkInfoBar, _setting)
        ret = ccall(("gtk_info_bar_set_show_close_button", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function KeyvalTrigger(_keyval, _modifiers)
        ret = ccall(("gtk_keyval_trigger_new", "libgtk-4.so.1"), Ptr{GObject}, (UInt32, Int32), _keyval, _modifiers)
        ret2 = convert(GtkShortcutTrigger, ret, true)
        ret2
    end
    function get_keyval(instance::GtkKeyvalTrigger)
        ret = ccall(("gtk_keyval_trigger_get_keyval", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_modifiers(instance::GtkKeyvalTrigger)
        ret = ccall(("gtk_keyval_trigger_get_modifiers", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function Label(_str)
        _str = if _str == nothing
                C_NULL
            else
                _str
            end
        ret = ccall(("gtk_label_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _str)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Label_new_with_mnemonic(_str)
        _str = if _str == nothing
                C_NULL
            else
                _str
            end
        ret = ccall(("gtk_label_new_with_mnemonic", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _str)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_attributes(instance::GtkLabel)
        ret = ccall(("gtk_label_get_attributes", "libgtk-4.so.1"), Ptr{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoAttrList, ret, false)
            end
        ret2
    end
    function get_current_uri(instance::GtkLabel)
        ret = ccall(("gtk_label_get_current_uri", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_ellipsize(instance::GtkLabel)
        ret = ccall(("gtk_label_get_ellipsize", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_extra_menu(instance::GtkLabel)
        ret = ccall(("gtk_label_get_extra_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_justify(instance::GtkLabel)
        ret = ccall(("gtk_label_get_justify", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Justification(ret)
        ret2
    end
    function get_label(instance::GtkLabel)
        ret = ccall(("gtk_label_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_layout(instance::GtkLabel)
        ret = ccall(("gtk_label_get_layout", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoLayout, ret, false)
        ret2
    end
    function get_layout_offsets(instance::GtkLabel)
        m_x = Ref{Int32}()
        m_y = Ref{Int32}()
        ret = ccall(("gtk_label_get_layout_offsets", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_x, m_y)
        _x = m_x[]
        _y = m_y[]
        (_x, _y)
    end
    function get_lines(instance::GtkLabel)
        ret = ccall(("gtk_label_get_lines", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_width_chars(instance::GtkLabel)
        ret = ccall(("gtk_label_get_max_width_chars", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_mnemonic_keyval(instance::GtkLabel)
        ret = ccall(("gtk_label_get_mnemonic_keyval", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_mnemonic_widget(instance::GtkLabel)
        ret = ccall(("gtk_label_get_mnemonic_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_selectable(instance::GtkLabel)
        ret = ccall(("gtk_label_get_selectable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selection_bounds(instance::GtkLabel)
        m_start = Ref{Int32}()
        m_end = Ref{Int32}()
        ret = ccall(("gtk_label_get_selection_bounds", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_start, m_end)
        ret2 = convert(Bool, ret)
        _start = m_start[]
        _end = m_end[]
        (ret2, _start, _end)
    end
    function get_single_line_mode(instance::GtkLabel)
        ret = ccall(("gtk_label_get_single_line_mode", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text(instance::GtkLabel)
        ret = ccall(("gtk_label_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_markup(instance::GtkLabel)
        ret = ccall(("gtk_label_get_use_markup", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::GtkLabel)
        ret = ccall(("gtk_label_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_width_chars(instance::GtkLabel)
        ret = ccall(("gtk_label_get_width_chars", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap(instance::GtkLabel)
        ret = ccall(("gtk_label_get_wrap", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_wrap_mode(instance::GtkLabel)
        ret = ccall(("gtk_label_get_wrap_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = WrapMode(ret)
        ret2
    end
    function get_xalign(instance::GtkLabel)
        ret = ccall(("gtk_label_get_xalign", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_yalign(instance::GtkLabel)
        ret = ccall(("gtk_label_get_yalign", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function select_region(instance::GtkLabel, _start_offset, _end_offset)
        ret = ccall(("gtk_label_select_region", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _start_offset, _end_offset)
        nothing
    end
    function set_attributes(instance::GtkLabel, _attrs::Maybe(PangoAttrList))
        _attrs = if _attrs == nothing
                C_NULL
            else
                _attrs
            end
        ret = ccall(("gtk_label_set_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoAttrList}), instance, _attrs)
        nothing
    end
    function set_ellipsize(instance::GtkLabel, _mode)
        ret = ccall(("gtk_label_set_ellipsize", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_extra_menu(instance::GtkLabel, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_label_set_extra_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_justify(instance::GtkLabel, _jtype)
        ret = ccall(("gtk_label_set_justify", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _jtype)
        nothing
    end
    function set_label(instance::GtkLabel, _str)
        ret = ccall(("gtk_label_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function set_lines(instance::GtkLabel, _lines)
        ret = ccall(("gtk_label_set_lines", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _lines)
        nothing
    end
    function set_markup(instance::GtkLabel, _str)
        ret = ccall(("gtk_label_set_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function set_markup_with_mnemonic(instance::GtkLabel, _str)
        ret = ccall(("gtk_label_set_markup_with_mnemonic", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function set_max_width_chars(instance::GtkLabel, _n_chars)
        ret = ccall(("gtk_label_set_max_width_chars", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_mnemonic_widget(instance::GtkLabel, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_label_set_mnemonic_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_selectable(instance::GtkLabel, _setting)
        ret = ccall(("gtk_label_set_selectable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_single_line_mode(instance::GtkLabel, _single_line_mode)
        ret = ccall(("gtk_label_set_single_line_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single_line_mode)
        nothing
    end
    function set_text(instance::GtkLabel, _str)
        ret = ccall(("gtk_label_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function set_text_with_mnemonic(instance::GtkLabel, _str)
        ret = ccall(("gtk_label_set_text_with_mnemonic", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function set_use_markup(instance::GtkLabel, _setting)
        ret = ccall(("gtk_label_set_use_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_use_underline(instance::GtkLabel, _setting)
        ret = ccall(("gtk_label_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_width_chars(instance::GtkLabel, _n_chars)
        ret = ccall(("gtk_label_set_width_chars", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_wrap(instance::GtkLabel, _wrap)
        ret = ccall(("gtk_label_set_wrap", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _wrap)
        nothing
    end
    function set_wrap_mode(instance::GtkLabel, _wrap_mode)
        ret = ccall(("gtk_label_set_wrap_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _wrap_mode)
        nothing
    end
    function set_xalign(instance::GtkLabel, _xalign)
        ret = ccall(("gtk_label_set_xalign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_yalign(instance::GtkLabel, _yalign)
        ret = ccall(("gtk_label_set_yalign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _yalign)
        nothing
    end
    function get_child_widget(instance::GtkLayoutChild)
        ret = ccall(("gtk_layout_child_get_child_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_layout_manager(instance::GtkLayoutChild)
        ret = ccall(("gtk_layout_child_get_layout_manager", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkLayoutManager, ret, false)
        ret2
    end
    function allocate(instance::GtkLayoutManager, _widget::GtkWidget, _width, _height, _baseline)
        ret = ccall(("gtk_layout_manager_allocate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32, Int32), instance, _widget, _width, _height, _baseline)
        nothing
    end
    function get_layout_child(instance::GtkLayoutManager, _child::GtkWidget)
        ret = ccall(("gtk_layout_manager_get_layout_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(GtkLayoutChild, ret, false)
        ret2
    end
    function get_request_mode(instance::GtkLayoutManager)
        ret = ccall(("gtk_layout_manager_get_request_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function get_widget(instance::GtkLayoutManager)
        ret = ccall(("gtk_layout_manager_get_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function layout_changed(instance::GtkLayoutManager)
        ret = ccall(("gtk_layout_manager_layout_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function measure(instance::GtkLayoutManager, _widget::GtkWidget, _orientation, _for_size)
        m_minimum = Ref{Int32}()
        m_natural = Ref{Int32}()
        m_minimum_baseline = Ref{Int32}()
        m_natural_baseline = Ref{Int32}()
        ret = ccall(("gtk_layout_manager_measure", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}), instance, _widget, _orientation, _for_size, m_minimum, m_natural, m_minimum_baseline, m_natural_baseline)
        _minimum = m_minimum[]
        _natural = m_natural[]
        _minimum_baseline = m_minimum_baseline[]
        _natural_baseline = m_natural_baseline[]
        (_minimum, _natural, _minimum_baseline, _natural_baseline)
    end
    function LevelBar()
        ret = ccall(("gtk_level_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function LevelBar_new_for_interval(_min_value, _max_value)
        ret = ccall(("gtk_level_bar_new_for_interval", "libgtk-4.so.1"), Ptr{GObject}, (Float64, Float64), _min_value, _max_value)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_offset_value(instance::GtkLevelBar, _name, _value)
        ret = ccall(("gtk_level_bar_add_offset_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Float64), instance, _name, _value)
        nothing
    end
    function get_inverted(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_inverted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_max_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_min_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_min_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_mode(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = LevelBarMode(ret)
        ret2
    end
    function get_offset_value(instance::GtkLevelBar, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        m_value = Ref{Float64}()
        ret = ccall(("gtk_level_bar_get_offset_value", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Float64}), instance, _name, m_value)
        ret2 = convert(Bool, ret)
        _value = m_value[]
        (ret2, _value)
    end
    function get_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function remove_offset_value(instance::GtkLevelBar, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_level_bar_remove_offset_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_inverted(instance::GtkLevelBar, _inverted)
        ret = ccall(("gtk_level_bar_set_inverted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_max_value(instance::GtkLevelBar, _value)
        ret = ccall(("gtk_level_bar_set_max_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_min_value(instance::GtkLevelBar, _value)
        ret = ccall(("gtk_level_bar_set_min_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_mode(instance::GtkLevelBar, _mode)
        ret = ccall(("gtk_level_bar_set_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_value(instance::GtkLevelBar, _value)
        ret = ccall(("gtk_level_bar_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function LinkButton(_uri)
        ret = ccall(("gtk_link_button_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _uri)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function LinkButton_new_with_label(_uri, _label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_link_button_new_with_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{UInt8}), _uri, _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_uri(instance::GtkLinkButton)
        ret = ccall(("gtk_link_button_get_uri", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_visited(instance::GtkLinkButton)
        ret = ccall(("gtk_link_button_get_visited", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_uri(instance::GtkLinkButton, _uri)
        ret = ccall(("gtk_link_button_set_uri", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _uri)
        nothing
    end
    function set_visited(instance::GtkLinkButton, _visited)
        ret = ccall(("gtk_link_button_set_visited", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visited)
        nothing
    end
    function ListBox()
        ret = ccall(("gtk_list_box_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append(instance::GtkListBox, _child::GtkWidget)
        ret = ccall(("gtk_list_box_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function bind_model(instance::GtkListBox, _model, _create_widget_func::Maybe(Function), _user_data::Maybe(Nothing), _user_data_free_func::Function)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _create_widget_func = if _create_widget_func == nothing
                C_NULL
            else
                _create_widget_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_data_free_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_list_box_bind_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _model, _create_widget_func, _user_data, _user_data_free_func)
        nothing
    end
    function drag_highlight_row(instance::GtkListBox, _row::GtkListBoxRow)
        ret = ccall(("gtk_list_box_drag_highlight_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _row)
        nothing
    end
    function drag_unhighlight_row(instance::GtkListBox)
        ret = ccall(("gtk_list_box_drag_unhighlight_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_activate_on_single_click(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_activate_on_single_click", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_adjustment(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_adjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_row_at_index(instance::GtkListBox, _index_)
        ret = ccall(("gtk_list_box_get_row_at_index", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _index_)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListBoxRow, ret, false)
            end
        ret2
    end
    function get_row_at_y(instance::GtkListBox, _y)
        ret = ccall(("gtk_list_box_get_row_at_y", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _y)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListBoxRow, ret, false)
            end
        ret2
    end
    function get_selected_row(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selected_row", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListBoxRow, ret, false)
            end
        ret2
    end
    function get_selected_rows(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selected_rows", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_selection_mode(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selection_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function get_show_separators(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_show_separators", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function insert(instance::GtkListBox, _child::GtkWidget, _position)
        ret = ccall(("gtk_list_box_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        nothing
    end
    function invalidate_filter(instance::GtkListBox)
        ret = ccall(("gtk_list_box_invalidate_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function invalidate_headers(instance::GtkListBox)
        ret = ccall(("gtk_list_box_invalidate_headers", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function invalidate_sort(instance::GtkListBox)
        ret = ccall(("gtk_list_box_invalidate_sort", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function prepend(instance::GtkListBox, _child::GtkWidget)
        ret = ccall(("gtk_list_box_prepend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::GtkListBox, _child::GtkWidget)
        ret = ccall(("gtk_list_box_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function select_all(instance::GtkListBox)
        ret = ccall(("gtk_list_box_select_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function select_row(instance::GtkListBox, _row::Maybe(GtkListBoxRow))
        _row = if _row == nothing
                C_NULL
            else
                _row
            end
        ret = ccall(("gtk_list_box_select_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _row)
        nothing
    end
    function selected_foreach(instance::GtkListBox, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_list_box_selected_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function set_activate_on_single_click(instance::GtkListBox, _single)
        ret = ccall(("gtk_list_box_set_activate_on_single_click", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_adjustment(instance::GtkListBox, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_list_box_set_adjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_filter_func(instance::GtkListBox, _filter_func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _filter_func = if _filter_func == nothing
                C_NULL
            else
                _filter_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_list_box_set_filter_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _filter_func, _user_data, _destroy)
        nothing
    end
    function set_header_func(instance::GtkListBox, _update_header::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _update_header = if _update_header == nothing
                C_NULL
            else
                _update_header
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_list_box_set_header_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _update_header, _user_data, _destroy)
        nothing
    end
    function set_placeholder(instance::GtkListBox, _placeholder::Maybe(GtkWidget))
        _placeholder = if _placeholder == nothing
                C_NULL
            else
                _placeholder
            end
        ret = ccall(("gtk_list_box_set_placeholder", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _placeholder)
        nothing
    end
    function set_selection_mode(instance::GtkListBox, _mode)
        ret = ccall(("gtk_list_box_set_selection_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_show_separators(instance::GtkListBox, _show_separators)
        ret = ccall(("gtk_list_box_set_show_separators", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_separators)
        nothing
    end
    function set_sort_func(instance::GtkListBox, _sort_func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _sort_func = if _sort_func == nothing
                C_NULL
            else
                _sort_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_list_box_set_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _sort_func, _user_data, _destroy)
        nothing
    end
    function unselect_all(instance::GtkListBox)
        ret = ccall(("gtk_list_box_unselect_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unselect_row(instance::GtkListBox, _row::GtkListBoxRow)
        ret = ccall(("gtk_list_box_unselect_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _row)
        nothing
    end
    function ListBoxRow()
        ret = ccall(("gtk_list_box_row_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function changed(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_activatable(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_header(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_header", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_index(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_index", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_selectable(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_selectable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_selected(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activatable(instance::GtkListBoxRow, _activatable)
        ret = ccall(("gtk_list_box_row_set_activatable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _activatable)
        nothing
    end
    function set_child(instance::GtkListBoxRow, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_list_box_row_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_header(instance::GtkListBoxRow, _header::Maybe(GtkWidget))
        _header = if _header == nothing
                C_NULL
            else
                _header
            end
        ret = ccall(("gtk_list_box_row_set_header", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _header)
        nothing
    end
    function set_selectable(instance::GtkListBoxRow, _selectable)
        ret = ccall(("gtk_list_box_row_set_selectable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _selectable)
        nothing
    end
    function get_activatable(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_activatable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_item(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_item", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_position(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_position", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_selectable(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_selectable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selected(instance::GtkListItem)
        ret = ccall(("gtk_list_item_get_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activatable(instance::GtkListItem, _activatable)
        ret = ccall(("gtk_list_item_set_activatable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _activatable)
        nothing
    end
    function set_child(instance::GtkListItem, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_list_item_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_selectable(instance::GtkListItem, _selectable)
        ret = ccall(("gtk_list_item_set_selectable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _selectable)
        nothing
    end
    function ListStore(_types)
        _types = convert(Vector{UInt64}, _types)
        _n_columns = length(_types)
        ret = ccall(("gtk_list_store_newv", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Ptr{UInt64}), _n_columns, _types)
        ret2 = convert(GtkListStore, ret, true)
        ret2
    end
    function append(instance::GtkListStore)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_list_store_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}), instance, m_iter)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function clear(instance::GtkListStore)
        ret = ccall(("gtk_list_store_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function insert(instance::GtkListStore, _position)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_list_store_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Int32), instance, m_iter, _position)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_after(instance::GtkListStore, _sibling::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_list_store_insert_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _sibling)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_before(instance::GtkListStore, _sibling::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_list_store_insert_before", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _sibling)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_with_values(instance::GtkListStore, _position, _columns, _values)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _columns = convert(Vector{Int32}, _columns)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_values = length(_columns)
        ret = ccall(("gtk_list_store_insert_with_valuesv", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Int32, Ptr{Int32}, Ptr{Ptr{GValue}}, Int32), instance, m_iter, _position, _columns, _values, _n_values)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function iter_is_valid(instance::GtkListStore, _iter::GtkTreeIter)
        ret = ccall(("gtk_list_store_iter_is_valid", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function move_after(instance::GtkListStore, _iter::GtkTreeIter, _position::Maybe(GtkTreeIter))
        _position = if _position == nothing
                C_NULL
            else
                _position
            end
        ret = ccall(("gtk_list_store_move_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _iter, _position)
        nothing
    end
    function move_before(instance::GtkListStore, _iter::GtkTreeIter, _position::Maybe(GtkTreeIter))
        _position = if _position == nothing
                C_NULL
            else
                _position
            end
        ret = ccall(("gtk_list_store_move_before", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _iter, _position)
        nothing
    end
    function prepend(instance::GtkListStore)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_list_store_prepend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}), instance, m_iter)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function remove(instance::GtkListStore, _iter::GtkTreeIter)
        ret = ccall(("gtk_list_store_remove", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reorder(instance::GtkListStore, _new_order)
        _new_order = convert(Vector{Int32}, _new_order)
        ret = ccall(("gtk_list_store_reorder", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}), instance, _new_order)
        nothing
    end
    function set_column_types(instance::GtkListStore, _types)
        _types = convert(Vector{UInt64}, _types)
        _n_columns = length(_types)
        ret = ccall(("gtk_list_store_set_column_types", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt64}), instance, _n_columns, _types)
        nothing
    end
    function set_value(instance::GtkListStore, _iter::GtkTreeIter, _column, _value::GValue)
        ret = ccall(("gtk_list_store_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Int32, Ptr{GValue}), instance, _iter, _column, _value)
        nothing
    end
    function set(instance::GtkListStore, _iter::GtkTreeIter, _columns, _values)
        _columns = convert(Vector{Int32}, _columns)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_values = length(_columns)
        ret = ccall(("gtk_list_store_set_valuesv", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{Int32}, Ptr{Ptr{GValue}}, Int32), instance, _iter, _columns, _values, _n_values)
        nothing
    end
    function swap(instance::GtkListStore, _a::GtkTreeIter, _b::GtkTreeIter)
        ret = ccall(("gtk_list_store_swap", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _a, _b)
        nothing
    end
    function ListView(_model, _factory::Maybe(GtkListItemFactory))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_list_view_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _model, _factory)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_enable_rubberband(instance::GtkListView)
        ret = ccall(("gtk_list_view_get_enable_rubberband", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_factory(instance::GtkListView)
        ret = ccall(("gtk_list_view_get_factory", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkListItemFactory, ret, false)
            end
        ret2
    end
    function get_model(instance::GtkListView)
        ret = ccall(("gtk_list_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_show_separators(instance::GtkListView)
        ret = ccall(("gtk_list_view_get_show_separators", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_single_click_activate(instance::GtkListView)
        ret = ccall(("gtk_list_view_get_single_click_activate", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_enable_rubberband(instance::GtkListView, _enable_rubberband)
        ret = ccall(("gtk_list_view_set_enable_rubberband", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_rubberband)
        nothing
    end
    function set_factory(instance::GtkListView, _factory::Maybe(GtkListItemFactory))
        _factory = if _factory == nothing
                C_NULL
            else
                _factory
            end
        ret = ccall(("gtk_list_view_set_factory", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _factory)
        nothing
    end
    function set_model(instance::GtkListView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_list_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_show_separators(instance::GtkListView, _show_separators)
        ret = ccall(("gtk_list_view_set_show_separators", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_separators)
        nothing
    end
    function set_single_click_activate(instance::GtkListView, _single_click_activate)
        ret = ccall(("gtk_list_view_set_single_click_activate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single_click_activate)
        nothing
    end
    function LockButton(_permission::Maybe(GPermission))
        _permission = if _permission == nothing
                C_NULL
            else
                _permission
            end
        ret = ccall(("gtk_lock_button_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _permission)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_permission(instance::GtkLockButton)
        ret = ccall(("gtk_lock_button_get_permission", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GPermission, ret, false)
        ret2
    end
    function set_permission(instance::GtkLockButton, _permission::Maybe(GPermission))
        _permission = if _permission == nothing
                C_NULL
            else
                _permission
            end
        ret = ccall(("gtk_lock_button_set_permission", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _permission)
        nothing
    end
    function MapListModel(_model, _map_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Function)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _map_func = if _map_func == nothing
                C_NULL
            else
                _map_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_map_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _model, _map_func, _user_data, _user_destroy)
        ret2 = convert(GtkMapListModel, ret, true)
        ret2
    end
    function get_model(instance::GtkMapListModel)
        ret = ccall(("gtk_map_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function has_map(instance::GtkMapListModel)
        ret = ccall(("gtk_map_list_model_has_map", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_map_func(instance::GtkMapListModel, _map_func::Maybe(Function), _user_data::Maybe(Nothing), _user_destroy::Function)
        _map_func = if _map_func == nothing
                C_NULL
            else
                _map_func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_map_list_model_set_map_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _map_func, _user_data, _user_destroy)
        nothing
    end
    function set_model(instance::GtkMapListModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_map_list_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function MediaControls(_stream::Maybe(GtkMediaStream))
        _stream = if _stream == nothing
                C_NULL
            else
                _stream
            end
        ret = ccall(("gtk_media_controls_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _stream)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_media_stream(instance::GtkMediaControls)
        ret = ccall(("gtk_media_controls_get_media_stream", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkMediaStream, ret, false)
            end
        ret2
    end
    function set_media_stream(instance::GtkMediaControls, _stream::Maybe(GtkMediaStream))
        _stream = if _stream == nothing
                C_NULL
            else
                _stream
            end
        ret = ccall(("gtk_media_controls_set_media_stream", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stream)
        nothing
    end
    function MediaFile()
        ret = ccall(("gtk_media_file_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkMediaFile, ret, true)
        ret2
    end
    function MediaFile_new_for_file(_file)
        ret = ccall(("gtk_media_file_new_for_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _file)
        ret2 = convert(GtkMediaFile, ret, true)
        ret2
    end
    function MediaFile_new_for_filename(_filename)
        ret = ccall(("gtk_media_file_new_for_filename", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _filename)
        ret2 = convert(GtkMediaFile, ret, true)
        ret2
    end
    function MediaFile_new_for_input_stream(_stream::GInputStream)
        ret = ccall(("gtk_media_file_new_for_input_stream", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _stream)
        ret2 = convert(GtkMediaFile, ret, true)
        ret2
    end
    function MediaFile_new_for_resource(_resource_path)
        ret = ccall(("gtk_media_file_new_for_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GtkMediaFile, ret, true)
        ret2
    end
    function clear(instance::GtkMediaFile)
        ret = ccall(("gtk_media_file_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_file(instance::GtkMediaFile)
        ret = ccall(("gtk_media_file_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_input_stream(instance::GtkMediaFile)
        ret = ccall(("gtk_media_file_get_input_stream", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GInputStream, ret, false)
            end
        ret2
    end
    function set_file(instance::GtkMediaFile, _file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_media_file_set_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _file)
        nothing
    end
    function set_filename(instance::GtkMediaFile, _filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_media_file_set_filename", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _filename)
        nothing
    end
    function set_input_stream(instance::GtkMediaFile, _stream::Maybe(GInputStream))
        _stream = if _stream == nothing
                C_NULL
            else
                _stream
            end
        ret = ccall(("gtk_media_file_set_input_stream", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stream)
        nothing
    end
    function set_resource(instance::GtkMediaFile, _resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_media_file_set_resource", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _resource_path)
        nothing
    end
    function gerror(instance::GtkMediaStream, _error)
        ret = ccall(("gtk_media_stream_gerror", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GError}), instance, _error)
        nothing
    end
    function get_duration(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_duration", "libgtk-4.so.1"), Int64, (Ptr{GObject},), instance)
        ret
    end
    function get_ended(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_ended", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_error(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_error", "libgtk-4.so.1"), Ptr{GError}, (Ptr{GObject},), instance)
        ret
    end
    function get_loop(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_loop", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_muted(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_muted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_playing(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_playing", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_timestamp(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_timestamp", "libgtk-4.so.1"), Int64, (Ptr{GObject},), instance)
        ret
    end
    function get_volume(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_get_volume", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function has_audio(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_has_audio", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_video(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_has_video", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_prepared(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_is_prepared", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_seekable(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_is_seekable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_seeking(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_is_seeking", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function pause(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_pause", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function play(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_play", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function realize(instance::GtkMediaStream, _surface::GdkSurface)
        ret = ccall(("gtk_media_stream_realize", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _surface)
        nothing
    end
    function seek(instance::GtkMediaStream, _timestamp)
        ret = ccall(("gtk_media_stream_seek", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int64), instance, _timestamp)
        nothing
    end
    function seek_failed(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_seek_failed", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function seek_success(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_seek_success", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_loop(instance::GtkMediaStream, _loop)
        ret = ccall(("gtk_media_stream_set_loop", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _loop)
        nothing
    end
    function set_muted(instance::GtkMediaStream, _muted)
        ret = ccall(("gtk_media_stream_set_muted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _muted)
        nothing
    end
    function set_playing(instance::GtkMediaStream, _playing)
        ret = ccall(("gtk_media_stream_set_playing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _playing)
        nothing
    end
    function set_volume(instance::GtkMediaStream, _volume)
        ret = ccall(("gtk_media_stream_set_volume", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _volume)
        nothing
    end
    function stream_ended(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_stream_ended", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function stream_prepared(instance::GtkMediaStream, _has_audio, _has_video, _seekable, _duration)
        ret = ccall(("gtk_media_stream_stream_prepared", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint, Cint, Cint, Int64), instance, _has_audio, _has_video, _seekable, _duration)
        nothing
    end
    function stream_unprepared(instance::GtkMediaStream)
        ret = ccall(("gtk_media_stream_stream_unprepared", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unrealize(instance::GtkMediaStream, _surface::GdkSurface)
        ret = ccall(("gtk_media_stream_unrealize", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _surface)
        nothing
    end
    function update(instance::GtkMediaStream, _timestamp)
        ret = ccall(("gtk_media_stream_update", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int64), instance, _timestamp)
        nothing
    end
    function MenuButton()
        ret = ccall(("gtk_menu_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_always_show_arrow(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_always_show_arrow", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_direction(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_direction", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ArrowType(ret)
        ret2
    end
    function get_has_frame(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_has_frame", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_name(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_label", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_menu_model(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_menu_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_popover(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_popover", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkPopover, ret, false)
            end
        ret2
    end
    function get_primary(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_primary", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function popdown(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_popdown", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_popup", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_always_show_arrow(instance::GtkMenuButton, _always_show_arrow)
        ret = ccall(("gtk_menu_button_set_always_show_arrow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _always_show_arrow)
        nothing
    end
    function set_create_popup_func(instance::GtkMenuButton, _func::Maybe(Function), _user_data::Maybe(Nothing), _destroy_notify::Maybe(Function))
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy_notify = if _destroy_notify == nothing
                C_NULL
            else
                _destroy_notify
            end
        ret = ccall(("gtk_menu_button_set_create_popup_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _user_data, _destroy_notify)
        nothing
    end
    function set_direction(instance::GtkMenuButton, _direction)
        ret = ccall(("gtk_menu_button_set_direction", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _direction)
        nothing
    end
    function set_has_frame(instance::GtkMenuButton, _has_frame)
        ret = ccall(("gtk_menu_button_set_has_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_frame)
        nothing
    end
    function set_icon_name(instance::GtkMenuButton, _icon_name)
        ret = ccall(("gtk_menu_button_set_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _icon_name)
        nothing
    end
    function set_label(instance::GtkMenuButton, _label)
        ret = ccall(("gtk_menu_button_set_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_menu_model(instance::GtkMenuButton, _menu_model::Maybe(GMenuModel))
        _menu_model = if _menu_model == nothing
                C_NULL
            else
                _menu_model
            end
        ret = ccall(("gtk_menu_button_set_menu_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu_model)
        nothing
    end
    function set_popover(instance::GtkMenuButton, _popover::Maybe(GtkWidget))
        _popover = if _popover == nothing
                C_NULL
            else
                _popover
            end
        ret = ccall(("gtk_menu_button_set_popover", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _popover)
        nothing
    end
    function set_primary(instance::GtkMenuButton, _primary)
        ret = ccall(("gtk_menu_button_set_primary", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _primary)
        nothing
    end
    function set_use_underline(instance::GtkMenuButton, _use_underline)
        ret = ccall(("gtk_menu_button_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_message_area(instance::GtkMessageDialog)
        ret = ccall(("gtk_message_dialog_get_message_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_markup(instance::GtkMessageDialog, _str)
        ret = ccall(("gtk_message_dialog_set_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _str)
        nothing
    end
    function MnemonicTrigger(_keyval)
        ret = ccall(("gtk_mnemonic_trigger_new", "libgtk-4.so.1"), Ptr{GObject}, (UInt32,), _keyval)
        ret2 = convert(GtkMnemonicTrigger, ret, true)
        ret2
    end
    function get_keyval(instance::GtkMnemonicTrigger)
        ret = ccall(("gtk_mnemonic_trigger_get_keyval", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function MountOperation(_parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_mount_operation_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _parent)
        ret2 = convert(GMountOperation, ret, true)
        ret2
    end
    function get_display(instance::GtkMountOperation)
        ret = ccall(("gtk_mount_operation_get_display", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_parent(instance::GtkMountOperation)
        ret = ccall(("gtk_mount_operation_get_parent", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWindow, ret, false)
        ret2
    end
    function is_showing(instance::GtkMountOperation)
        ret = ccall(("gtk_mount_operation_is_showing", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_display(instance::GtkMountOperation, _display::GdkDisplay)
        ret = ccall(("gtk_mount_operation_set_display", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _display)
        nothing
    end
    function set_parent(instance::GtkMountOperation, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_mount_operation_set_parent", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function append(instance::GtkMultiFilter, _filter::GtkFilter)
        ret = ccall(("gtk_multi_filter_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function remove(instance::GtkMultiFilter, _position)
        ret = ccall(("gtk_multi_filter_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function MultiSelection(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_multi_selection_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkMultiSelection, ret, true)
        ret2
    end
    function get_model(instance::GtkMultiSelection)
        ret = ccall(("gtk_multi_selection_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function set_model(instance::GtkMultiSelection, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_multi_selection_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function MultiSorter()
        ret = ccall(("gtk_multi_sorter_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkMultiSorter, ret, true)
        ret2
    end
    function append(instance::GtkMultiSorter, _sorter::GtkSorter)
        ret = ccall(("gtk_multi_sorter_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sorter)
        nothing
    end
    function remove(instance::GtkMultiSorter, _position)
        ret = ccall(("gtk_multi_sorter_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function NamedAction(_name)
        ret = ccall(("gtk_named_action_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _name)
        ret2 = convert(GtkNamedAction, ret, true)
        ret2
    end
    function get_action_name(instance::GtkNamedAction)
        ret = ccall(("gtk_named_action_get_action_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function destroy(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_destroy", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_modal(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_modal", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_transient_for(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_transient_for", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function hide(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_hide", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_modal(instance::GtkNativeDialog, _modal)
        ret = ccall(("gtk_native_dialog_set_modal", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_title(instance::GtkNativeDialog, _title)
        ret = ccall(("gtk_native_dialog_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function set_transient_for(instance::GtkNativeDialog, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_native_dialog_set_transient_for", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function show(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_show", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function NoSelection(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_no_selection_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkNoSelection, ret, true)
        ret2
    end
    function get_model(instance::GtkNoSelection)
        ret = ccall(("gtk_no_selection_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function set_model(instance::GtkNoSelection, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_no_selection_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function Notebook()
        ret = ccall(("gtk_notebook_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append_page(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget))
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        ret = ccall(("gtk_notebook_append_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label)
        ret
    end
    function append_page_menu(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget), _menu_label::Maybe(GtkWidget))
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        _menu_label = if _menu_label == nothing
                C_NULL
            else
                _menu_label
            end
        ret = ccall(("gtk_notebook_append_page_menu", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label, _menu_label)
        ret
    end
    function detach_tab(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_detach_tab", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function get_action_widget(instance::GtkNotebook, _pack_type)
        ret = ccall(("gtk_notebook_get_action_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _pack_type)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_current_page(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_current_page", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_group_name(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_group_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_menu_label(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_menu_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_menu_label_text(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_menu_label_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_n_pages(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_n_pages", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_nth_page(instance::GtkNotebook, _page_num)
        ret = ccall(("gtk_notebook_get_nth_page", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _page_num)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_page(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_page", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(GtkNotebookPage, ret, false)
        ret2
    end
    function get_pages(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_pages", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_scrollable(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_scrollable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_border(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_show_border", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_tabs(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_show_tabs", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tab_detachable(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_tab_detachable", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tab_label(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_tab_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_tab_label_text(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_tab_label_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_tab_pos(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_tab_pos", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function get_tab_reorderable(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_get_tab_reorderable", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(Bool, ret)
        ret2
    end
    function insert_page(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget), _position)
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        ret = ccall(("gtk_notebook_insert_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _tab_label, _position)
        ret
    end
    function insert_page_menu(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget), _menu_label::Maybe(GtkWidget), _position)
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        _menu_label = if _menu_label == nothing
                C_NULL
            else
                _menu_label
            end
        ret = ccall(("gtk_notebook_insert_page_menu", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _tab_label, _menu_label, _position)
        ret
    end
    function next_page(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_next_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function page_num(instance::GtkNotebook, _child::GtkWidget)
        ret = ccall(("gtk_notebook_page_num", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret
    end
    function popup_disable(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_popup_disable", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup_enable(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_popup_enable", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function prepend_page(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget))
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        ret = ccall(("gtk_notebook_prepend_page", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label)
        ret
    end
    function prepend_page_menu(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget), _menu_label::Maybe(GtkWidget))
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        _menu_label = if _menu_label == nothing
                C_NULL
            else
                _menu_label
            end
        ret = ccall(("gtk_notebook_prepend_page_menu", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label, _menu_label)
        ret
    end
    function prev_page(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_prev_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_page(instance::GtkNotebook, _page_num)
        ret = ccall(("gtk_notebook_remove_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function reorder_child(instance::GtkNotebook, _child::GtkWidget, _position)
        ret = ccall(("gtk_notebook_reorder_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        nothing
    end
    function set_action_widget(instance::GtkNotebook, _widget::GtkWidget, _pack_type)
        ret = ccall(("gtk_notebook_set_action_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _widget, _pack_type)
        nothing
    end
    function set_current_page(instance::GtkNotebook, _page_num)
        ret = ccall(("gtk_notebook_set_current_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function set_group_name(instance::GtkNotebook, _group_name)
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        ret = ccall(("gtk_notebook_set_group_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _group_name)
        nothing
    end
    function set_menu_label(instance::GtkNotebook, _child::GtkWidget, _menu_label::Maybe(GtkWidget))
        _menu_label = if _menu_label == nothing
                C_NULL
            else
                _menu_label
            end
        ret = ccall(("gtk_notebook_set_menu_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _menu_label)
        nothing
    end
    function set_menu_label_text(instance::GtkNotebook, _child::GtkWidget, _menu_text)
        ret = ccall(("gtk_notebook_set_menu_label_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _child, _menu_text)
        nothing
    end
    function set_scrollable(instance::GtkNotebook, _scrollable)
        ret = ccall(("gtk_notebook_set_scrollable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _scrollable)
        nothing
    end
    function set_show_border(instance::GtkNotebook, _show_border)
        ret = ccall(("gtk_notebook_set_show_border", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_border)
        nothing
    end
    function set_show_tabs(instance::GtkNotebook, _show_tabs)
        ret = ccall(("gtk_notebook_set_show_tabs", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_tabs)
        nothing
    end
    function set_tab_detachable(instance::GtkNotebook, _child::GtkWidget, _detachable)
        ret = ccall(("gtk_notebook_set_tab_detachable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _child, _detachable)
        nothing
    end
    function set_tab_label(instance::GtkNotebook, _child::GtkWidget, _tab_label::Maybe(GtkWidget))
        _tab_label = if _tab_label == nothing
                C_NULL
            else
                _tab_label
            end
        ret = ccall(("gtk_notebook_set_tab_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label)
        nothing
    end
    function set_tab_label_text(instance::GtkNotebook, _child::GtkWidget, _tab_text)
        ret = ccall(("gtk_notebook_set_tab_label_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _child, _tab_text)
        nothing
    end
    function set_tab_pos(instance::GtkNotebook, _pos)
        ret = ccall(("gtk_notebook_set_tab_pos", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pos)
        nothing
    end
    function set_tab_reorderable(instance::GtkNotebook, _child::GtkWidget, _reorderable)
        ret = ccall(("gtk_notebook_set_tab_reorderable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _child, _reorderable)
        nothing
    end
    function get_child(instance::GtkNotebookPage)
        ret = ccall(("gtk_notebook_page_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Overlay()
        ret = ccall(("gtk_overlay_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_overlay(instance::GtkOverlay, _widget::GtkWidget)
        ret = ccall(("gtk_overlay_add_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_child(instance::GtkOverlay)
        ret = ccall(("gtk_overlay_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_clip_overlay(instance::GtkOverlay, _widget::GtkWidget)
        ret = ccall(("gtk_overlay_get_clip_overlay", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_measure_overlay(instance::GtkOverlay, _widget::GtkWidget)
        ret = ccall(("gtk_overlay_get_measure_overlay", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove_overlay(instance::GtkOverlay, _widget::GtkWidget)
        ret = ccall(("gtk_overlay_remove_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_child(instance::GtkOverlay, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_overlay_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_clip_overlay(instance::GtkOverlay, _widget::GtkWidget, _clip_overlay)
        ret = ccall(("gtk_overlay_set_clip_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _widget, _clip_overlay)
        nothing
    end
    function set_measure_overlay(instance::GtkOverlay, _widget::GtkWidget, _measure)
        ret = ccall(("gtk_overlay_set_measure_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _widget, _measure)
        nothing
    end
    function OverlayLayout()
        ret = ccall(("gtk_overlay_layout_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkLayoutManager, ret, true)
        ret2
    end
    function get_clip_overlay(instance::GtkOverlayLayoutChild)
        ret = ccall(("gtk_overlay_layout_child_get_clip_overlay", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_measure(instance::GtkOverlayLayoutChild)
        ret = ccall(("gtk_overlay_layout_child_get_measure", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_clip_overlay(instance::GtkOverlayLayoutChild, _clip_overlay)
        ret = ccall(("gtk_overlay_layout_child_set_clip_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _clip_overlay)
        nothing
    end
    function set_measure(instance::GtkOverlayLayoutChild, _measure)
        ret = ccall(("gtk_overlay_layout_child_set_measure", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _measure)
        nothing
    end
    function PadController(_group, _pad::Maybe(GdkDevice))
        _pad = if _pad == nothing
                C_NULL
            else
                _pad
            end
        ret = ccall(("gtk_pad_controller_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _group, _pad)
        ret2 = convert(GtkPadController, ret, true)
        ret2
    end
    function set_action(instance::GtkPadController, _type, _index, _mode, _label, _action_name)
        ret = ccall(("gtk_pad_controller_set_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Int32, Ptr{UInt8}, Ptr{UInt8}), instance, _type, _index, _mode, _label, _action_name)
        nothing
    end
    function set_action_entries(instance::GtkPadController, _entries)
        _entries = convert(Vector{GtkPadActionEntry}, _entries)
        _n_entries = length(_entries)
        ret = ccall(("gtk_pad_controller_set_action_entries", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkPadActionEntry}, Int32), instance, _entries, _n_entries)
        nothing
    end
    function PageSetup()
        ret = ccall(("gtk_page_setup_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function PageSetup_new_from_file(_file_name)
        err = err_buf()
        ret = ccall(("gtk_page_setup_new_from_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{Ptr{GError}}), _file_name, err)
        check_err(err)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function PageSetup_new_from_gvariant(_variant::GVariant)
        ret = ccall(("gtk_page_setup_new_from_gvariant", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GVariant},), _variant)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function PageSetup_new_from_key_file(_key_file::GKeyFile, _group_name)
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        err = err_buf()
        ret = ccall(("gtk_page_setup_new_from_key_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GKeyFile}, Ptr{UInt8}, Ptr{Ptr{GError}}), _key_file, _group_name, err)
        check_err(err)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function copy(instance::GtkPageSetup)
        ret = ccall(("gtk_page_setup_copy", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function get_bottom_margin(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_bottom_margin", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_left_margin(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_left_margin", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_orientation(instance::GtkPageSetup)
        ret = ccall(("gtk_page_setup_get_orientation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PageOrientation(ret)
        ret2
    end
    function get_page_height(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_page_height", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_page_width(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_page_width", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_paper_height(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_paper_height", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_paper_size(instance::GtkPageSetup)
        ret = ccall(("gtk_page_setup_get_paper_size", "libgtk-4.so.1"), Ptr{GtkPaperSize}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPaperSize, ret, false)
        ret2
    end
    function get_paper_width(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_paper_width", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_right_margin(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_right_margin", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function get_top_margin(instance::GtkPageSetup, _unit)
        ret = ccall(("gtk_page_setup_get_top_margin", "libgtk-4.so.1"), Float64, (Ptr{GObject}, Int32), instance, _unit)
        ret
    end
    function load_file(instance::GtkPageSetup, _file_name)
        err = err_buf()
        ret = ccall(("gtk_page_setup_load_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _file_name, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function load_key_file(instance::GtkPageSetup, _key_file::GKeyFile, _group_name)
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        err = err_buf()
        ret = ccall(("gtk_page_setup_load_key_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GKeyFile}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _key_file, _group_name, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_bottom_margin(instance::GtkPageSetup, _margin, _unit)
        ret = ccall(("gtk_page_setup_set_bottom_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Int32), instance, _margin, _unit)
        nothing
    end
    function set_left_margin(instance::GtkPageSetup, _margin, _unit)
        ret = ccall(("gtk_page_setup_set_left_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Int32), instance, _margin, _unit)
        nothing
    end
    function set_orientation(instance::GtkPageSetup, _orientation)
        ret = ccall(("gtk_page_setup_set_orientation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_paper_size(instance::GtkPageSetup, _size::GtkPaperSize)
        ret = ccall(("gtk_page_setup_set_paper_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkPaperSize}), instance, _size)
        nothing
    end
    function set_paper_size_and_default_margins(instance::GtkPageSetup, _size::GtkPaperSize)
        ret = ccall(("gtk_page_setup_set_paper_size_and_default_margins", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkPaperSize}), instance, _size)
        nothing
    end
    function set_right_margin(instance::GtkPageSetup, _margin, _unit)
        ret = ccall(("gtk_page_setup_set_right_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Int32), instance, _margin, _unit)
        nothing
    end
    function set_top_margin(instance::GtkPageSetup, _margin, _unit)
        ret = ccall(("gtk_page_setup_set_top_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Int32), instance, _margin, _unit)
        nothing
    end
    function to_file(instance::GtkPageSetup, _file_name)
        err = err_buf()
        ret = ccall(("gtk_page_setup_to_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GError}}), instance, _file_name, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function to_gvariant(instance::GtkPageSetup)
        ret = ccall(("gtk_page_setup_to_gvariant", "libgtk-4.so.1"), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function to_key_file(instance::GtkPageSetup, _key_file::GKeyFile, _group_name)
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        ret = ccall(("gtk_page_setup_to_key_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GKeyFile}, Ptr{UInt8}), instance, _key_file, _group_name)
        nothing
    end
    function PageSetupUnixDialog(_title, _parent::Maybe(GtkWindow))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_page_setup_unix_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _title, _parent)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_page_setup(instance::GtkPageSetupUnixDialog)
        ret = ccall(("gtk_page_setup_unix_dialog_get_page_setup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_print_settings(instance::GtkPageSetupUnixDialog)
        ret = ccall(("gtk_page_setup_unix_dialog_get_print_settings", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrintSettings, ret, false)
        ret2
    end
    function set_page_setup(instance::GtkPageSetupUnixDialog, _page_setup::GtkPageSetup)
        ret = ccall(("gtk_page_setup_unix_dialog_set_page_setup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page_setup)
        nothing
    end
    function set_print_settings(instance::GtkPageSetupUnixDialog, _print_settings::GtkPrintSettings)
        ret = ccall(("gtk_page_setup_unix_dialog_set_print_settings", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _print_settings)
        nothing
    end
    function Paned(_orientation)
        ret = ccall(("gtk_paned_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _orientation)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_end_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_end_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_position(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_resize_end_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_resize_end_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_resize_start_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_resize_start_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_shrink_end_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_shrink_end_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_shrink_start_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_shrink_start_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_start_child(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_start_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_wide_handle(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_wide_handle", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_end_child(instance::GtkPaned, _child::GtkWidget)
        ret = ccall(("gtk_paned_set_end_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_position(instance::GtkPaned, _position)
        ret = ccall(("gtk_paned_set_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_resize_end_child(instance::GtkPaned, _resize)
        ret = ccall(("gtk_paned_set_resize_end_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resize)
        nothing
    end
    function set_resize_start_child(instance::GtkPaned, _resize)
        ret = ccall(("gtk_paned_set_resize_start_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resize)
        nothing
    end
    function set_shrink_end_child(instance::GtkPaned, _resize)
        ret = ccall(("gtk_paned_set_shrink_end_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resize)
        nothing
    end
    function set_shrink_start_child(instance::GtkPaned, _resize)
        ret = ccall(("gtk_paned_set_shrink_start_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resize)
        nothing
    end
    function set_start_child(instance::GtkPaned, _child::GtkWidget)
        ret = ccall(("gtk_paned_set_start_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_wide_handle(instance::GtkPaned, _wide)
        ret = ccall(("gtk_paned_set_wide_handle", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _wide)
        nothing
    end
    function PasswordEntry()
        ret = ccall(("gtk_password_entry_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_extra_menu(instance::GtkPasswordEntry)
        ret = ccall(("gtk_password_entry_get_extra_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GMenuModel, ret, false)
        ret2
    end
    function get_show_peek_icon(instance::GtkPasswordEntry)
        ret = ccall(("gtk_password_entry_get_show_peek_icon", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_extra_menu(instance::GtkPasswordEntry, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_password_entry_set_extra_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_show_peek_icon(instance::GtkPasswordEntry, _show_peek_icon)
        ret = ccall(("gtk_password_entry_set_show_peek_icon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_peek_icon)
        nothing
    end
    function PasswordEntryBuffer()
        ret = ccall(("gtk_password_entry_buffer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEntryBuffer, ret, true)
        ret2
    end
    function Picture()
        ret = ccall(("gtk_picture_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Picture_new_for_file(_file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_picture_new_for_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _file)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Picture_new_for_filename(_filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_picture_new_for_filename", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _filename)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Picture_new_for_paintable(_paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_picture_new_for_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _paintable)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Picture_new_for_pixbuf(_pixbuf::Maybe(GdkPixbuf))
        _pixbuf = if _pixbuf == nothing
                C_NULL
            else
                _pixbuf
            end
        ret = ccall(("gtk_picture_new_for_pixbuf", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _pixbuf)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Picture_new_for_resource(_resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_picture_new_for_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_alternative_text(instance::GtkPicture)
        ret = ccall(("gtk_picture_get_alternative_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_can_shrink(instance::GtkPicture)
        ret = ccall(("gtk_picture_get_can_shrink", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_file(instance::GtkPicture)
        ret = ccall(("gtk_picture_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_keep_aspect_ratio(instance::GtkPicture)
        ret = ccall(("gtk_picture_get_keep_aspect_ratio", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_paintable(instance::GtkPicture)
        ret = ccall(("gtk_picture_get_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function set_alternative_text(instance::GtkPicture, _alternative_text)
        _alternative_text = if _alternative_text == nothing
                C_NULL
            else
                _alternative_text
            end
        ret = ccall(("gtk_picture_set_alternative_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _alternative_text)
        nothing
    end
    function set_can_shrink(instance::GtkPicture, _can_shrink)
        ret = ccall(("gtk_picture_set_can_shrink", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _can_shrink)
        nothing
    end
    function set_file(instance::GtkPicture, _file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_picture_set_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _file)
        nothing
    end
    function set_filename(instance::GtkPicture, _filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_picture_set_filename", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _filename)
        nothing
    end
    function set_keep_aspect_ratio(instance::GtkPicture, _keep_aspect_ratio)
        ret = ccall(("gtk_picture_set_keep_aspect_ratio", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _keep_aspect_ratio)
        nothing
    end
    function set_paintable(instance::GtkPicture, _paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_picture_set_paintable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _paintable)
        nothing
    end
    function set_pixbuf(instance::GtkPicture, _pixbuf::Maybe(GdkPixbuf))
        _pixbuf = if _pixbuf == nothing
                C_NULL
            else
                _pixbuf
            end
        ret = ccall(("gtk_picture_set_pixbuf", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _pixbuf)
        nothing
    end
    function set_resource(instance::GtkPicture, _resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_picture_set_resource", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _resource_path)
        nothing
    end
    function Popover()
        ret = ccall(("gtk_popover_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_autohide(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_autohide", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_cascade_popdown(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_cascade_popdown", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_has_arrow(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_has_arrow", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_mnemonics_visible(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_mnemonics_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_offset(instance::GtkPopover)
        m_x_offset = Ref{Int32}()
        m_y_offset = Ref{Int32}()
        ret = ccall(("gtk_popover_get_offset", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_x_offset, m_y_offset)
        _x_offset = m_x_offset[]
        _y_offset = m_y_offset[]
        (_x_offset, _y_offset)
    end
    function get_pointing_to(instance::GtkPopover)
        m_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_popover_get_pointing_to", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_rect)
        ret2 = convert(Bool, ret)
        _rect = m_rect[]
        _rect = convert(GdkRectangle, _rect, false)
        (ret2, _rect)
    end
    function get_position(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function popdown(instance::GtkPopover)
        ret = ccall(("gtk_popover_popdown", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup(instance::GtkPopover)
        ret = ccall(("gtk_popover_popup", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function present(instance::GtkPopover)
        ret = ccall(("gtk_popover_present", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_autohide(instance::GtkPopover, _autohide)
        ret = ccall(("gtk_popover_set_autohide", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _autohide)
        nothing
    end
    function set_cascade_popdown(instance::GtkPopover, _cascade_popdown)
        ret = ccall(("gtk_popover_set_cascade_popdown", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _cascade_popdown)
        nothing
    end
    function set_child(instance::GtkPopover, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_popover_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_default_widget(instance::GtkPopover, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_popover_set_default_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_has_arrow(instance::GtkPopover, _has_arrow)
        ret = ccall(("gtk_popover_set_has_arrow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_arrow)
        nothing
    end
    function set_mnemonics_visible(instance::GtkPopover, _mnemonics_visible)
        ret = ccall(("gtk_popover_set_mnemonics_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _mnemonics_visible)
        nothing
    end
    function set_offset(instance::GtkPopover, _x_offset, _y_offset)
        ret = ccall(("gtk_popover_set_offset", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _x_offset, _y_offset)
        nothing
    end
    function set_pointing_to(instance::GtkPopover, _rect::GdkRectangle)
        ret = ccall(("gtk_popover_set_pointing_to", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRectangle}), instance, _rect)
        nothing
    end
    function set_position(instance::GtkPopover, _position)
        ret = ccall(("gtk_popover_set_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function PopoverMenu_new_from_model(_model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_popover_menu_new_from_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function PopoverMenu_new_from_model_full(_model::GMenuModel, _flags)
        ret = ccall(("gtk_popover_menu_new_from_model_full", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), _model, _flags)
        ret2 = convert(GtkWidget, ret, true)
        ret2
    end
    function add_child(instance::GtkPopoverMenu, _child::GtkWidget, _id)
        ret = ccall(("gtk_popover_menu_add_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _child, _id)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_menu_model(instance::GtkPopoverMenu)
        ret = ccall(("gtk_popover_menu_get_menu_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GMenuModel, ret, false)
        ret2
    end
    function remove_child(instance::GtkPopoverMenu, _child::GtkWidget)
        ret = ccall(("gtk_popover_menu_remove_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_menu_model(instance::GtkPopoverMenu, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_popover_menu_set_menu_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function PopoverMenuBar_new_from_model(_model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_popover_menu_bar_new_from_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_child(instance::GtkPopoverMenuBar, _child::GtkWidget, _id)
        ret = ccall(("gtk_popover_menu_bar_add_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _child, _id)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_menu_model(instance::GtkPopoverMenuBar)
        ret = ccall(("gtk_popover_menu_bar_get_menu_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GMenuModel, ret, false)
        ret2
    end
    function remove_child(instance::GtkPopoverMenuBar, _child::GtkWidget)
        ret = ccall(("gtk_popover_menu_bar_remove_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_menu_model(instance::GtkPopoverMenuBar, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_popover_menu_bar_set_menu_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function create_pango_context(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_create_pango_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, true)
        ret2
    end
    function create_pango_layout(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_create_pango_layout", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoLayout, ret, true)
        ret2
    end
    function get_cairo_context(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_cairo_context", "libgtk-4.so.1"), Ptr{cairoContext}, (Ptr{GObject},), instance)
        ret2 = convert(cairoContext, ret, false)
        ret2
    end
    function get_dpi_x(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_dpi_x", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_dpi_y(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_dpi_y", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_hard_margins(instance::GtkPrintContext)
        m_top = Ref{Float64}()
        m_bottom = Ref{Float64}()
        m_left = Ref{Float64}()
        m_right = Ref{Float64}()
        ret = ccall(("gtk_print_context_get_hard_margins", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}), instance, m_top, m_bottom, m_left, m_right)
        ret2 = convert(Bool, ret)
        _top = m_top[]
        _bottom = m_bottom[]
        _left = m_left[]
        _right = m_right[]
        (ret2, _top, _bottom, _left, _right)
    end
    function get_height(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_height", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_setup(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_page_setup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_pango_fontmap(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_pango_fontmap", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoFontMap, ret, false)
        ret2
    end
    function get_width(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_width", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_cairo_context(instance::GtkPrintContext, _cr::cairoContext, _dpi_x, _dpi_y)
        ret = ccall(("gtk_print_context_set_cairo_context", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoContext}, Float64, Float64), instance, _cr, _dpi_x, _dpi_y)
        nothing
    end
    function PrintOperation()
        ret = ccall(("gtk_print_operation_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkPrintOperation, ret, true)
        ret2
    end
    function cancel(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_cancel", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function draw_page_finish(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_draw_page_finish", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_default_page_setup(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_default_page_setup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_embed_page_setup(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_embed_page_setup", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_error(instance::GtkPrintOperation)
        err = err_buf()
        ret = ccall(("gtk_print_operation_get_error", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GError}}), instance, err)
        check_err(err)
        nothing
    end
    function get_has_selection(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_has_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_n_pages_to_print(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_n_pages_to_print", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_print_settings(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_print_settings", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrintSettings, ret, false)
        ret2
    end
    function get_status(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_status", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PrintStatus(ret)
        ret2
    end
    function get_status_string(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_status_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_support_selection(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_support_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_finished(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_is_finished", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function run(instance::GtkPrintOperation, _action, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        err = err_buf()
        ret = ccall(("gtk_print_operation_run", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _action, _parent, err)
        check_err(err)
        ret2 = PrintOperationResult(ret)
        ret2
    end
    function set_allow_async(instance::GtkPrintOperation, _allow_async)
        ret = ccall(("gtk_print_operation_set_allow_async", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _allow_async)
        nothing
    end
    function set_current_page(instance::GtkPrintOperation, _current_page)
        ret = ccall(("gtk_print_operation_set_current_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _current_page)
        nothing
    end
    function set_custom_tab_label(instance::GtkPrintOperation, _label)
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_print_operation_set_custom_tab_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _label)
        nothing
    end
    function set_default_page_setup(instance::GtkPrintOperation, _default_page_setup::Maybe(GtkPageSetup))
        _default_page_setup = if _default_page_setup == nothing
                C_NULL
            else
                _default_page_setup
            end
        ret = ccall(("gtk_print_operation_set_default_page_setup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _default_page_setup)
        nothing
    end
    function set_defer_drawing(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_set_defer_drawing", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_embed_page_setup(instance::GtkPrintOperation, _embed)
        ret = ccall(("gtk_print_operation_set_embed_page_setup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _embed)
        nothing
    end
    function set_export_filename(instance::GtkPrintOperation, _filename)
        ret = ccall(("gtk_print_operation_set_export_filename", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _filename)
        nothing
    end
    function set_has_selection(instance::GtkPrintOperation, _has_selection)
        ret = ccall(("gtk_print_operation_set_has_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_selection)
        nothing
    end
    function set_job_name(instance::GtkPrintOperation, _job_name)
        ret = ccall(("gtk_print_operation_set_job_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _job_name)
        nothing
    end
    function set_n_pages(instance::GtkPrintOperation, _n_pages)
        ret = ccall(("gtk_print_operation_set_n_pages", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _n_pages)
        nothing
    end
    function set_print_settings(instance::GtkPrintOperation, _print_settings::Maybe(GtkPrintSettings))
        _print_settings = if _print_settings == nothing
                C_NULL
            else
                _print_settings
            end
        ret = ccall(("gtk_print_operation_set_print_settings", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _print_settings)
        nothing
    end
    function set_show_progress(instance::GtkPrintOperation, _show_progress)
        ret = ccall(("gtk_print_operation_set_show_progress", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_progress)
        nothing
    end
    function set_support_selection(instance::GtkPrintOperation, _support_selection)
        ret = ccall(("gtk_print_operation_set_support_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _support_selection)
        nothing
    end
    function set_track_print_status(instance::GtkPrintOperation, _track_status)
        ret = ccall(("gtk_print_operation_set_track_print_status", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _track_status)
        nothing
    end
    function set_unit(instance::GtkPrintOperation, _unit)
        ret = ccall(("gtk_print_operation_set_unit", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _unit)
        nothing
    end
    function set_use_full_page(instance::GtkPrintOperation, _full_page)
        ret = ccall(("gtk_print_operation_set_use_full_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _full_page)
        nothing
    end
    function PrintUnixDialog(_title, _parent::Maybe(GtkWindow))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_print_unix_dialog_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GObject}), _title, _parent)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_custom_tab(instance::GtkPrintUnixDialog, _child::GtkWidget, _tab_label::GtkWidget)
        ret = ccall(("gtk_print_unix_dialog_add_custom_tab", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _tab_label)
        nothing
    end
    function get_current_page(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_current_page", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_embed_page_setup(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_embed_page_setup", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_selection(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_has_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_manual_capabilities(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_manual_capabilities", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_page_setup(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_page_setup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_page_setup_set(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_page_setup_set", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selected_printer(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_selected_printer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrinter, ret, false)
        ret2
    end
    function get_settings(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_settings", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrintSettings, ret, true)
        ret2
    end
    function get_support_selection(instance::GtkPrintUnixDialog)
        ret = ccall(("gtk_print_unix_dialog_get_support_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_current_page(instance::GtkPrintUnixDialog, _current_page)
        ret = ccall(("gtk_print_unix_dialog_set_current_page", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _current_page)
        nothing
    end
    function set_embed_page_setup(instance::GtkPrintUnixDialog, _embed)
        ret = ccall(("gtk_print_unix_dialog_set_embed_page_setup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _embed)
        nothing
    end
    function set_has_selection(instance::GtkPrintUnixDialog, _has_selection)
        ret = ccall(("gtk_print_unix_dialog_set_has_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_selection)
        nothing
    end
    function set_manual_capabilities(instance::GtkPrintUnixDialog, _capabilities)
        ret = ccall(("gtk_print_unix_dialog_set_manual_capabilities", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _capabilities)
        nothing
    end
    function set_page_setup(instance::GtkPrintUnixDialog, _page_setup::GtkPageSetup)
        ret = ccall(("gtk_print_unix_dialog_set_page_setup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page_setup)
        nothing
    end
    function set_settings(instance::GtkPrintUnixDialog, _settings::Maybe(GtkPrintSettings))
        _settings = if _settings == nothing
                C_NULL
            else
                _settings
            end
        ret = ccall(("gtk_print_unix_dialog_set_settings", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _settings)
        nothing
    end
    function set_support_selection(instance::GtkPrintUnixDialog, _support_selection)
        ret = ccall(("gtk_print_unix_dialog_set_support_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _support_selection)
        nothing
    end
    function Printer(_name, _backend::GtkPrintBackend, _virtual_)
        ret = ccall(("gtk_printer_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Ptr{GtkPrintBackend}, Cint), _name, _backend, _virtual_)
        ret2 = convert(GtkPrinter, ret, true)
        ret2
    end
    function accepts_pdf(instance::GtkPrinter)
        ret = ccall(("gtk_printer_accepts_pdf", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function accepts_ps(instance::GtkPrinter)
        ret = ccall(("gtk_printer_accepts_ps", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function compare(instance::GtkPrinter, _b::GtkPrinter)
        ret = ccall(("gtk_printer_compare", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _b)
        ret
    end
    function get_backend(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_backend", "libgtk-4.so.1"), Ptr{GtkPrintBackend}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrintBackend, ret)
        ret2
    end
    function get_capabilities(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_capabilities", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_default_page_size(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_default_page_size", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, true)
        ret2
    end
    function get_description(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_description", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_hard_margins(instance::GtkPrinter)
        m_top = Ref{Float64}()
        m_bottom = Ref{Float64}()
        m_left = Ref{Float64}()
        m_right = Ref{Float64}()
        ret = ccall(("gtk_printer_get_hard_margins", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}), instance, m_top, m_bottom, m_left, m_right)
        ret2 = convert(Bool, ret)
        _top = m_top[]
        _bottom = m_bottom[]
        _left = m_left[]
        _right = m_right[]
        (ret2, _top, _bottom, _left, _right)
    end
    function get_hard_margins_for_paper_size(instance::GtkPrinter, _paper_size::GtkPaperSize)
        m_top = Ref{Float64}()
        m_bottom = Ref{Float64}()
        m_left = Ref{Float64}()
        m_right = Ref{Float64}()
        ret = ccall(("gtk_printer_get_hard_margins_for_paper_size", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkPaperSize}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}), instance, _paper_size, m_top, m_bottom, m_left, m_right)
        ret2 = convert(Bool, ret)
        _top = m_top[]
        _bottom = m_bottom[]
        _left = m_left[]
        _right = m_right[]
        (ret2, _top, _bottom, _left, _right)
    end
    function get_icon_name(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_job_count(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_job_count", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_location(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_location", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_name(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_state_message(instance::GtkPrinter)
        ret = ccall(("gtk_printer_get_state_message", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function has_details(instance::GtkPrinter)
        ret = ccall(("gtk_printer_has_details", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_accepting_jobs(instance::GtkPrinter)
        ret = ccall(("gtk_printer_is_accepting_jobs", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_active(instance::GtkPrinter)
        ret = ccall(("gtk_printer_is_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_default(instance::GtkPrinter)
        ret = ccall(("gtk_printer_is_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_paused(instance::GtkPrinter)
        ret = ccall(("gtk_printer_is_paused", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_virtual(instance::GtkPrinter)
        ret = ccall(("gtk_printer_is_virtual", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function list_papers(instance::GtkPrinter)
        ret = ccall(("gtk_printer_list_papers", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function request_details(instance::GtkPrinter)
        ret = ccall(("gtk_printer_request_details", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function ProgressBar()
        ret = ccall(("gtk_progress_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_ellipsize(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_ellipsize", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_fraction(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_fraction", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_inverted(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_inverted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_pulse_step(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_pulse_step", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_show_text(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_show_text", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function pulse(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_pulse", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_ellipsize(instance::GtkProgressBar, _mode)
        ret = ccall(("gtk_progress_bar_set_ellipsize", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_fraction(instance::GtkProgressBar, _fraction)
        ret = ccall(("gtk_progress_bar_set_fraction", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_inverted(instance::GtkProgressBar, _inverted)
        ret = ccall(("gtk_progress_bar_set_inverted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_pulse_step(instance::GtkProgressBar, _fraction)
        ret = ccall(("gtk_progress_bar_set_pulse_step", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_show_text(instance::GtkProgressBar, _show_text)
        ret = ccall(("gtk_progress_bar_set_show_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_text)
        nothing
    end
    function set_text(instance::GtkProgressBar, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_progress_bar_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function get_adjustment(instance::GtkRange)
        ret = ccall(("gtk_range_get_adjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_fill_level", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_flippable(instance::GtkRange)
        ret = ccall(("gtk_range_get_flippable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inverted(instance::GtkRange)
        ret = ccall(("gtk_range_get_inverted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_range_rect(instance::GtkRange)
        m_range_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_range_get_range_rect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_range_rect)
        _range_rect = m_range_rect[]
        _range_rect = convert(GdkRectangle, _range_rect, false)
        _range_rect
    end
    function get_restrict_to_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_restrict_to_fill_level", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_round_digits(instance::GtkRange)
        ret = ccall(("gtk_range_get_round_digits", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_show_fill_level", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_slider_range(instance::GtkRange)
        m_slider_start = Ref{Int32}()
        m_slider_end = Ref{Int32}()
        ret = ccall(("gtk_range_get_slider_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_slider_start, m_slider_end)
        _slider_start = m_slider_start[]
        _slider_end = m_slider_end[]
        (_slider_start, _slider_end)
    end
    function get_slider_size_fixed(instance::GtkRange)
        ret = ccall(("gtk_range_get_slider_size_fixed", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_value(instance::GtkRange)
        ret = ccall(("gtk_range_get_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_adjustment(instance::GtkRange, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_range_set_adjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_fill_level(instance::GtkRange, _fill_level)
        ret = ccall(("gtk_range_set_fill_level", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _fill_level)
        nothing
    end
    function set_flippable(instance::GtkRange, _flippable)
        ret = ccall(("gtk_range_set_flippable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _flippable)
        nothing
    end
    function set_increments(instance::GtkRange, _step, _page)
        ret = ccall(("gtk_range_set_increments", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64), instance, _step, _page)
        nothing
    end
    function set_inverted(instance::GtkRange, _setting)
        ret = ccall(("gtk_range_set_inverted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_range(instance::GtkRange, _min, _max)
        ret = ccall(("gtk_range_set_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64), instance, _min, _max)
        nothing
    end
    function set_restrict_to_fill_level(instance::GtkRange, _restrict_to_fill_level)
        ret = ccall(("gtk_range_set_restrict_to_fill_level", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _restrict_to_fill_level)
        nothing
    end
    function set_round_digits(instance::GtkRange, _round_digits)
        ret = ccall(("gtk_range_set_round_digits", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _round_digits)
        nothing
    end
    function set_show_fill_level(instance::GtkRange, _show_fill_level)
        ret = ccall(("gtk_range_set_show_fill_level", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_fill_level)
        nothing
    end
    function set_slider_size_fixed(instance::GtkRange, _size_fixed)
        ret = ccall(("gtk_range_set_slider_size_fixed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _size_fixed)
        nothing
    end
    function set_value(instance::GtkRange, _value)
        ret = ccall(("gtk_range_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function Revealer()
        ret = ccall(("gtk_revealer_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_child_revealed(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_child_revealed", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_child(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_reveal_child", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_duration(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_transition_duration", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_transition_type(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_transition_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = RevealerTransitionType(ret)
        ret2
    end
    function set_child(instance::GtkRevealer, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_revealer_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_reveal_child(instance::GtkRevealer, _reveal_child)
        ret = ccall(("gtk_revealer_set_reveal_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _reveal_child)
        nothing
    end
    function set_transition_duration(instance::GtkRevealer, _duration)
        ret = ccall(("gtk_revealer_set_transition_duration", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::GtkRevealer, _transition)
        ret = ccall(("gtk_revealer_set_transition_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _transition)
        nothing
    end
    function Scale(_orientation, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_scale_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Ptr{GObject}), _orientation, _adjustment)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Scale_new_with_range(_orientation, _min, _max, _step)
        ret = ccall(("gtk_scale_new_with_range", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Float64, Float64, Float64), _orientation, _min, _max, _step)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_mark(instance::GtkScale, _value, _position, _markup)
        _markup = if _markup == nothing
                C_NULL
            else
                _markup
            end
        ret = ccall(("gtk_scale_add_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Int32, Ptr{UInt8}), instance, _value, _position, _markup)
        nothing
    end
    function clear_marks(instance::GtkScale)
        ret = ccall(("gtk_scale_clear_marks", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_digits(instance::GtkScale)
        ret = ccall(("gtk_scale_get_digits", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_draw_value(instance::GtkScale)
        ret = ccall(("gtk_scale_get_draw_value", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_origin(instance::GtkScale)
        ret = ccall(("gtk_scale_get_has_origin", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_layout(instance::GtkScale)
        ret = ccall(("gtk_scale_get_layout", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoLayout, ret, false)
            end
        ret2
    end
    function get_layout_offsets(instance::GtkScale)
        m_x = Ref{Int32}()
        m_y = Ref{Int32}()
        ret = ccall(("gtk_scale_get_layout_offsets", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_x, m_y)
        _x = m_x[]
        _y = m_y[]
        (_x, _y)
    end
    function get_value_pos(instance::GtkScale)
        ret = ccall(("gtk_scale_get_value_pos", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function set_digits(instance::GtkScale, _digits)
        ret = ccall(("gtk_scale_set_digits", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _digits)
        nothing
    end
    function set_draw_value(instance::GtkScale, _draw_value)
        ret = ccall(("gtk_scale_set_draw_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _draw_value)
        nothing
    end
    function set_format_value_func(instance::GtkScale, _func::Maybe(Function), _user_data::Maybe(Nothing), _destroy_notify::Maybe(Function))
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy_notify = if _destroy_notify == nothing
                C_NULL
            else
                _destroy_notify
            end
        ret = ccall(("gtk_scale_set_format_value_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _user_data, _destroy_notify)
        nothing
    end
    function set_has_origin(instance::GtkScale, _has_origin)
        ret = ccall(("gtk_scale_set_has_origin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_origin)
        nothing
    end
    function set_value_pos(instance::GtkScale, _pos)
        ret = ccall(("gtk_scale_set_value_pos", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pos)
        nothing
    end
    function ScaleButton(_min, _max, _step, _icons)
        _icons = if _icons == nothing
                C_NULL
            else
                _icons
            end
        ret = ccall(("gtk_scale_button_new", "libgtk-4.so.1"), Ptr{GObject}, (Float64, Float64, Float64, Ptr{Ptr{UInt8}}), _min, _max, _step, _icons)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_adjustment(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_adjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_minus_button(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_minus_button", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkButton, ret, false)
        ret2
    end
    function get_plus_button(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_plus_button", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkButton, ret, false)
        ret2
    end
    function get_popup(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_popup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_value(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_adjustment(instance::GtkScaleButton, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_scale_button_set_adjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_icons(instance::GtkScaleButton, _icons)
        ret = ccall(("gtk_scale_button_set_icons", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}), instance, _icons)
        nothing
    end
    function set_value(instance::GtkScaleButton, _value)
        ret = ccall(("gtk_scale_button_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function Scrollbar(_orientation, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_scrollbar_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Ptr{GObject}), _orientation, _adjustment)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_adjustment(instance::GtkScrollbar)
        ret = ccall(("gtk_scrollbar_get_adjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function set_adjustment(instance::GtkScrollbar, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_scrollbar_set_adjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function ScrolledWindow()
        ret = ccall(("gtk_scrolled_window_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_hadjustment(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_hadjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_has_frame(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_has_frame", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hscrollbar(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_hscrollbar", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_kinetic_scrolling(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_kinetic_scrolling", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_content_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_max_content_height", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_content_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_max_content_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_content_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_min_content_height", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_content_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_min_content_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_overlay_scrolling(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_overlay_scrolling", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_placement(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_placement", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = CornerType(ret)
        ret2
    end
    function get_policy(instance::GtkScrolledWindow)
        m_hscrollbar_policy = Ref{Int32}()
        m_vscrollbar_policy = Ref{Int32}()
        ret = ccall(("gtk_scrolled_window_get_policy", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_hscrollbar_policy, m_vscrollbar_policy)
        _hscrollbar_policy = m_hscrollbar_policy[]
        _hscrollbar_policy = PolicyType(_hscrollbar_policy)
        _vscrollbar_policy = m_vscrollbar_policy[]
        _vscrollbar_policy = PolicyType(_vscrollbar_policy)
        (_hscrollbar_policy, _vscrollbar_policy)
    end
    function get_propagate_natural_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_propagate_natural_height", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_propagate_natural_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_propagate_natural_width", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_vadjustment(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_vadjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_vscrollbar(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_vscrollbar", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_child(instance::GtkScrolledWindow, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_scrolled_window_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_hadjustment(instance::GtkScrolledWindow, _hadjustment::Maybe(GtkAdjustment))
        _hadjustment = if _hadjustment == nothing
                C_NULL
            else
                _hadjustment
            end
        ret = ccall(("gtk_scrolled_window_set_hadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _hadjustment)
        nothing
    end
    function set_has_frame(instance::GtkScrolledWindow, _has_frame)
        ret = ccall(("gtk_scrolled_window_set_has_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_frame)
        nothing
    end
    function set_kinetic_scrolling(instance::GtkScrolledWindow, _kinetic_scrolling)
        ret = ccall(("gtk_scrolled_window_set_kinetic_scrolling", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _kinetic_scrolling)
        nothing
    end
    function set_max_content_height(instance::GtkScrolledWindow, _height)
        ret = ccall(("gtk_scrolled_window_set_max_content_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _height)
        nothing
    end
    function set_max_content_width(instance::GtkScrolledWindow, _width)
        ret = ccall(("gtk_scrolled_window_set_max_content_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function set_min_content_height(instance::GtkScrolledWindow, _height)
        ret = ccall(("gtk_scrolled_window_set_min_content_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _height)
        nothing
    end
    function set_min_content_width(instance::GtkScrolledWindow, _width)
        ret = ccall(("gtk_scrolled_window_set_min_content_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function set_overlay_scrolling(instance::GtkScrolledWindow, _overlay_scrolling)
        ret = ccall(("gtk_scrolled_window_set_overlay_scrolling", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _overlay_scrolling)
        nothing
    end
    function set_placement(instance::GtkScrolledWindow, _window_placement)
        ret = ccall(("gtk_scrolled_window_set_placement", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _window_placement)
        nothing
    end
    function set_policy(instance::GtkScrolledWindow, _hscrollbar_policy, _vscrollbar_policy)
        ret = ccall(("gtk_scrolled_window_set_policy", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _hscrollbar_policy, _vscrollbar_policy)
        nothing
    end
    function set_propagate_natural_height(instance::GtkScrolledWindow, _propagate)
        ret = ccall(("gtk_scrolled_window_set_propagate_natural_height", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _propagate)
        nothing
    end
    function set_propagate_natural_width(instance::GtkScrolledWindow, _propagate)
        ret = ccall(("gtk_scrolled_window_set_propagate_natural_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _propagate)
        nothing
    end
    function set_vadjustment(instance::GtkScrolledWindow, _vadjustment::Maybe(GtkAdjustment))
        _vadjustment = if _vadjustment == nothing
                C_NULL
            else
                _vadjustment
            end
        ret = ccall(("gtk_scrolled_window_set_vadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _vadjustment)
        nothing
    end
    function unset_placement(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_unset_placement", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function SearchBar()
        ret = ccall(("gtk_search_bar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function connect_entry(instance::GtkSearchBar, _entry)
        ret = ccall(("gtk_search_bar_connect_entry", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _entry)
        nothing
    end
    function get_child(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_key_capture_widget(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_key_capture_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_search_mode(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_search_mode", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_close_button(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_show_close_button", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_child(instance::GtkSearchBar, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_search_bar_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_key_capture_widget(instance::GtkSearchBar, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_search_bar_set_key_capture_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_search_mode(instance::GtkSearchBar, _search_mode)
        ret = ccall(("gtk_search_bar_set_search_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _search_mode)
        nothing
    end
    function set_show_close_button(instance::GtkSearchBar, _visible)
        ret = ccall(("gtk_search_bar_set_show_close_button", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function SearchEntry()
        ret = ccall(("gtk_search_entry_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_key_capture_widget(instance::GtkSearchEntry)
        ret = ccall(("gtk_search_entry_get_key_capture_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_key_capture_widget(instance::GtkSearchEntry, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_search_entry_set_key_capture_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function SelectionFilterModel(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_selection_filter_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkSelectionFilterModel, ret, true)
        ret2
    end
    function get_model(instance::GtkSelectionFilterModel)
        ret = ccall(("gtk_selection_filter_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function set_model(instance::GtkSelectionFilterModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_selection_filter_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function Separator(_orientation)
        ret = ccall(("gtk_separator_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _orientation)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_default()
        ret = ccall(("gtk_settings_get_default", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkSettings, ret, false)
            end
        ret2
    end
    function get_for_display(_display::GdkDisplay)
        ret = ccall(("gtk_settings_get_for_display", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _display)
        ret2 = convert(GtkSettings, ret, false)
        ret2
    end
    function reset_property(instance::GtkSettings, _name)
        ret = ccall(("gtk_settings_reset_property", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function Shortcut(_trigger::Maybe(GtkShortcutTrigger), _action::Maybe(GtkShortcutAction))
        _trigger = if _trigger == nothing
                C_NULL
            else
                _trigger
            end
        _action = if _action == nothing
                C_NULL
            else
                _action
            end
        ret = ccall(("gtk_shortcut_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _trigger, _action)
        ret2 = convert(GtkShortcut, ret, true)
        ret2
    end
    function get_action(instance::GtkShortcut)
        ret = ccall(("gtk_shortcut_get_action", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkShortcutAction, ret, false)
            end
        ret2
    end
    function get_arguments(instance::GtkShortcut)
        ret = ccall(("gtk_shortcut_get_arguments", "libgtk-4.so.1"), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function get_trigger(instance::GtkShortcut)
        ret = ccall(("gtk_shortcut_get_trigger", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkShortcutTrigger, ret, false)
            end
        ret2
    end
    function set_action(instance::GtkShortcut, _action::Maybe(GtkShortcutAction))
        _action = if _action == nothing
                C_NULL
            else
                _action
            end
        ret = ccall(("gtk_shortcut_set_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _action)
        nothing
    end
    function set_arguments(instance::GtkShortcut, _args::Maybe(GVariant))
        _args = if _args == nothing
                C_NULL
            else
                _args
            end
        ret = ccall(("gtk_shortcut_set_arguments", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GVariant}), instance, _args)
        nothing
    end
    function set_trigger(instance::GtkShortcut, _trigger::Maybe(GtkShortcutTrigger))
        _trigger = if _trigger == nothing
                C_NULL
            else
                _trigger
            end
        ret = ccall(("gtk_shortcut_set_trigger", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _trigger)
        nothing
    end
    function ShortcutController()
        ret = ccall(("gtk_shortcut_controller_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function ShortcutController_new_for_model(_model)
        ret = ccall(("gtk_shortcut_controller_new_for_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkEventController, ret, true)
        ret2
    end
    function add_shortcut(instance::GtkShortcutController, _shortcut::GtkShortcut)
        ret = ccall(("gtk_shortcut_controller_add_shortcut", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _shortcut)
        nothing
    end
    function get_mnemonics_modifiers(instance::GtkShortcutController)
        ret = ccall(("gtk_shortcut_controller_get_mnemonics_modifiers", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_scope(instance::GtkShortcutController)
        ret = ccall(("gtk_shortcut_controller_get_scope", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ShortcutScope(ret)
        ret2
    end
    function remove_shortcut(instance::GtkShortcutController, _shortcut::GtkShortcut)
        ret = ccall(("gtk_shortcut_controller_remove_shortcut", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _shortcut)
        nothing
    end
    function set_mnemonics_modifiers(instance::GtkShortcutController, _modifiers)
        ret = ccall(("gtk_shortcut_controller_set_mnemonics_modifiers", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _modifiers)
        nothing
    end
    function set_scope(instance::GtkShortcutController, _scope)
        ret = ccall(("gtk_shortcut_controller_set_scope", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _scope)
        nothing
    end
    function ShortcutLabel(_accelerator)
        ret = ccall(("gtk_shortcut_label_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _accelerator)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_accelerator(instance::GtkShortcutLabel)
        ret = ccall(("gtk_shortcut_label_get_accelerator", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_disabled_text(instance::GtkShortcutLabel)
        ret = ccall(("gtk_shortcut_label_get_disabled_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_accelerator(instance::GtkShortcutLabel, _accelerator)
        ret = ccall(("gtk_shortcut_label_set_accelerator", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _accelerator)
        nothing
    end
    function set_disabled_text(instance::GtkShortcutLabel, _disabled_text)
        ret = ccall(("gtk_shortcut_label_set_disabled_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _disabled_text)
        nothing
    end
    function SignalAction(_signal_name)
        ret = ccall(("gtk_signal_action_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _signal_name)
        ret2 = convert(GtkSignalAction, ret, true)
        ret2
    end
    function get_signal_name(instance::GtkSignalAction)
        ret = ccall(("gtk_signal_action_get_signal_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function SignalListItemFactory()
        ret = ccall(("gtk_signal_list_item_factory_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkListItemFactory, ret, true)
        ret2
    end
    function SingleSelection(_model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_single_selection_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkSingleSelection, ret, true)
        ret2
    end
    function get_autoselect(instance::GtkSingleSelection)
        ret = ccall(("gtk_single_selection_get_autoselect", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_unselect(instance::GtkSingleSelection)
        ret = ccall(("gtk_single_selection_get_can_unselect", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkSingleSelection)
        ret = ccall(("gtk_single_selection_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_selected(instance::GtkSingleSelection)
        ret = ccall(("gtk_single_selection_get_selected", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_item(instance::GtkSingleSelection)
        ret = ccall(("gtk_single_selection_get_selected_item", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function set_autoselect(instance::GtkSingleSelection, _autoselect)
        ret = ccall(("gtk_single_selection_set_autoselect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _autoselect)
        nothing
    end
    function set_can_unselect(instance::GtkSingleSelection, _can_unselect)
        ret = ccall(("gtk_single_selection_set_can_unselect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _can_unselect)
        nothing
    end
    function set_model(instance::GtkSingleSelection, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_single_selection_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_selected(instance::GtkSingleSelection, _position)
        ret = ccall(("gtk_single_selection_set_selected", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function SizeGroup(_mode)
        ret = ccall(("gtk_size_group_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _mode)
        ret2 = convert(GtkSizeGroup, ret, true)
        ret2
    end
    function add_widget(instance::GtkSizeGroup, _widget::GtkWidget)
        ret = ccall(("gtk_size_group_add_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_mode(instance::GtkSizeGroup)
        ret = ccall(("gtk_size_group_get_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SizeGroupMode(ret)
        ret2
    end
    function get_widgets(instance::GtkSizeGroup)
        ret = ccall(("gtk_size_group_get_widgets", "libgtk-4.so.1"), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function remove_widget(instance::GtkSizeGroup, _widget::GtkWidget)
        ret = ccall(("gtk_size_group_remove_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_mode(instance::GtkSizeGroup, _mode)
        ret = ccall(("gtk_size_group_set_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function SliceListModel(_model, _offset, _size)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_slice_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32, UInt32), _model, _offset, _size)
        ret2 = convert(GtkSliceListModel, ret, true)
        ret2
    end
    function get_model(instance::GtkSliceListModel)
        ret = ccall(("gtk_slice_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_offset(instance::GtkSliceListModel)
        ret = ccall(("gtk_slice_list_model_get_offset", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_size(instance::GtkSliceListModel)
        ret = ccall(("gtk_slice_list_model_get_size", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_model(instance::GtkSliceListModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_slice_list_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_offset(instance::GtkSliceListModel, _offset)
        ret = ccall(("gtk_slice_list_model_set_offset", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _offset)
        nothing
    end
    function set_size(instance::GtkSliceListModel, _size)
        ret = ccall(("gtk_slice_list_model_set_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _size)
        nothing
    end
    function Snapshot()
        ret = ccall(("gtk_snapshot_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkSnapshot, ret, true)
        ret2
    end
    function append_border(instance::GtkSnapshot, _outline::GskRoundedRect, _border_width, _border_color)
        _border_width = convert(Vector{Float32}, _border_width)
        _border_color = convert(Vector{Ptr{GdkRGBA}}, _border_color)
        ret = ccall(("gtk_snapshot_append_border", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskRoundedRect}, Ptr{Float32}, Ptr{Ptr{GdkRGBA}}), instance, _outline, _border_width, _border_color)
        nothing
    end
    function append_cairo(instance::GtkSnapshot, _bounds::GrapheneRect)
        ret = ccall(("gtk_snapshot_append_cairo", "libgtk-4.so.1"), Ptr{cairoContext}, (Ptr{GObject}, Ptr{GrapheneRect}), instance, _bounds)
        ret2 = convert(cairoContext, ret, true)
        ret2
    end
    function append_color(instance::GtkSnapshot, _color::GdkRGBA, _bounds::GrapheneRect)
        ret = ccall(("gtk_snapshot_append_color", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRGBA}, Ptr{GrapheneRect}), instance, _color, _bounds)
        nothing
    end
    function append_conic_gradient(instance::GtkSnapshot, _bounds::GrapheneRect, _center::GraphenePoint, _rotation, _stops)
        _stops = convert(Vector{GskColorStop}, _stops)
        _n_stops = length(_stops)
        ret = ccall(("gtk_snapshot_append_conic_gradient", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Ptr{GskColorStop}, UInt64), instance, _bounds, _center, _rotation, _stops, _n_stops)
        nothing
    end
    function append_inset_shadow(instance::GtkSnapshot, _outline::GskRoundedRect, _color::GdkRGBA, _dx, _dy, _spread, _blur_radius)
        ret = ccall(("gtk_snapshot_append_inset_shadow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskRoundedRect}, Ptr{GdkRGBA}, Float32, Float32, Float32, Float32), instance, _outline, _color, _dx, _dy, _spread, _blur_radius)
        nothing
    end
    function append_layout(instance::GtkSnapshot, _layout::PangoLayout, _color::GdkRGBA)
        ret = ccall(("gtk_snapshot_append_layout", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GdkRGBA}), instance, _layout, _color)
        nothing
    end
    function append_linear_gradient(instance::GtkSnapshot, _bounds::GrapheneRect, _start_point::GraphenePoint, _end_point::GraphenePoint, _stops)
        _stops = convert(Vector{GskColorStop}, _stops)
        _n_stops = length(_stops)
        ret = ccall(("gtk_snapshot_append_linear_gradient", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GskColorStop}, UInt64), instance, _bounds, _start_point, _end_point, _stops, _n_stops)
        nothing
    end
    function append_outset_shadow(instance::GtkSnapshot, _outline::GskRoundedRect, _color::GdkRGBA, _dx, _dy, _spread, _blur_radius)
        ret = ccall(("gtk_snapshot_append_outset_shadow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskRoundedRect}, Ptr{GdkRGBA}, Float32, Float32, Float32, Float32), instance, _outline, _color, _dx, _dy, _spread, _blur_radius)
        nothing
    end
    function append_radial_gradient(instance::GtkSnapshot, _bounds::GrapheneRect, _center::GraphenePoint, _hradius, _vradius, _start, _end, _stops)
        _stops = convert(Vector{GskColorStop}, _stops)
        _n_stops = length(_stops)
        ret = ccall(("gtk_snapshot_append_radial_gradient", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Float32, Float32, Float32, Ptr{GskColorStop}, UInt64), instance, _bounds, _center, _hradius, _vradius, _start, _end, _stops, _n_stops)
        nothing
    end
    function append_repeating_linear_gradient(instance::GtkSnapshot, _bounds::GrapheneRect, _start_point::GraphenePoint, _end_point::GraphenePoint, _stops)
        _stops = convert(Vector{GskColorStop}, _stops)
        _n_stops = length(_stops)
        ret = ccall(("gtk_snapshot_append_repeating_linear_gradient", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GraphenePoint}, Ptr{GraphenePoint}, Ptr{GskColorStop}, UInt64), instance, _bounds, _start_point, _end_point, _stops, _n_stops)
        nothing
    end
    function append_repeating_radial_gradient(instance::GtkSnapshot, _bounds::GrapheneRect, _center::GraphenePoint, _hradius, _vradius, _start, _end, _stops)
        _stops = convert(Vector{GskColorStop}, _stops)
        _n_stops = length(_stops)
        ret = ccall(("gtk_snapshot_append_repeating_radial_gradient", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GraphenePoint}, Float32, Float32, Float32, Float32, Ptr{GskColorStop}, UInt64), instance, _bounds, _center, _hradius, _vradius, _start, _end, _stops, _n_stops)
        nothing
    end
    function append_texture(instance::GtkSnapshot, _texture::GdkTexture, _bounds::GrapheneRect)
        ret = ccall(("gtk_snapshot_append_texture", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GrapheneRect}), instance, _texture, _bounds)
        nothing
    end
    function gl_shader_pop_texture(instance::GtkSnapshot)
        ret = ccall(("gtk_snapshot_gl_shader_pop_texture", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function perspective(instance::GtkSnapshot, _depth)
        ret = ccall(("gtk_snapshot_perspective", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _depth)
        nothing
    end
    function pop(instance::GtkSnapshot)
        ret = ccall(("gtk_snapshot_pop", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function push_blend(instance::GtkSnapshot, _blend_mode)
        ret = ccall(("gtk_snapshot_push_blend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _blend_mode)
        nothing
    end
    function push_blur(instance::GtkSnapshot, _radius)
        ret = ccall(("gtk_snapshot_push_blur", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _radius)
        nothing
    end
    function push_clip(instance::GtkSnapshot, _bounds::GrapheneRect)
        ret = ccall(("gtk_snapshot_push_clip", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}), instance, _bounds)
        nothing
    end
    function push_color_matrix(instance::GtkSnapshot, _color_matrix::GrapheneMatrix, _color_offset::GrapheneVec4)
        ret = ccall(("gtk_snapshot_push_color_matrix", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneMatrix}, Ptr{GrapheneVec4}), instance, _color_matrix, _color_offset)
        nothing
    end
    function push_cross_fade(instance::GtkSnapshot, _progress)
        ret = ccall(("gtk_snapshot_push_cross_fade", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _progress)
        nothing
    end
    function push_gl_shader(instance::GtkSnapshot, _shader::GskGLShader, _bounds::GrapheneRect, _take_args::GBytes)
        ret = ccall(("gtk_snapshot_push_gl_shader", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GBytes}), instance, _shader, _bounds, _take_args)
        nothing
    end
    function push_opacity(instance::GtkSnapshot, _opacity)
        ret = ccall(("gtk_snapshot_push_opacity", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _opacity)
        nothing
    end
    function push_repeat(instance::GtkSnapshot, _bounds::GrapheneRect, _child_bounds::Maybe(GrapheneRect))
        _child_bounds = if _child_bounds == nothing
                C_NULL
            else
                _child_bounds
            end
        ret = ccall(("gtk_snapshot_push_repeat", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneRect}, Ptr{GrapheneRect}), instance, _bounds, _child_bounds)
        nothing
    end
    function push_rounded_clip(instance::GtkSnapshot, _bounds::GskRoundedRect)
        ret = ccall(("gtk_snapshot_push_rounded_clip", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskRoundedRect}), instance, _bounds)
        nothing
    end
    function push_shadow(instance::GtkSnapshot, _shadow::GskShadow, _n_shadows)
        ret = ccall(("gtk_snapshot_push_shadow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskShadow}, UInt64), instance, _shadow, _n_shadows)
        nothing
    end
    function render_background(instance::GtkSnapshot, _context::GtkStyleContext, _x, _y, _width, _height)
        ret = ccall(("gtk_snapshot_render_background", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Float64, Float64), instance, _context, _x, _y, _width, _height)
        nothing
    end
    function render_focus(instance::GtkSnapshot, _context::GtkStyleContext, _x, _y, _width, _height)
        ret = ccall(("gtk_snapshot_render_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Float64, Float64), instance, _context, _x, _y, _width, _height)
        nothing
    end
    function render_frame(instance::GtkSnapshot, _context::GtkStyleContext, _x, _y, _width, _height)
        ret = ccall(("gtk_snapshot_render_frame", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Float64, Float64), instance, _context, _x, _y, _width, _height)
        nothing
    end
    function render_insertion_cursor(instance::GtkSnapshot, _context::GtkStyleContext, _x, _y, _layout::PangoLayout, _index, _direction)
        ret = ccall(("gtk_snapshot_render_insertion_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Ptr{GObject}, Int32, Int32), instance, _context, _x, _y, _layout, _index, _direction)
        nothing
    end
    function render_layout(instance::GtkSnapshot, _context::GtkStyleContext, _x, _y, _layout::PangoLayout)
        ret = ccall(("gtk_snapshot_render_layout", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Ptr{GObject}), instance, _context, _x, _y, _layout)
        nothing
    end
    function restore(instance::GtkSnapshot)
        ret = ccall(("gtk_snapshot_restore", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function rotate(instance::GtkSnapshot, _angle)
        ret = ccall(("gtk_snapshot_rotate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _angle)
        nothing
    end
    function rotate_3d(instance::GtkSnapshot, _angle, _axis::GrapheneVec3)
        ret = ccall(("gtk_snapshot_rotate_3d", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32, Ptr{GrapheneVec3}), instance, _angle, _axis)
        nothing
    end
    function save(instance::GtkSnapshot)
        ret = ccall(("gtk_snapshot_save", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function scale(instance::GtkSnapshot, _factor_x, _factor_y)
        ret = ccall(("gtk_snapshot_scale", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32, Float32), instance, _factor_x, _factor_y)
        nothing
    end
    function scale_3d(instance::GtkSnapshot, _factor_x, _factor_y, _factor_z)
        ret = ccall(("gtk_snapshot_scale_3d", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32, Float32, Float32), instance, _factor_x, _factor_y, _factor_z)
        nothing
    end
    function to_node(instance::GtkSnapshot)
        ret = ccall(("gtk_snapshot_to_node", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderNode, ret, true)
        ret2
    end
    function to_paintable(instance::GtkSnapshot, _size::Maybe(GrapheneSize))
        _size = if _size == nothing
                C_NULL
            else
                _size
            end
        ret = ccall(("gtk_snapshot_to_paintable", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GrapheneSize}), instance, _size)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function transform(instance::GtkSnapshot, _transform::Maybe(GskTransform))
        _transform = if _transform == nothing
                C_NULL
            else
                _transform
            end
        ret = ccall(("gtk_snapshot_transform", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GskTransform}), instance, _transform)
        nothing
    end
    function transform_matrix(instance::GtkSnapshot, _matrix::GrapheneMatrix)
        ret = ccall(("gtk_snapshot_transform_matrix", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GrapheneMatrix}), instance, _matrix)
        nothing
    end
    function translate(instance::GtkSnapshot, _point::GraphenePoint)
        ret = ccall(("gtk_snapshot_translate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GraphenePoint}), instance, _point)
        nothing
    end
    function translate_3d(instance::GtkSnapshot, _point::GraphenePoint3D)
        ret = ccall(("gtk_snapshot_translate_3d", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GraphenePoint3D}), instance, _point)
        nothing
    end
    function SortListModel(_model, _sorter::Maybe(GtkSorter))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        _sorter = if _sorter == nothing
                C_NULL
            else
                _sorter
            end
        ret = ccall(("gtk_sort_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _model, _sorter)
        ret2 = convert(GtkSortListModel, ret, true)
        ret2
    end
    function get_incremental(instance::GtkSortListModel)
        ret = ccall(("gtk_sort_list_model_get_incremental", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkSortListModel)
        ret = ccall(("gtk_sort_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_pending(instance::GtkSortListModel)
        ret = ccall(("gtk_sort_list_model_get_pending", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_sorter(instance::GtkSortListModel)
        ret = ccall(("gtk_sort_list_model_get_sorter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkSorter, ret, false)
            end
        ret2
    end
    function set_incremental(instance::GtkSortListModel, _incremental)
        ret = ccall(("gtk_sort_list_model_set_incremental", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _incremental)
        nothing
    end
    function set_model(instance::GtkSortListModel, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_sort_list_model_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_sorter(instance::GtkSortListModel, _sorter::Maybe(GtkSorter))
        _sorter = if _sorter == nothing
                C_NULL
            else
                _sorter
            end
        ret = ccall(("gtk_sort_list_model_set_sorter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sorter)
        nothing
    end
    function changed(instance::GtkSorter, _change)
        ret = ccall(("gtk_sorter_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _change)
        nothing
    end
    function compare(instance::GtkSorter, _item1::GObject, _item2::GObject)
        ret = ccall(("gtk_sorter_compare", "libgtk-4.so.1"), UInt16, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _item1, _item2)
        ret2 = Ordering(ret)
        ret2
    end
    function get_order(instance::GtkSorter)
        ret = ccall(("gtk_sorter_get_order", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SorterOrder(ret)
        ret2
    end
    function SpinButton(_adjustment::Maybe(GtkAdjustment), _climb_rate, _digits)
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_spin_button_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Float64, UInt32), _adjustment, _climb_rate, _digits)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function SpinButton_new_with_range(_min, _max, _step)
        ret = ccall(("gtk_spin_button_new_with_range", "libgtk-4.so.1"), Ptr{GObject}, (Float64, Float64, Float64), _min, _max, _step)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function configure(instance::GtkSpinButton, _adjustment::Maybe(GtkAdjustment), _climb_rate, _digits)
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_spin_button_configure", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, UInt32), instance, _adjustment, _climb_rate, _digits)
        nothing
    end
    function get_adjustment(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_adjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_climb_rate(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_climb_rate", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_digits(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_digits", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_increments(instance::GtkSpinButton)
        m_step = Ref{Float64}()
        m_page = Ref{Float64}()
        ret = ccall(("gtk_spin_button_get_increments", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_step, m_page)
        _step = m_step[]
        _page = m_page[]
        (_step, _page)
    end
    function get_numeric(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_numeric", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_range(instance::GtkSpinButton)
        m_min = Ref{Float64}()
        m_max = Ref{Float64}()
        ret = ccall(("gtk_spin_button_get_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_min, m_max)
        _min = m_min[]
        _max = m_max[]
        (_min, _max)
    end
    function get_snap_to_ticks(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_snap_to_ticks", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_update_policy(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_update_policy", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SpinButtonUpdatePolicy(ret)
        ret2
    end
    function get_value(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_value", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value_as_int(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_value_as_int", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_wrap", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_adjustment(instance::GtkSpinButton, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_spin_button_set_adjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_climb_rate(instance::GtkSpinButton, _climb_rate)
        ret = ccall(("gtk_spin_button_set_climb_rate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _climb_rate)
        nothing
    end
    function set_digits(instance::GtkSpinButton, _digits)
        ret = ccall(("gtk_spin_button_set_digits", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _digits)
        nothing
    end
    function set_increments(instance::GtkSpinButton, _step, _page)
        ret = ccall(("gtk_spin_button_set_increments", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64), instance, _step, _page)
        nothing
    end
    function set_numeric(instance::GtkSpinButton, _numeric)
        ret = ccall(("gtk_spin_button_set_numeric", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _numeric)
        nothing
    end
    function set_range(instance::GtkSpinButton, _min, _max)
        ret = ccall(("gtk_spin_button_set_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64, Float64), instance, _min, _max)
        nothing
    end
    function set_snap_to_ticks(instance::GtkSpinButton, _snap_to_ticks)
        ret = ccall(("gtk_spin_button_set_snap_to_ticks", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _snap_to_ticks)
        nothing
    end
    function set_update_policy(instance::GtkSpinButton, _policy)
        ret = ccall(("gtk_spin_button_set_update_policy", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function set_value(instance::GtkSpinButton, _value)
        ret = ccall(("gtk_spin_button_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_wrap(instance::GtkSpinButton, _wrap)
        ret = ccall(("gtk_spin_button_set_wrap", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _wrap)
        nothing
    end
    function spin(instance::GtkSpinButton, _direction, _increment)
        ret = ccall(("gtk_spin_button_spin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Float64), instance, _direction, _increment)
        nothing
    end
    function update(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_update", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function Spinner()
        ret = ccall(("gtk_spinner_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_spinning(instance::GtkSpinner)
        ret = ccall(("gtk_spinner_get_spinning", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_spinning(instance::GtkSpinner, _spinning)
        ret = ccall(("gtk_spinner_set_spinning", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _spinning)
        nothing
    end
    function start(instance::GtkSpinner)
        ret = ccall(("gtk_spinner_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function stop(instance::GtkSpinner)
        ret = ccall(("gtk_spinner_stop", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function Stack()
        ret = ccall(("gtk_stack_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_child(instance::GtkStack, _child::GtkWidget)
        ret = ccall(("gtk_stack_add_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(GtkStackPage, ret, false)
        ret2
    end
    function add_named(instance::GtkStack, _child::GtkWidget, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_stack_add_named", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}), instance, _child, _name)
        ret2 = convert(GtkStackPage, ret, false)
        ret2
    end
    function add_titled(instance::GtkStack, _child::GtkWidget, _name, _title)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_stack_add_titled", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}), instance, _child, _name, _title)
        ret2 = convert(GtkStackPage, ret, false)
        ret2
    end
    function get_child_by_name(instance::GtkStack, _name)
        ret = ccall(("gtk_stack_get_child_by_name", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_hhomogeneous(instance::GtkStack)
        ret = ccall(("gtk_stack_get_hhomogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_interpolate_size(instance::GtkStack)
        ret = ccall(("gtk_stack_get_interpolate_size", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_page(instance::GtkStack, _child::GtkWidget)
        ret = ccall(("gtk_stack_get_page", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(GtkStackPage, ret, false)
        ret2
    end
    function get_pages(instance::GtkStack)
        ret = ccall(("gtk_stack_get_pages", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_transition_duration(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_duration", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_transition_running(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_running", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_type(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_type", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = StackTransitionType(ret)
        ret2
    end
    function get_vhomogeneous(instance::GtkStack)
        ret = ccall(("gtk_stack_get_vhomogeneous", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_child(instance::GtkStack)
        ret = ccall(("gtk_stack_get_visible_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_visible_child_name(instance::GtkStack)
        ret = ccall(("gtk_stack_get_visible_child_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function remove(instance::GtkStack, _child::GtkWidget)
        ret = ccall(("gtk_stack_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_hhomogeneous(instance::GtkStack, _hhomogeneous)
        ret = ccall(("gtk_stack_set_hhomogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _hhomogeneous)
        nothing
    end
    function set_interpolate_size(instance::GtkStack, _interpolate_size)
        ret = ccall(("gtk_stack_set_interpolate_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _interpolate_size)
        nothing
    end
    function set_transition_duration(instance::GtkStack, _duration)
        ret = ccall(("gtk_stack_set_transition_duration", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::GtkStack, _transition)
        ret = ccall(("gtk_stack_set_transition_type", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _transition)
        nothing
    end
    function set_vhomogeneous(instance::GtkStack, _vhomogeneous)
        ret = ccall(("gtk_stack_set_vhomogeneous", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _vhomogeneous)
        nothing
    end
    function set_visible_child(instance::GtkStack, _child::GtkWidget)
        ret = ccall(("gtk_stack_set_visible_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_visible_child_full(instance::GtkStack, _name, _transition)
        ret = ccall(("gtk_stack_set_visible_child_full", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _name, _transition)
        nothing
    end
    function set_visible_child_name(instance::GtkStack, _name)
        ret = ccall(("gtk_stack_set_visible_child_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function get_child(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_icon_name(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_name(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_needs_attention(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_needs_attention", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_underline(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_use_underline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible(instance::GtkStackPage)
        ret = ccall(("gtk_stack_page_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_icon_name(instance::GtkStackPage, _setting)
        ret = ccall(("gtk_stack_page_set_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _setting)
        nothing
    end
    function set_name(instance::GtkStackPage, _setting)
        ret = ccall(("gtk_stack_page_set_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _setting)
        nothing
    end
    function set_needs_attention(instance::GtkStackPage, _setting)
        ret = ccall(("gtk_stack_page_set_needs_attention", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_title(instance::GtkStackPage, _setting)
        ret = ccall(("gtk_stack_page_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _setting)
        nothing
    end
    function set_use_underline(instance::GtkStackPage, _setting)
        ret = ccall(("gtk_stack_page_set_use_underline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_visible(instance::GtkStackPage, _visible)
        ret = ccall(("gtk_stack_page_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function StackSidebar()
        ret = ccall(("gtk_stack_sidebar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_stack(instance::GtkStackSidebar)
        ret = ccall(("gtk_stack_sidebar_get_stack", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkStack, ret, false)
            end
        ret2
    end
    function set_stack(instance::GtkStackSidebar, _stack::GtkStack)
        ret = ccall(("gtk_stack_sidebar_set_stack", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack)
        nothing
    end
    function StackSwitcher()
        ret = ccall(("gtk_stack_switcher_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_stack(instance::GtkStackSwitcher)
        ret = ccall(("gtk_stack_switcher_get_stack", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkStack, ret, false)
            end
        ret2
    end
    function set_stack(instance::GtkStackSwitcher, _stack::Maybe(GtkStack))
        _stack = if _stack == nothing
                C_NULL
            else
                _stack
            end
        ret = ccall(("gtk_stack_switcher_set_stack", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack)
        nothing
    end
    function Statusbar()
        ret = ccall(("gtk_statusbar_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_context_id(instance::GtkStatusbar, _context_description)
        ret = ccall(("gtk_statusbar_get_context_id", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, Ptr{UInt8}), instance, _context_description)
        ret
    end
    function pop(instance::GtkStatusbar, _context_id)
        ret = ccall(("gtk_statusbar_pop", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _context_id)
        nothing
    end
    function push(instance::GtkStatusbar, _context_id, _text)
        ret = ccall(("gtk_statusbar_push", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, UInt32, Ptr{UInt8}), instance, _context_id, _text)
        ret
    end
    function remove(instance::GtkStatusbar, _context_id, _message_id)
        ret = ccall(("gtk_statusbar_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, UInt32), instance, _context_id, _message_id)
        nothing
    end
    function remove_all(instance::GtkStatusbar, _context_id)
        ret = ccall(("gtk_statusbar_remove_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _context_id)
        nothing
    end
    function StringList(_strings)
        _strings = if _strings == nothing
                C_NULL
            else
                _strings
            end
        ret = ccall(("gtk_string_list_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{Ptr{UInt8}},), _strings)
        ret2 = convert(GtkStringList, ret, true)
        ret2
    end
    function append(instance::GtkStringList, _string)
        ret = ccall(("gtk_string_list_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _string)
        nothing
    end
    function get_string(instance::GtkStringList, _position)
        ret = ccall(("gtk_string_list_get_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function remove(instance::GtkStringList, _position)
        ret = ccall(("gtk_string_list_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function splice(instance::GtkStringList, _position, _n_removals, _additions)
        _additions = if _additions == nothing
                C_NULL
            else
                _additions
            end
        ret = ccall(("gtk_string_list_splice", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, UInt32, Ptr{Ptr{UInt8}}), instance, _position, _n_removals, _additions)
        nothing
    end
    function take(instance::GtkStringList, _string)
        ret = ccall(("gtk_string_list_take", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _string)
        nothing
    end
    function StringObject(_string)
        ret = ccall(("gtk_string_object_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _string)
        ret2 = convert(GtkStringObject, ret, true)
        ret2
    end
    function get_string(instance::GtkStringObject)
        ret = ccall(("gtk_string_object_get_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function add_provider_for_display(_display::GdkDisplay, _provider, _priority)
        ret = ccall(("gtk_style_context_add_provider_for_display", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, UInt32), _display, _provider, _priority)
        nothing
    end
    function remove_provider_for_display(_display::GdkDisplay, _provider)
        ret = ccall(("gtk_style_context_remove_provider_for_display", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), _display, _provider)
        nothing
    end
    function add_class(instance::GtkStyleContext, _class_name)
        ret = ccall(("gtk_style_context_add_class", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _class_name)
        nothing
    end
    function add_provider(instance::GtkStyleContext, _provider, _priority)
        ret = ccall(("gtk_style_context_add_provider", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, UInt32), instance, _provider, _priority)
        nothing
    end
    function get_border(instance::GtkStyleContext)
        m_border = Ref{Ptr{GtkBorder}}()
        ret = ccall(("gtk_style_context_get_border", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkBorder}}), instance, m_border)
        _border = m_border[]
        _border = convert(GtkBorder, _border, false)
        _border
    end
    function get_color(instance::GtkStyleContext)
        m_color = Ref{Ptr{GdkRGBA}}()
        ret = ccall(("gtk_style_context_get_color", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRGBA}}), instance, m_color)
        _color = m_color[]
        _color = convert(GdkRGBA, _color, false)
        _color
    end
    function get_display(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_display", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_margin(instance::GtkStyleContext)
        m_margin = Ref{Ptr{GtkBorder}}()
        ret = ccall(("gtk_style_context_get_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkBorder}}), instance, m_margin)
        _margin = m_margin[]
        _margin = convert(GtkBorder, _margin, false)
        _margin
    end
    function get_padding(instance::GtkStyleContext)
        m_padding = Ref{Ptr{GtkBorder}}()
        ret = ccall(("gtk_style_context_get_padding", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkBorder}}), instance, m_padding)
        _padding = m_padding[]
        _padding = convert(GtkBorder, _padding, false)
        _padding
    end
    function get_scale(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_scale", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_state(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_state", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function has_class(instance::GtkStyleContext, _class_name)
        ret = ccall(("gtk_style_context_has_class", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}), instance, _class_name)
        ret2 = convert(Bool, ret)
        ret2
    end
    function lookup_color(instance::GtkStyleContext, _color_name)
        m_color = Ref{Ptr{GdkRGBA}}()
        ret = ccall(("gtk_style_context_lookup_color", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{Ptr{GdkRGBA}}), instance, _color_name, m_color)
        ret2 = convert(Bool, ret)
        _color = m_color[]
        _color = convert(GdkRGBA, _color, false)
        (ret2, _color)
    end
    function remove_class(instance::GtkStyleContext, _class_name)
        ret = ccall(("gtk_style_context_remove_class", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _class_name)
        nothing
    end
    function remove_provider(instance::GtkStyleContext, _provider)
        ret = ccall(("gtk_style_context_remove_provider", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _provider)
        nothing
    end
    function restore(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_restore", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function save(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_save", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_display(instance::GtkStyleContext, _display::GdkDisplay)
        ret = ccall(("gtk_style_context_set_display", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _display)
        nothing
    end
    function set_scale(instance::GtkStyleContext, _scale)
        ret = ccall(("gtk_style_context_set_scale", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _scale)
        nothing
    end
    function set_state(instance::GtkStyleContext, _flags)
        ret = ccall(("gtk_style_context_set_state", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function to_string(instance::GtkStyleContext, _flags)
        ret = ccall(("gtk_style_context_to_string", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32), instance, _flags)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function Switch()
        ret = ccall(("gtk_switch_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_active(instance::GtkSwitch)
        ret = ccall(("gtk_switch_get_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_state(instance::GtkSwitch)
        ret = ccall(("gtk_switch_get_state", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkSwitch, _is_active)
        ret = ccall(("gtk_switch_set_active", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function set_state(instance::GtkSwitch, _state)
        ret = ccall(("gtk_switch_set_state", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _state)
        nothing
    end
    function Text()
        ret = ccall(("gtk_text_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Text_new_with_buffer(_buffer::GtkEntryBuffer)
        ret = ccall(("gtk_text_new_with_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _buffer)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function compute_cursor_extents(instance::GtkText, _position)
        m_strong = Ref{Ptr{GrapheneRect}}()
        m_weak = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("gtk_text_compute_cursor_extents", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt64, Ptr{Ptr{GrapheneRect}}, Ptr{Ptr{GrapheneRect}}), instance, _position, m_strong, m_weak)
        _strong = m_strong[]
        _strong = convert(GrapheneRect, _strong, false)
        _weak = m_weak[]
        _weak = convert(GrapheneRect, _weak, false)
        (_strong, _weak)
    end
    function get_activates_default(instance::GtkText)
        ret = ccall(("gtk_text_get_activates_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_attributes(instance::GtkText)
        ret = ccall(("gtk_text_get_attributes", "libgtk-4.so.1"), Ptr{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoAttrList, ret, false)
            end
        ret2
    end
    function get_buffer(instance::GtkText)
        ret = ccall(("gtk_text_get_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkEntryBuffer, ret, false)
        ret2
    end
    function get_enable_emoji_completion(instance::GtkText)
        ret = ccall(("gtk_text_get_enable_emoji_completion", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extra_menu(instance::GtkText)
        ret = ccall(("gtk_text_get_extra_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_input_hints(instance::GtkText)
        ret = ccall(("gtk_text_get_input_hints", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_purpose(instance::GtkText)
        ret = ccall(("gtk_text_get_input_purpose", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_invisible_char(instance::GtkText)
        ret = ccall(("gtk_text_get_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_max_length(instance::GtkText)
        ret = ccall(("gtk_text_get_max_length", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_overwrite_mode(instance::GtkText)
        ret = ccall(("gtk_text_get_overwrite_mode", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_placeholder_text(instance::GtkText)
        ret = ccall(("gtk_text_get_placeholder_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_propagate_text_width(instance::GtkText)
        ret = ccall(("gtk_text_get_propagate_text_width", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tabs(instance::GtkText)
        ret = ccall(("gtk_text_get_tabs", "libgtk-4.so.1"), Ptr{PangoTabArray}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoTabArray, ret, false)
            end
        ret2
    end
    function get_text_length(instance::GtkText)
        ret = ccall(("gtk_text_get_text_length", "libgtk-4.so.1"), UInt16, (Ptr{GObject},), instance)
        ret
    end
    function get_truncate_multiline(instance::GtkText)
        ret = ccall(("gtk_text_get_truncate_multiline", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visibility(instance::GtkText)
        ret = ccall(("gtk_text_get_visibility", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function grab_focus_without_selecting(instance::GtkText)
        ret = ccall(("gtk_text_grab_focus_without_selecting", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activates_default(instance::GtkText, _activates)
        ret = ccall(("gtk_text_set_activates_default", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _activates)
        nothing
    end
    function set_attributes(instance::GtkText, _attrs::Maybe(PangoAttrList))
        _attrs = if _attrs == nothing
                C_NULL
            else
                _attrs
            end
        ret = ccall(("gtk_text_set_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoAttrList}), instance, _attrs)
        nothing
    end
    function set_buffer(instance::GtkText, _buffer::GtkEntryBuffer)
        ret = ccall(("gtk_text_set_buffer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _buffer)
        nothing
    end
    function set_enable_emoji_completion(instance::GtkText, _enable_emoji_completion)
        ret = ccall(("gtk_text_set_enable_emoji_completion", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_emoji_completion)
        nothing
    end
    function set_extra_menu(instance::GtkText, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_text_set_extra_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_input_hints(instance::GtkText, _hints)
        ret = ccall(("gtk_text_set_input_hints", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::GtkText, _purpose)
        ret = ccall(("gtk_text_set_input_purpose", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _purpose)
        nothing
    end
    function set_invisible_char(instance::GtkText, _ch)
        ret = ccall(("gtk_text_set_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Nothing), instance, _ch)
        nothing
    end
    function set_max_length(instance::GtkText, _length)
        ret = ccall(("gtk_text_set_max_length", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _length)
        nothing
    end
    function set_overwrite_mode(instance::GtkText, _overwrite)
        ret = ccall(("gtk_text_set_overwrite_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _overwrite)
        nothing
    end
    function set_placeholder_text(instance::GtkText, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_text_set_placeholder_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_propagate_text_width(instance::GtkText, _propagate_text_width)
        ret = ccall(("gtk_text_set_propagate_text_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _propagate_text_width)
        nothing
    end
    function set_tabs(instance::GtkText, _tabs::Maybe(PangoTabArray))
        _tabs = if _tabs == nothing
                C_NULL
            else
                _tabs
            end
        ret = ccall(("gtk_text_set_tabs", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoTabArray}), instance, _tabs)
        nothing
    end
    function set_truncate_multiline(instance::GtkText, _truncate_multiline)
        ret = ccall(("gtk_text_set_truncate_multiline", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _truncate_multiline)
        nothing
    end
    function set_visibility(instance::GtkText, _visible)
        ret = ccall(("gtk_text_set_visibility", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function unset_invisible_char(instance::GtkText)
        ret = ccall(("gtk_text_unset_invisible_char", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function TextBuffer(_table::Maybe(GtkTextTagTable))
        _table = if _table == nothing
                C_NULL
            else
                _table
            end
        ret = ccall(("gtk_text_buffer_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _table)
        ret2 = convert(GtkTextBuffer, ret, true)
        ret2
    end
    function add_mark(instance::GtkTextBuffer, _mark::GtkTextMark, _where::GtkTextIter)
        ret = ccall(("gtk_text_buffer_add_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTextIter}), instance, _mark, _where)
        nothing
    end
    function add_selection_clipboard(instance::GtkTextBuffer, _clipboard::GdkClipboard)
        ret = ccall(("gtk_text_buffer_add_selection_clipboard", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _clipboard)
        nothing
    end
    function apply_tag(instance::GtkTextBuffer, _tag::GtkTextTag, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_apply_tag", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _tag, _start, _end)
        nothing
    end
    function apply_tag_by_name(instance::GtkTextBuffer, _name, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_apply_tag_by_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _name, _start, _end)
        nothing
    end
    function backspace(instance::GtkTextBuffer, _iter::GtkTextIter, _interactive, _default_editable)
        ret = ccall(("gtk_text_buffer_backspace", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Cint, Cint), instance, _iter, _interactive, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function begin_irreversible_action(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_begin_irreversible_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function begin_user_action(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_begin_user_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function copy_clipboard(instance::GtkTextBuffer, _clipboard::GdkClipboard)
        ret = ccall(("gtk_text_buffer_copy_clipboard", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _clipboard)
        nothing
    end
    function create_child_anchor(instance::GtkTextBuffer, _iter::GtkTextIter)
        ret = ccall(("gtk_text_buffer_create_child_anchor", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(GtkTextChildAnchor, ret, false)
        ret2
    end
    function create_mark(instance::GtkTextBuffer, _mark_name, _where::GtkTextIter, _left_gravity)
        _mark_name = if _mark_name == nothing
                C_NULL
            else
                _mark_name
            end
        ret = ccall(("gtk_text_buffer_create_mark", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}, Ptr{GtkTextIter}, Cint), instance, _mark_name, _where, _left_gravity)
        ret2 = convert(GtkTextMark, ret, false)
        ret2
    end
    function cut_clipboard(instance::GtkTextBuffer, _clipboard::GdkClipboard, _default_editable)
        ret = ccall(("gtk_text_buffer_cut_clipboard", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _clipboard, _default_editable)
        nothing
    end
    function delete(instance::GtkTextBuffer, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_delete", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _start, _end)
        nothing
    end
    function delete_interactive(instance::GtkTextBuffer, _start_iter::GtkTextIter, _end_iter::GtkTextIter, _default_editable)
        ret = ccall(("gtk_text_buffer_delete_interactive", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Cint), instance, _start_iter, _end_iter, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function delete_mark(instance::GtkTextBuffer, _mark::GtkTextMark)
        ret = ccall(("gtk_text_buffer_delete_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _mark)
        nothing
    end
    function delete_mark_by_name(instance::GtkTextBuffer, _name)
        ret = ccall(("gtk_text_buffer_delete_mark_by_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function delete_selection(instance::GtkTextBuffer, _interactive, _default_editable)
        ret = ccall(("gtk_text_buffer_delete_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Cint, Cint), instance, _interactive, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function end_irreversible_action(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_end_irreversible_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function end_user_action(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_end_user_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_bounds(instance::GtkTextBuffer)
        m_start = Ref{Ptr{GtkTextIter}}()
        m_end = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_bounds", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Ptr{Ptr{GtkTextIter}}), instance, m_start, m_end)
        _start = m_start[]
        _start = convert(GtkTextIter, _start, false)
        _end = m_end[]
        _end = convert(GtkTextIter, _end, false)
        (_start, _end)
    end
    function get_can_redo(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_can_redo", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_undo(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_can_undo", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_char_count(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_char_count", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_enable_undo(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_enable_undo", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_end_iter(instance::GtkTextBuffer)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_end_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}), instance, m_iter)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _iter
    end
    function get_has_selection(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_has_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_insert(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_insert", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextMark, ret, false)
        ret2
    end
    function get_iter_at_child_anchor(instance::GtkTextBuffer, _anchor::GtkTextChildAnchor)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_child_anchor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Ptr{GObject}), instance, m_iter, _anchor)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _iter
    end
    function get_iter_at_line(instance::GtkTextBuffer, _line_number)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_line", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32), instance, m_iter, _line_number)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_at_line_index(instance::GtkTextBuffer, _line_number, _byte_index)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_line_index", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32, Int32), instance, m_iter, _line_number, _byte_index)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_at_line_offset(instance::GtkTextBuffer, _line_number, _char_offset)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_line_offset", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32, Int32), instance, m_iter, _line_number, _char_offset)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_at_mark(instance::GtkTextBuffer, _mark::GtkTextMark)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Ptr{GObject}), instance, m_iter, _mark)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _iter
    end
    function get_iter_at_offset(instance::GtkTextBuffer, _char_offset)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_iter_at_offset", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32), instance, m_iter, _char_offset)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _iter
    end
    function get_line_count(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_line_count", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_mark(instance::GtkTextBuffer, _name)
        ret = ccall(("gtk_text_buffer_get_mark", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTextMark, ret, false)
            end
        ret2
    end
    function get_max_undo_levels(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_max_undo_levels", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_modified(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_modified", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selection_bound(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_selection_bound", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextMark, ret, false)
        ret2
    end
    function get_selection_bounds(instance::GtkTextBuffer)
        m_start = Ref{Ptr{GtkTextIter}}()
        m_end = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_selection_bounds", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Ptr{Ptr{GtkTextIter}}), instance, m_start, m_end)
        ret2 = convert(Bool, ret)
        _start = m_start[]
        _start = convert(GtkTextIter, _start, false)
        _end = m_end[]
        _end = convert(GtkTextIter, _end, false)
        (ret2, _start, _end)
    end
    function get_selection_content(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_selection_content", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkContentProvider, ret, true)
        ret2
    end
    function get_slice(instance::GtkTextBuffer, _start::GtkTextIter, _end::GtkTextIter, _include_hidden_chars)
        ret = ccall(("gtk_text_buffer_get_slice", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Cint), instance, _start, _end, _include_hidden_chars)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_start_iter(instance::GtkTextBuffer)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_buffer_get_start_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}), instance, m_iter)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _iter
    end
    function get_tag_table(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_tag_table", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextTagTable, ret, false)
        ret2
    end
    function get_text(instance::GtkTextBuffer, _start::GtkTextIter, _end::GtkTextIter, _include_hidden_chars)
        ret = ccall(("gtk_text_buffer_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Cint), instance, _start, _end, _include_hidden_chars)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function insert(instance::GtkTextBuffer, _iter::GtkTextIter, _text, _len)
        ret = ccall(("gtk_text_buffer_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{UInt8}, Int32), instance, _iter, _text, _len)
        nothing
    end
    function insert_at_cursor(instance::GtkTextBuffer, _text, _len)
        ret = ccall(("gtk_text_buffer_insert_at_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _text, _len)
        nothing
    end
    function insert_child_anchor(instance::GtkTextBuffer, _iter::GtkTextIter, _anchor::GtkTextChildAnchor)
        ret = ccall(("gtk_text_buffer_insert_child_anchor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GObject}), instance, _iter, _anchor)
        nothing
    end
    function insert_interactive(instance::GtkTextBuffer, _iter::GtkTextIter, _text, _len, _default_editable)
        ret = ccall(("gtk_text_buffer_insert_interactive", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{UInt8}, Int32, Cint), instance, _iter, _text, _len, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function insert_interactive_at_cursor(instance::GtkTextBuffer, _text, _len, _default_editable)
        ret = ccall(("gtk_text_buffer_insert_interactive_at_cursor", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Int32, Cint), instance, _text, _len, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function insert_markup(instance::GtkTextBuffer, _iter::GtkTextIter, _markup, _len)
        ret = ccall(("gtk_text_buffer_insert_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{UInt8}, Int32), instance, _iter, _markup, _len)
        nothing
    end
    function insert_paintable(instance::GtkTextBuffer, _iter::GtkTextIter, _paintable)
        ret = ccall(("gtk_text_buffer_insert_paintable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GObject}), instance, _iter, _paintable)
        nothing
    end
    function insert_range(instance::GtkTextBuffer, _iter::GtkTextIter, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_insert_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _iter, _start, _end)
        nothing
    end
    function insert_range_interactive(instance::GtkTextBuffer, _iter::GtkTextIter, _start::GtkTextIter, _end::GtkTextIter, _default_editable)
        ret = ccall(("gtk_text_buffer_insert_range_interactive", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Ptr{GtkTextIter}, Cint), instance, _iter, _start, _end, _default_editable)
        ret2 = convert(Bool, ret)
        ret2
    end
    function move_mark(instance::GtkTextBuffer, _mark::GtkTextMark, _where::GtkTextIter)
        ret = ccall(("gtk_text_buffer_move_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTextIter}), instance, _mark, _where)
        nothing
    end
    function move_mark_by_name(instance::GtkTextBuffer, _name, _where::GtkTextIter)
        ret = ccall(("gtk_text_buffer_move_mark_by_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{GtkTextIter}), instance, _name, _where)
        nothing
    end
    function paste_clipboard(instance::GtkTextBuffer, _clipboard::GdkClipboard, _override_location::Maybe(GtkTextIter), _default_editable)
        _override_location = if _override_location == nothing
                C_NULL
            else
                _override_location
            end
        ret = ccall(("gtk_text_buffer_paste_clipboard", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTextIter}, Cint), instance, _clipboard, _override_location, _default_editable)
        nothing
    end
    function place_cursor(instance::GtkTextBuffer, _where::GtkTextIter)
        ret = ccall(("gtk_text_buffer_place_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _where)
        nothing
    end
    function redo(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_redo", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_all_tags(instance::GtkTextBuffer, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_remove_all_tags", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _start, _end)
        nothing
    end
    function remove_selection_clipboard(instance::GtkTextBuffer, _clipboard::GdkClipboard)
        ret = ccall(("gtk_text_buffer_remove_selection_clipboard", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _clipboard)
        nothing
    end
    function remove_tag(instance::GtkTextBuffer, _tag::GtkTextTag, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_remove_tag", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _tag, _start, _end)
        nothing
    end
    function remove_tag_by_name(instance::GtkTextBuffer, _name, _start::GtkTextIter, _end::GtkTextIter)
        ret = ccall(("gtk_text_buffer_remove_tag_by_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _name, _start, _end)
        nothing
    end
    function select_range(instance::GtkTextBuffer, _ins::GtkTextIter, _bound::GtkTextIter)
        ret = ccall(("gtk_text_buffer_select_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{GtkTextIter}), instance, _ins, _bound)
        nothing
    end
    function set_enable_undo(instance::GtkTextBuffer, _enable_undo)
        ret = ccall(("gtk_text_buffer_set_enable_undo", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_undo)
        nothing
    end
    function set_max_undo_levels(instance::GtkTextBuffer, _max_undo_levels)
        ret = ccall(("gtk_text_buffer_set_max_undo_levels", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _max_undo_levels)
        nothing
    end
    function set_modified(instance::GtkTextBuffer, _setting)
        ret = ccall(("gtk_text_buffer_set_modified", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_text(instance::GtkTextBuffer, _text, _len)
        ret = ccall(("gtk_text_buffer_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32), instance, _text, _len)
        nothing
    end
    function undo(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_undo", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function TextChildAnchor()
        ret = ccall(("gtk_text_child_anchor_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkTextChildAnchor, ret, true)
        ret2
    end
    function get_deleted(instance::GtkTextChildAnchor)
        ret = ccall(("gtk_text_child_anchor_get_deleted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_widgets(instance::GtkTextChildAnchor)
        m_out_len = Ref{UInt32}()
        ret = ccall(("gtk_text_child_anchor_get_widgets", "libgtk-4.so.1"), Ptr{Ptr{GObject}}, (Ptr{GObject}, Ptr{UInt32}), instance, m_out_len)
        ret2 = begin
                ret2 = copy(unsafe_wrap(Vector{Ptr{GObject}}, ret, m_out_len[]))
                GLib.g_free(ret)
                ret2 = convert.(GtkWidget, ret2, false)
            end
        _out_len = m_out_len[]
        ret2
    end
    function TextMark(_name, _left_gravity)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_text_mark_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8}, Cint), _name, _left_gravity)
        ret2 = convert(GtkTextMark, ret, true)
        ret2
    end
    function get_buffer(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextBuffer, ret, false)
        ret2
    end
    function get_deleted(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_deleted", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_left_gravity(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_left_gravity", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_name(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_visible(instance::GtkTextMark, _setting)
        ret = ccall(("gtk_text_mark_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function TextTag(_name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_text_tag_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _name)
        ret2 = convert(GtkTextTag, ret, true)
        ret2
    end
    function changed(instance::GtkTextTag, _size_changed)
        ret = ccall(("gtk_text_tag_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _size_changed)
        nothing
    end
    function get_priority(instance::GtkTextTag)
        ret = ccall(("gtk_text_tag_get_priority", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_priority(instance::GtkTextTag, _priority)
        ret = ccall(("gtk_text_tag_set_priority", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _priority)
        nothing
    end
    function TextTagTable()
        ret = ccall(("gtk_text_tag_table_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkTextTagTable, ret, true)
        ret2
    end
    function add(instance::GtkTextTagTable, _tag::GtkTextTag)
        ret = ccall(("gtk_text_tag_table_add", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function foreach(instance::GtkTextTagTable, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_text_tag_table_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function get_size(instance::GtkTextTagTable)
        ret = ccall(("gtk_text_tag_table_get_size", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function lookup(instance::GtkTextTagTable, _name)
        ret = ccall(("gtk_text_tag_table_lookup", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTextTag, ret, false)
            end
        ret2
    end
    function remove(instance::GtkTextTagTable, _tag::GtkTextTag)
        ret = ccall(("gtk_text_tag_table_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _tag)
        nothing
    end
    function TextView()
        ret = ccall(("gtk_text_view_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function TextView_new_with_buffer(_buffer::GtkTextBuffer)
        ret = ccall(("gtk_text_view_new_with_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _buffer)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function add_child_at_anchor(instance::GtkTextView, _child::GtkWidget, _anchor::GtkTextChildAnchor)
        ret = ccall(("gtk_text_view_add_child_at_anchor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _anchor)
        nothing
    end
    function add_overlay(instance::GtkTextView, _child::GtkWidget, _xpos, _ypos)
        ret = ccall(("gtk_text_view_add_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32), instance, _child, _xpos, _ypos)
        nothing
    end
    function backward_display_line(instance::GtkTextView, _iter::GtkTextIter)
        ret = ccall(("gtk_text_view_backward_display_line", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function backward_display_line_start(instance::GtkTextView, _iter::GtkTextIter)
        ret = ccall(("gtk_text_view_backward_display_line_start", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function buffer_to_window_coords(instance::GtkTextView, _win, _buffer_x, _buffer_y)
        m_window_x = Ref{Int32}()
        m_window_y = Ref{Int32}()
        ret = ccall(("gtk_text_view_buffer_to_window_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _win, _buffer_x, _buffer_y, m_window_x, m_window_y)
        _window_x = m_window_x[]
        _window_y = m_window_y[]
        (_window_x, _window_y)
    end
    function forward_display_line(instance::GtkTextView, _iter::GtkTextIter)
        ret = ccall(("gtk_text_view_forward_display_line", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function forward_display_line_end(instance::GtkTextView, _iter::GtkTextIter)
        ret = ccall(("gtk_text_view_forward_display_line_end", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_accepts_tab(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_accepts_tab", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_bottom_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_bottom_margin", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_buffer(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_buffer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextBuffer, ret, false)
        ret2
    end
    function get_cursor_locations(instance::GtkTextView, _iter::Maybe(GtkTextIter))
        _iter = if _iter == nothing
                C_NULL
            else
                _iter
            end
        m_strong = Ref{Ptr{GdkRectangle}}()
        m_weak = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_text_view_get_cursor_locations", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{Ptr{GdkRectangle}}, Ptr{Ptr{GdkRectangle}}), instance, _iter, m_strong, m_weak)
        _strong = m_strong[]
        _strong = convert(GdkRectangle, _strong, false)
        _weak = m_weak[]
        _weak = convert(GdkRectangle, _weak, false)
        (_strong, _weak)
    end
    function get_cursor_visible(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_cursor_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_editable(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_editable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extra_menu(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_extra_menu", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GMenuModel, ret, false)
        ret2
    end
    function get_gutter(instance::GtkTextView, _win)
        ret = ccall(("gtk_text_view_get_gutter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _win)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_indent(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_indent", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_hints(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_input_hints", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_purpose(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_input_purpose", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_iter_at_location(instance::GtkTextView, _x, _y)
        m_iter = Ref{Ptr{GtkTextIter}}()
        ret = ccall(("gtk_text_view_get_iter_at_location", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32, Int32), instance, m_iter, _x, _y)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_at_position(instance::GtkTextView, _x, _y)
        m_iter = Ref{Ptr{GtkTextIter}}()
        m_trailing = Ref{Int32}()
        ret = ccall(("gtk_text_view_get_iter_at_position", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Ptr{Int32}, Int32, Int32), instance, m_iter, m_trailing, _x, _y)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTextIter, _iter, false)
        _trailing = m_trailing[]
        (ret2, _iter, _trailing)
    end
    function get_iter_location(instance::GtkTextView, _iter::GtkTextIter)
        m_location = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_text_view_get_iter_location", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{Ptr{GdkRectangle}}), instance, _iter, m_location)
        _location = m_location[]
        _location = convert(GdkRectangle, _location, false)
        _location
    end
    function get_justification(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_justification", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Justification(ret)
        ret2
    end
    function get_left_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_left_margin", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_line_at_y(instance::GtkTextView, _y)
        m_target_iter = Ref{Ptr{GtkTextIter}}()
        m_line_top = Ref{Int32}()
        ret = ccall(("gtk_text_view_get_line_at_y", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTextIter}}, Int32, Ptr{Int32}), instance, m_target_iter, _y, m_line_top)
        _target_iter = m_target_iter[]
        _target_iter = convert(GtkTextIter, _target_iter, false)
        _line_top = m_line_top[]
        (_target_iter, _line_top)
    end
    function get_line_yrange(instance::GtkTextView, _iter::GtkTextIter)
        m_y = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_text_view_get_line_yrange", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTextIter}, Ptr{Int32}, Ptr{Int32}), instance, _iter, m_y, m_height)
        _y = m_y[]
        _height = m_height[]
        (_y, _height)
    end
    function get_ltr_context(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_ltr_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, false)
        ret2
    end
    function get_monospace(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_monospace", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_overwrite(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_overwrite", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_pixels_above_lines(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_above_lines", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_pixels_below_lines(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_below_lines", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_pixels_inside_wrap(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_inside_wrap", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_right_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_right_margin", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_rtl_context(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_rtl_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, false)
        ret2
    end
    function get_tabs(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_tabs", "libgtk-4.so.1"), Ptr{PangoTabArray}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoTabArray, ret, true)
            end
        ret2
    end
    function get_top_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_top_margin", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_visible_rect(instance::GtkTextView)
        m_visible_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_text_view_get_visible_rect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_visible_rect)
        _visible_rect = m_visible_rect[]
        _visible_rect = convert(GdkRectangle, _visible_rect, false)
        _visible_rect
    end
    function get_wrap_mode(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_wrap_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = WrapMode(ret)
        ret2
    end
    function move_mark_onscreen(instance::GtkTextView, _mark::GtkTextMark)
        ret = ccall(("gtk_text_view_move_mark_onscreen", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _mark)
        ret2 = convert(Bool, ret)
        ret2
    end
    function move_overlay(instance::GtkTextView, _child::GtkWidget, _xpos, _ypos)
        ret = ccall(("gtk_text_view_move_overlay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32, Int32), instance, _child, _xpos, _ypos)
        nothing
    end
    function move_visually(instance::GtkTextView, _iter::GtkTextIter, _count)
        ret = ccall(("gtk_text_view_move_visually", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Int32), instance, _iter, _count)
        ret2 = convert(Bool, ret)
        ret2
    end
    function place_cursor_onscreen(instance::GtkTextView)
        ret = ccall(("gtk_text_view_place_cursor_onscreen", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove(instance::GtkTextView, _child::GtkWidget)
        ret = ccall(("gtk_text_view_remove", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function reset_cursor_blink(instance::GtkTextView)
        ret = ccall(("gtk_text_view_reset_cursor_blink", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function reset_im_context(instance::GtkTextView)
        ret = ccall(("gtk_text_view_reset_im_context", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function scroll_mark_onscreen(instance::GtkTextView, _mark::GtkTextMark)
        ret = ccall(("gtk_text_view_scroll_mark_onscreen", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _mark)
        nothing
    end
    function scroll_to_iter(instance::GtkTextView, _iter::GtkTextIter, _within_margin, _use_align, _xalign, _yalign)
        ret = ccall(("gtk_text_view_scroll_to_iter", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}, Float64, Cint, Float64, Float64), instance, _iter, _within_margin, _use_align, _xalign, _yalign)
        ret2 = convert(Bool, ret)
        ret2
    end
    function scroll_to_mark(instance::GtkTextView, _mark::GtkTextMark, _within_margin, _use_align, _xalign, _yalign)
        ret = ccall(("gtk_text_view_scroll_to_mark", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, Cint, Float64, Float64), instance, _mark, _within_margin, _use_align, _xalign, _yalign)
        nothing
    end
    function set_accepts_tab(instance::GtkTextView, _accepts_tab)
        ret = ccall(("gtk_text_view_set_accepts_tab", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _accepts_tab)
        nothing
    end
    function set_bottom_margin(instance::GtkTextView, _bottom_margin)
        ret = ccall(("gtk_text_view_set_bottom_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _bottom_margin)
        nothing
    end
    function set_buffer(instance::GtkTextView, _buffer::Maybe(GtkTextBuffer))
        _buffer = if _buffer == nothing
                C_NULL
            else
                _buffer
            end
        ret = ccall(("gtk_text_view_set_buffer", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _buffer)
        nothing
    end
    function set_cursor_visible(instance::GtkTextView, _setting)
        ret = ccall(("gtk_text_view_set_cursor_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_editable(instance::GtkTextView, _setting)
        ret = ccall(("gtk_text_view_set_editable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_extra_menu(instance::GtkTextView, _model::Maybe(GMenuModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_text_view_set_extra_menu", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_gutter(instance::GtkTextView, _win, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_text_view_set_gutter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GObject}), instance, _win, _widget)
        nothing
    end
    function set_indent(instance::GtkTextView, _indent)
        ret = ccall(("gtk_text_view_set_indent", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _indent)
        nothing
    end
    function set_input_hints(instance::GtkTextView, _hints)
        ret = ccall(("gtk_text_view_set_input_hints", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::GtkTextView, _purpose)
        ret = ccall(("gtk_text_view_set_input_purpose", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _purpose)
        nothing
    end
    function set_justification(instance::GtkTextView, _justification)
        ret = ccall(("gtk_text_view_set_justification", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _justification)
        nothing
    end
    function set_left_margin(instance::GtkTextView, _left_margin)
        ret = ccall(("gtk_text_view_set_left_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _left_margin)
        nothing
    end
    function set_monospace(instance::GtkTextView, _monospace)
        ret = ccall(("gtk_text_view_set_monospace", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _monospace)
        nothing
    end
    function set_overwrite(instance::GtkTextView, _overwrite)
        ret = ccall(("gtk_text_view_set_overwrite", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _overwrite)
        nothing
    end
    function set_pixels_above_lines(instance::GtkTextView, _pixels_above_lines)
        ret = ccall(("gtk_text_view_set_pixels_above_lines", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pixels_above_lines)
        nothing
    end
    function set_pixels_below_lines(instance::GtkTextView, _pixels_below_lines)
        ret = ccall(("gtk_text_view_set_pixels_below_lines", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pixels_below_lines)
        nothing
    end
    function set_pixels_inside_wrap(instance::GtkTextView, _pixels_inside_wrap)
        ret = ccall(("gtk_text_view_set_pixels_inside_wrap", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _pixels_inside_wrap)
        nothing
    end
    function set_right_margin(instance::GtkTextView, _right_margin)
        ret = ccall(("gtk_text_view_set_right_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _right_margin)
        nothing
    end
    function set_tabs(instance::GtkTextView, _tabs::PangoTabArray)
        ret = ccall(("gtk_text_view_set_tabs", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoTabArray}), instance, _tabs)
        nothing
    end
    function set_top_margin(instance::GtkTextView, _top_margin)
        ret = ccall(("gtk_text_view_set_top_margin", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _top_margin)
        nothing
    end
    function set_wrap_mode(instance::GtkTextView, _wrap_mode)
        ret = ccall(("gtk_text_view_set_wrap_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _wrap_mode)
        nothing
    end
    function starts_display_line(instance::GtkTextView, _iter::GtkTextIter)
        ret = ccall(("gtk_text_view_starts_display_line", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTextIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function window_to_buffer_coords(instance::GtkTextView, _win, _window_x, _window_y)
        m_buffer_x = Ref{Int32}()
        m_buffer_y = Ref{Int32}()
        ret = ccall(("gtk_text_view_window_to_buffer_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _win, _window_x, _window_y, m_buffer_x, m_buffer_y)
        _buffer_x = m_buffer_x[]
        _buffer_y = m_buffer_y[]
        (_buffer_x, _buffer_y)
    end
    function ToggleButton()
        ret = ccall(("gtk_toggle_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ToggleButton_new_with_label(_label)
        ret = ccall(("gtk_toggle_button_new_with_label", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function ToggleButton_new_with_mnemonic(_label)
        ret = ccall(("gtk_toggle_button_new_with_mnemonic", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _label)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_active(instance::GtkToggleButton)
        ret = ccall(("gtk_toggle_button_get_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkToggleButton, _is_active)
        ret = ccall(("gtk_toggle_button_set_active", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function set_group(instance::GtkToggleButton, _group::Maybe(GtkToggleButton))
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_toggle_button_set_group", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _group)
        nothing
    end
    function toggled(instance::GtkToggleButton)
        ret = ccall(("gtk_toggle_button_toggled", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_custom(instance::GtkTooltip, _custom_widget::Maybe(GtkWidget))
        _custom_widget = if _custom_widget == nothing
                C_NULL
            else
                _custom_widget
            end
        ret = ccall(("gtk_tooltip_set_custom", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _custom_widget)
        nothing
    end
    function set_icon(instance::GtkTooltip, _paintable)
        _paintable = if _paintable == nothing
                C_NULL
            else
                _paintable
            end
        ret = ccall(("gtk_tooltip_set_icon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _paintable)
        nothing
    end
    function set_icon_from_gicon(instance::GtkTooltip, _gicon)
        _gicon = if _gicon == nothing
                C_NULL
            else
                _gicon
            end
        ret = ccall(("gtk_tooltip_set_icon_from_gicon", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _gicon)
        nothing
    end
    function set_icon_from_icon_name(instance::GtkTooltip, _icon_name)
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_tooltip_set_icon_from_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _icon_name)
        nothing
    end
    function set_markup(instance::GtkTooltip, _markup)
        _markup = if _markup == nothing
                C_NULL
            else
                _markup
            end
        ret = ccall(("gtk_tooltip_set_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _markup)
        nothing
    end
    function set_text(instance::GtkTooltip, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_tooltip_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_tip_area(instance::GtkTooltip, _rect::GdkRectangle)
        ret = ccall(("gtk_tooltip_set_tip_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRectangle}), instance, _rect)
        nothing
    end
    function TreeExpander()
        ret = ccall(("gtk_tree_expander_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkTreeExpander)
        ret = ccall(("gtk_tree_expander_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_item(instance::GtkTreeExpander)
        ret = ccall(("gtk_tree_expander_get_item", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function get_list_row(instance::GtkTreeExpander)
        ret = ccall(("gtk_tree_expander_get_list_row", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeListRow, ret, false)
            end
        ret2
    end
    function set_child(instance::GtkTreeExpander, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_tree_expander_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_list_row(instance::GtkTreeExpander, _list_row::Maybe(GtkTreeListRow))
        _list_row = if _list_row == nothing
                C_NULL
            else
                _list_row
            end
        ret = ccall(("gtk_tree_expander_set_list_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _list_row)
        nothing
    end
    function TreeListModel(_root, _passthrough, _autoexpand, _create_func::Function, _user_data::Maybe(Nothing), _user_destroy::Function)
        _create_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Ptr{GObject} (Ptr{GObject}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _user_destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_tree_list_model_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Cint, Cint, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), _root, _passthrough, _autoexpand, _create_func, _user_data, _user_destroy)
        ret2 = convert(GtkTreeListModel, ret, true)
        ret2
    end
    function get_autoexpand(instance::GtkTreeListModel)
        ret = ccall(("gtk_tree_list_model_get_autoexpand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child_row(instance::GtkTreeListModel, _position)
        ret = ccall(("gtk_tree_list_model_get_child_row", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeListRow, ret, true)
            end
        ret2
    end
    function get_model(instance::GtkTreeListModel)
        ret = ccall(("gtk_tree_list_model_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_passthrough(instance::GtkTreeListModel)
        ret = ccall(("gtk_tree_list_model_get_passthrough", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row(instance::GtkTreeListModel, _position)
        ret = ccall(("gtk_tree_list_model_get_row", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeListRow, ret, true)
            end
        ret2
    end
    function set_autoexpand(instance::GtkTreeListModel, _autoexpand)
        ret = ccall(("gtk_tree_list_model_set_autoexpand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _autoexpand)
        nothing
    end
    function get_child_row(instance::GtkTreeListRow, _position)
        ret = ccall(("gtk_tree_list_row_get_child_row", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeListRow, ret, true)
            end
        ret2
    end
    function get_children(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_children", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_depth(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_depth", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_expanded(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_expanded", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_item(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_item", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function get_parent(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_parent", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeListRow, ret, true)
            end
        ret2
    end
    function get_position(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_get_position", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function is_expandable(instance::GtkTreeListRow)
        ret = ccall(("gtk_tree_list_row_is_expandable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_expanded(instance::GtkTreeListRow, _expanded)
        ret = ccall(("gtk_tree_list_row_set_expanded", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expanded)
        nothing
    end
    function TreeListRowSorter(_sorter::Maybe(GtkSorter))
        _sorter = if _sorter == nothing
                C_NULL
            else
                _sorter
            end
        ret = ccall(("gtk_tree_list_row_sorter_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _sorter)
        ret2 = convert(GtkTreeListRowSorter, ret, true)
        ret2
    end
    function get_sorter(instance::GtkTreeListRowSorter)
        ret = ccall(("gtk_tree_list_row_sorter_get_sorter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkSorter, ret, false)
            end
        ret2
    end
    function set_sorter(instance::GtkTreeListRowSorter, _sorter::Maybe(GtkSorter))
        _sorter = if _sorter == nothing
                C_NULL
            else
                _sorter
            end
        ret = ccall(("gtk_tree_list_row_sorter_set_sorter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sorter)
        nothing
    end
    function clear_cache(instance::GtkTreeModelFilter)
        ret = ccall(("gtk_tree_model_filter_clear_cache", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function convert_child_iter_to_iter(instance::GtkTreeModelFilter, _child_iter::GtkTreeIter)
        m_filter_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_filter_convert_child_iter_to_iter", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_filter_iter, _child_iter)
        ret2 = convert(Bool, ret)
        _filter_iter = m_filter_iter[]
        _filter_iter = convert(GtkTreeIter, _filter_iter, false)
        (ret2, _filter_iter)
    end
    function convert_child_path_to_path(instance::GtkTreeModelFilter, _child_path::GtkTreePath)
        ret = ccall(("gtk_tree_model_filter_convert_child_path_to_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _child_path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function convert_iter_to_child_iter(instance::GtkTreeModelFilter, _filter_iter::GtkTreeIter)
        m_child_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_filter_convert_iter_to_child_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_child_iter, _filter_iter)
        _child_iter = m_child_iter[]
        _child_iter = convert(GtkTreeIter, _child_iter, false)
        _child_iter
    end
    function convert_path_to_child_path(instance::GtkTreeModelFilter, _filter_path::GtkTreePath)
        ret = ccall(("gtk_tree_model_filter_convert_path_to_child_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _filter_path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function get_model(instance::GtkTreeModelFilter)
        ret = ccall(("gtk_tree_model_filter_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function refilter(instance::GtkTreeModelFilter)
        ret = ccall(("gtk_tree_model_filter_refilter", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_modify_func(instance::GtkTreeModelFilter, _types, _func::Function, _data::Maybe(Nothing), _destroy::Maybe(Function))
        _types = convert(Vector{UInt64}, _types)
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GValue}, Int32, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        _n_columns = length(_types)
        ret = ccall(("gtk_tree_model_filter_set_modify_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt64}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _n_columns, _types, _func, _data, _destroy)
        nothing
    end
    function set_visible_column(instance::GtkTreeModelFilter, _column)
        ret = ccall(("gtk_tree_model_filter_set_visible_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_visible_func(instance::GtkTreeModelFilter, _func::Function, _data::Maybe(Nothing), _destroy::Maybe(Function))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_tree_model_filter_set_visible_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data, _destroy)
        nothing
    end
    function TreeModelSort_new_with_model(_child_model)
        ret = ccall(("gtk_tree_model_sort_new_with_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _child_model)
        ret2 = convert(GtkTreeModelSort, ret, true)
        ret2
    end
    function clear_cache(instance::GtkTreeModelSort)
        ret = ccall(("gtk_tree_model_sort_clear_cache", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function convert_child_iter_to_iter(instance::GtkTreeModelSort, _child_iter::GtkTreeIter)
        m_sort_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_sort_convert_child_iter_to_iter", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_sort_iter, _child_iter)
        ret2 = convert(Bool, ret)
        _sort_iter = m_sort_iter[]
        _sort_iter = convert(GtkTreeIter, _sort_iter, false)
        (ret2, _sort_iter)
    end
    function convert_child_path_to_path(instance::GtkTreeModelSort, _child_path::GtkTreePath)
        ret = ccall(("gtk_tree_model_sort_convert_child_path_to_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _child_path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function convert_iter_to_child_iter(instance::GtkTreeModelSort, _sorted_iter::GtkTreeIter)
        m_child_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_sort_convert_iter_to_child_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_child_iter, _sorted_iter)
        _child_iter = m_child_iter[]
        _child_iter = convert(GtkTreeIter, _child_iter, false)
        _child_iter
    end
    function convert_path_to_child_path(instance::GtkTreeModelSort, _sorted_path::GtkTreePath)
        ret = ccall(("gtk_tree_model_sort_convert_path_to_child_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _sorted_path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreePath, ret, true)
            end
        ret2
    end
    function get_model(instance::GtkTreeModelSort)
        ret = ccall(("gtk_tree_model_sort_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function iter_is_valid(instance::GtkTreeModelSort, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_sort_iter_is_valid", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reset_default_sort_func(instance::GtkTreeModelSort)
        ret = ccall(("gtk_tree_model_sort_reset_default_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function count_selected_rows(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_count_selected_rows", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_mode(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_get_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function get_selected(instance::GtkTreeSelection)
        m_model = Ref{Ptr{GObject}}()
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_selection_get_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GObject}}, Ptr{Ptr{GtkTreeIter}}), instance, m_model, m_iter)
        ret2 = convert(Bool, ret)
        _model = m_model[]
        _model = convert(GObject, _model, false)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _model, _iter)
    end
    function get_selected_rows(instance::GtkTreeSelection)
        m_model = Ref{Ptr{GObject}}()
        ret = ccall(("gtk_tree_selection_get_selected_rows", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GtkTreePath}}}, (Ptr{GObject}, Ptr{Ptr{GObject}}), instance, m_model)
        ret2 = GLib.GList(ret)
        _model = m_model[]
        _model = convert(GObject, _model, false)
        (ret2, _model)
    end
    function get_tree_view(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_get_tree_view", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTreeView, ret, false)
        ret2
    end
    function iter_is_selected(instance::GtkTreeSelection, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_selection_iter_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function path_is_selected(instance::GtkTreeSelection, _path::GtkTreePath)
        ret = ccall(("gtk_tree_selection_path_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_all(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_select_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function select_iter(instance::GtkTreeSelection, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_selection_select_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        nothing
    end
    function select_path(instance::GtkTreeSelection, _path::GtkTreePath)
        ret = ccall(("gtk_tree_selection_select_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function select_range(instance::GtkTreeSelection, _start_path::GtkTreePath, _end_path::GtkTreePath)
        ret = ccall(("gtk_tree_selection_select_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreePath}), instance, _start_path, _end_path)
        nothing
    end
    function selected_foreach(instance::GtkTreeSelection, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_tree_selection_selected_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function set_mode(instance::GtkTreeSelection, _type)
        ret = ccall(("gtk_tree_selection_set_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function set_select_function(instance::GtkTreeSelection, _func::Maybe(Function), _data::Maybe(Nothing), _destroy::Function)
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_tree_selection_set_select_function", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data, _destroy)
        nothing
    end
    function unselect_all(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_unselect_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unselect_iter(instance::GtkTreeSelection, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_selection_unselect_iter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        nothing
    end
    function unselect_path(instance::GtkTreeSelection, _path::GtkTreePath)
        ret = ccall(("gtk_tree_selection_unselect_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function unselect_range(instance::GtkTreeSelection, _start_path::GtkTreePath, _end_path::GtkTreePath)
        ret = ccall(("gtk_tree_selection_unselect_range", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreePath}), instance, _start_path, _end_path)
        nothing
    end
    function TreeStore(_types)
        _types = convert(Vector{UInt64}, _types)
        _n_columns = length(_types)
        ret = ccall(("gtk_tree_store_newv", "libgtk-4.so.1"), Ptr{GObject}, (Int32, Ptr{UInt64}), _n_columns, _types)
        ret2 = convert(GtkTreeStore, ret, true)
        ret2
    end
    function append(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_tree_store_append", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _parent)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function clear(instance::GtkTreeStore)
        ret = ccall(("gtk_tree_store_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function insert(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter), _position)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_tree_store_insert", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}, Int32), instance, m_iter, _parent, _position)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_after(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter), _sibling::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_tree_store_insert_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, m_iter, _parent, _sibling)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_before(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter), _sibling::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _sibling = if _sibling == nothing
                C_NULL
            else
                _sibling
            end
        ret = ccall(("gtk_tree_store_insert_before", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, m_iter, _parent, _sibling)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function insert_with_values(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter), _position, _columns, _values)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        _columns = convert(Vector{Int32}, _columns)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_values = length(_columns)
        ret = ccall(("gtk_tree_store_insert_with_valuesv", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}, Int32, Ptr{Int32}, Ptr{Ptr{GValue}}, Int32), instance, m_iter, _parent, _position, _columns, _values, _n_values)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function is_ancestor(instance::GtkTreeStore, _iter::GtkTreeIter, _descendant::GtkTreeIter)
        ret = ccall(("gtk_tree_store_is_ancestor", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _iter, _descendant)
        ret2 = convert(Bool, ret)
        ret2
    end
    function iter_depth(instance::GtkTreeStore, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_store_iter_depth", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret
    end
    function iter_is_valid(instance::GtkTreeStore, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_store_iter_is_valid", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function move_after(instance::GtkTreeStore, _iter::GtkTreeIter, _position::Maybe(GtkTreeIter))
        _position = if _position == nothing
                C_NULL
            else
                _position
            end
        ret = ccall(("gtk_tree_store_move_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _iter, _position)
        nothing
    end
    function move_before(instance::GtkTreeStore, _iter::GtkTreeIter, _position::Maybe(GtkTreeIter))
        _position = if _position == nothing
                C_NULL
            else
                _position
            end
        ret = ccall(("gtk_tree_store_move_before", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _iter, _position)
        nothing
    end
    function prepend(instance::GtkTreeStore, _parent::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_tree_store_prepend", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _parent)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        _iter
    end
    function remove(instance::GtkTreeStore, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_store_remove", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_column_types(instance::GtkTreeStore, _types)
        _types = convert(Vector{UInt64}, _types)
        _n_columns = length(_types)
        ret = ccall(("gtk_tree_store_set_column_types", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{UInt64}), instance, _n_columns, _types)
        nothing
    end
    function set_value(instance::GtkTreeStore, _iter::GtkTreeIter, _column, _value::GValue)
        ret = ccall(("gtk_tree_store_set_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Int32, Ptr{GValue}), instance, _iter, _column, _value)
        nothing
    end
    function set(instance::GtkTreeStore, _iter::GtkTreeIter, _columns, _values)
        _columns = convert(Vector{Int32}, _columns)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_values = length(_columns)
        ret = ccall(("gtk_tree_store_set_valuesv", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{Int32}, Ptr{Ptr{GValue}}, Int32), instance, _iter, _columns, _values, _n_values)
        nothing
    end
    function swap(instance::GtkTreeStore, _a::GtkTreeIter, _b::GtkTreeIter)
        ret = ccall(("gtk_tree_store_swap", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}), instance, _a, _b)
        nothing
    end
    function TreeView()
        ret = ccall(("gtk_tree_view_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function TreeView_new_with_model(_model)
        ret = ccall(("gtk_tree_view_new_with_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _model)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function append_column(instance::GtkTreeView, _column::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_append_column", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        ret
    end
    function collapse_all(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_collapse_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function collapse_row(instance::GtkTreeView, _path::GtkTreePath)
        ret = ccall(("gtk_tree_view_collapse_row", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function columns_autosize(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_columns_autosize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function convert_bin_window_to_tree_coords(instance::GtkTreeView, _bx, _by)
        m_tx = Ref{Int32}()
        m_ty = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_bin_window_to_tree_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _bx, _by, m_tx, m_ty)
        _tx = m_tx[]
        _ty = m_ty[]
        (_tx, _ty)
    end
    function convert_bin_window_to_widget_coords(instance::GtkTreeView, _bx, _by)
        m_wx = Ref{Int32}()
        m_wy = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_bin_window_to_widget_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _bx, _by, m_wx, m_wy)
        _wx = m_wx[]
        _wy = m_wy[]
        (_wx, _wy)
    end
    function convert_tree_to_bin_window_coords(instance::GtkTreeView, _tx, _ty)
        m_bx = Ref{Int32}()
        m_by = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_tree_to_bin_window_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _tx, _ty, m_bx, m_by)
        _bx = m_bx[]
        _by = m_by[]
        (_bx, _by)
    end
    function convert_tree_to_widget_coords(instance::GtkTreeView, _tx, _ty)
        m_wx = Ref{Int32}()
        m_wy = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_tree_to_widget_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _tx, _ty, m_wx, m_wy)
        _wx = m_wx[]
        _wy = m_wy[]
        (_wx, _wy)
    end
    function convert_widget_to_bin_window_coords(instance::GtkTreeView, _wx, _wy)
        m_bx = Ref{Int32}()
        m_by = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_widget_to_bin_window_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _wx, _wy, m_bx, m_by)
        _bx = m_bx[]
        _by = m_by[]
        (_bx, _by)
    end
    function convert_widget_to_tree_coords(instance::GtkTreeView, _wx, _wy)
        m_tx = Ref{Int32}()
        m_ty = Ref{Int32}()
        ret = ccall(("gtk_tree_view_convert_widget_to_tree_coords", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}), instance, _wx, _wy, m_tx, m_ty)
        _tx = m_tx[]
        _ty = m_ty[]
        (_tx, _ty)
    end
    function create_row_drag_icon(instance::GtkTreeView, _path::GtkTreePath)
        ret = ccall(("gtk_tree_view_create_row_drag_icon", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function enable_model_drag_dest(instance::GtkTreeView, _formats::GdkContentFormats, _actions)
        ret = ccall(("gtk_tree_view_enable_model_drag_dest", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkContentFormats}, Int32), instance, _formats, _actions)
        nothing
    end
    function enable_model_drag_source(instance::GtkTreeView, _start_button_mask, _formats::GdkContentFormats, _actions)
        ret = ccall(("gtk_tree_view_enable_model_drag_source", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{GdkContentFormats}, Int32), instance, _start_button_mask, _formats, _actions)
        nothing
    end
    function expand_all(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_expand_all", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function expand_row(instance::GtkTreeView, _path::GtkTreePath, _open_all)
        ret = ccall(("gtk_tree_view_expand_row", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}, Cint), instance, _path, _open_all)
        ret2 = convert(Bool, ret)
        ret2
    end
    function expand_to_path(instance::GtkTreeView, _path::GtkTreePath)
        ret = ccall(("gtk_tree_view_expand_to_path", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function get_activate_on_single_click(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_activate_on_single_click", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_background_area(instance::GtkTreeView, _path::Maybe(GtkTreePath), _column::Maybe(GtkTreeViewColumn))
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        m_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_tree_view_get_background_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, _path, _column, m_rect)
        _rect = m_rect[]
        _rect = convert(GdkRectangle, _rect, false)
        _rect
    end
    function get_cell_area(instance::GtkTreeView, _path::Maybe(GtkTreePath), _column::Maybe(GtkTreeViewColumn))
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        m_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_tree_view_get_cell_area", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, _path, _column, m_rect)
        _rect = m_rect[]
        _rect = convert(GdkRectangle, _rect, false)
        _rect
    end
    function get_column(instance::GtkTreeView, _n)
        ret = ccall(("gtk_tree_view_get_column", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _n)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeViewColumn, ret, false)
            end
        ret2
    end
    function get_columns(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_columns", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function get_cursor(instance::GtkTreeView)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_focus_column = Ref{Ptr{GObject}}()
        ret = ccall(("gtk_tree_view_get_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GObject}}), instance, m_path, m_focus_column)
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        _focus_column = m_focus_column[]
        _focus_column = convert(Maybe(GtkTreeViewColumn), _focus_column)
        (_path, _focus_column)
    end
    function get_dest_row_at_pos(instance::GtkTreeView, _drag_x, _drag_y)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_pos = Ref{Int32}()
        ret = ccall(("gtk_tree_view_get_dest_row_at_pos", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Ptr{Ptr{GtkTreePath}}, Ptr{Int32}), instance, _drag_x, _drag_y, m_path, m_pos)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        _pos = m_pos[]
        _pos = TreeViewDropPosition(_pos)
        (ret2, _path, _pos)
    end
    function get_drag_dest_row(instance::GtkTreeView)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_pos = Ref{Int32}()
        ret = ccall(("gtk_tree_view_get_drag_dest_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Int32}), instance, m_path, m_pos)
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        _pos = m_pos[]
        _pos = TreeViewDropPosition(_pos)
        (_path, _pos)
    end
    function get_enable_search(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_enable_search", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enable_tree_lines(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_enable_tree_lines", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_expander_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_expander_column", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkTreeViewColumn, ret, false)
            end
        ret2
    end
    function get_fixed_height_mode(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_fixed_height_mode", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_grid_lines(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_grid_lines", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = TreeViewGridLines(ret)
        ret2
    end
    function get_headers_clickable(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_headers_clickable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_headers_visible(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_headers_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hover_expand(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_hover_expand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hover_selection(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_hover_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_level_indentation(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_level_indentation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_model", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_n_columns(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_n_columns", "libgtk-4.so.1"), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_path_at_pos(instance::GtkTreeView, _x, _y)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_column = Ref{Ptr{GObject}}()
        m_cell_x = Ref{Int32}()
        m_cell_y = Ref{Int32}()
        ret = ccall(("gtk_tree_view_get_path_at_pos", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GObject}}, Ptr{Int32}, Ptr{Int32}), instance, _x, _y, m_path, m_column, m_cell_x, m_cell_y)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        _column = m_column[]
        _column = convert(Maybe(GtkTreeViewColumn), _column)
        _cell_x = m_cell_x[]
        _cell_y = m_cell_y[]
        (ret2, _path, _column, _cell_x, _cell_y)
    end
    function get_reorderable(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_reorderable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_rubber_banding(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_rubber_banding", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_search_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_search_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_search_entry(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_search_entry", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_selection(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_selection", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTreeSelection, ret, false)
        ret2
    end
    function get_show_expanders(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_show_expanders", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tooltip_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_tooltip_column", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tooltip_context(instance::GtkTreeView, _x, _y, _keyboard_tip)
        m_model = Ref{Ptr{GObject}}()
        m_path = Ref{Ptr{GtkTreePath}}()
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_view_get_tooltip_context", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Cint, Ptr{Ptr{GObject}}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GtkTreeIter}}), instance, _x, _y, _keyboard_tip, m_model, m_path, m_iter)
        ret2 = convert(Bool, ret)
        _model = m_model[]
        _model = if _model == C_NULL
                nothing
            else
                convert(GObject, _model, false)
            end
        _path = m_path[]
        _path = convert(GtkTreePath, _path, true)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _model, _path, _iter)
    end
    function get_visible_range(instance::GtkTreeView)
        m_start_path = Ref{Ptr{GtkTreePath}}()
        m_end_path = Ref{Ptr{GtkTreePath}}()
        ret = ccall(("gtk_tree_view_get_visible_range", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GtkTreePath}}), instance, m_start_path, m_end_path)
        ret2 = convert(Bool, ret)
        _start_path = m_start_path[]
        _start_path = convert(GtkTreePath, _start_path, true)
        _end_path = m_end_path[]
        _end_path = convert(GtkTreePath, _end_path, true)
        (ret2, _start_path, _end_path)
    end
    function get_visible_rect(instance::GtkTreeView)
        m_visible_rect = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_tree_view_get_visible_rect", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_visible_rect)
        _visible_rect = m_visible_rect[]
        _visible_rect = convert(GdkRectangle, _visible_rect, false)
        _visible_rect
    end
    function insert_column(instance::GtkTreeView, _column::GtkTreeViewColumn, _position)
        ret = ccall(("gtk_tree_view_insert_column", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _column, _position)
        ret
    end
    function insert_column_with_data_func(instance::GtkTreeView, _position, _title, _cell::GtkCellRenderer, _func::Function, _data::Maybe(Nothing), _dnotify::Function)
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _dnotify = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_tree_view_insert_column_with_data_func", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32, Ptr{UInt8}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _position, _title, _cell, _func, _data, _dnotify)
        ret
    end
    function is_blank_at_pos(instance::GtkTreeView, _x, _y)
        m_path = Ref{Ptr{GtkTreePath}}()
        m_column = Ref{Ptr{GObject}}()
        m_cell_x = Ref{Int32}()
        m_cell_y = Ref{Int32}()
        ret = ccall(("gtk_tree_view_is_blank_at_pos", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Ptr{Ptr{GtkTreePath}}, Ptr{Ptr{GObject}}, Ptr{Int32}, Ptr{Int32}), instance, _x, _y, m_path, m_column, m_cell_x, m_cell_y)
        ret2 = convert(Bool, ret)
        _path = m_path[]
        _path = convert(Maybe(GtkTreePath), _path)
        _column = m_column[]
        _column = convert(Maybe(GtkTreeViewColumn), _column)
        _cell_x = m_cell_x[]
        _cell_y = m_cell_y[]
        (ret2, _path, _column, _cell_x, _cell_y)
    end
    function is_rubber_banding_active(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_is_rubber_banding_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function map_expanded_rows(instance::GtkTreeView, _func::Function, _data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{Nothing})
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        ret = ccall(("gtk_tree_view_map_expanded_rows", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data)
        nothing
    end
    function move_column_after(instance::GtkTreeView, _column::GtkTreeViewColumn, _base_column::Maybe(GtkTreeViewColumn))
        _base_column = if _base_column == nothing
                C_NULL
            else
                _base_column
            end
        ret = ccall(("gtk_tree_view_move_column_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _column, _base_column)
        nothing
    end
    function remove_column(instance::GtkTreeView, _column::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_remove_column", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        ret
    end
    function row_activated(instance::GtkTreeView, _path::GtkTreePath, _column::Maybe(GtkTreeViewColumn))
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        ret = ccall(("gtk_tree_view_row_activated", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}), instance, _path, _column)
        nothing
    end
    function row_expanded(instance::GtkTreeView, _path::GtkTreePath)
        ret = ccall(("gtk_tree_view_row_expanded", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function scroll_to_cell(instance::GtkTreeView, _path::Maybe(GtkTreePath), _column::Maybe(GtkTreeViewColumn), _use_align, _row_align, _col_align)
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        ret = ccall(("gtk_tree_view_scroll_to_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Cint, Float32, Float32), instance, _path, _column, _use_align, _row_align, _col_align)
        nothing
    end
    function scroll_to_point(instance::GtkTreeView, _tree_x, _tree_y)
        ret = ccall(("gtk_tree_view_scroll_to_point", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _tree_x, _tree_y)
        nothing
    end
    function set_activate_on_single_click(instance::GtkTreeView, _single)
        ret = ccall(("gtk_tree_view_set_activate_on_single_click", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_column_drag_function(instance::GtkTreeView, _func::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Maybe(Function))
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_tree_view_set_column_drag_function", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _user_data, _destroy)
        nothing
    end
    function set_cursor(instance::GtkTreeView, _path::GtkTreePath, _focus_column::Maybe(GtkTreeViewColumn), _start_editing)
        _focus_column = if _focus_column == nothing
                C_NULL
            else
                _focus_column
            end
        ret = ccall(("gtk_tree_view_set_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Cint), instance, _path, _focus_column, _start_editing)
        nothing
    end
    function set_cursor_on_cell(instance::GtkTreeView, _path::GtkTreePath, _focus_column::Maybe(GtkTreeViewColumn), _focus_cell::Maybe(GtkCellRenderer), _start_editing)
        _focus_column = if _focus_column == nothing
                C_NULL
            else
                _focus_column
            end
        _focus_cell = if _focus_cell == nothing
                C_NULL
            else
                _focus_cell
            end
        ret = ccall(("gtk_tree_view_set_cursor_on_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Ptr{GObject}, Cint), instance, _path, _focus_column, _focus_cell, _start_editing)
        nothing
    end
    function set_drag_dest_row(instance::GtkTreeView, _path::Maybe(GtkTreePath), _pos)
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        ret = ccall(("gtk_tree_view_set_drag_dest_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Int32), instance, _path, _pos)
        nothing
    end
    function set_enable_search(instance::GtkTreeView, _enable_search)
        ret = ccall(("gtk_tree_view_set_enable_search", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_search)
        nothing
    end
    function set_enable_tree_lines(instance::GtkTreeView, _enabled)
        ret = ccall(("gtk_tree_view_set_enable_tree_lines", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function set_expander_column(instance::GtkTreeView, _column::Maybe(GtkTreeViewColumn))
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        ret = ccall(("gtk_tree_view_set_expander_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        nothing
    end
    function set_fixed_height_mode(instance::GtkTreeView, _enable)
        ret = ccall(("gtk_tree_view_set_fixed_height_mode", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable)
        nothing
    end
    function set_grid_lines(instance::GtkTreeView, _grid_lines)
        ret = ccall(("gtk_tree_view_set_grid_lines", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _grid_lines)
        nothing
    end
    function set_headers_clickable(instance::GtkTreeView, _setting)
        ret = ccall(("gtk_tree_view_set_headers_clickable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_headers_visible(instance::GtkTreeView, _headers_visible)
        ret = ccall(("gtk_tree_view_set_headers_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _headers_visible)
        nothing
    end
    function set_hover_expand(instance::GtkTreeView, _expand)
        ret = ccall(("gtk_tree_view_set_hover_expand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_hover_selection(instance::GtkTreeView, _hover)
        ret = ccall(("gtk_tree_view_set_hover_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _hover)
        nothing
    end
    function set_level_indentation(instance::GtkTreeView, _indentation)
        ret = ccall(("gtk_tree_view_set_level_indentation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _indentation)
        nothing
    end
    function set_model(instance::GtkTreeView, _model)
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_tree_view_set_model", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_reorderable(instance::GtkTreeView, _reorderable)
        ret = ccall(("gtk_tree_view_set_reorderable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_row_separator_func(instance::GtkTreeView, _func::Maybe(Function), _data::Maybe(Nothing), _destroy::Maybe(Function))
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _data = if _data == nothing
                C_NULL
            else
                _data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_tree_view_set_row_separator_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _data, _destroy)
        nothing
    end
    function set_rubber_banding(instance::GtkTreeView, _enable)
        ret = ccall(("gtk_tree_view_set_rubber_banding", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable)
        nothing
    end
    function set_search_column(instance::GtkTreeView, _column)
        ret = ccall(("gtk_tree_view_set_search_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_search_entry(instance::GtkTreeView, _entry)
        _entry = if _entry == nothing
                C_NULL
            else
                _entry
            end
        ret = ccall(("gtk_tree_view_set_search_entry", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _entry)
        nothing
    end
    function set_search_equal_func(instance::GtkTreeView, _search_equal_func::Function, _search_user_data::Maybe(Nothing), _search_destroy::Maybe(Function))
        _search_equal_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Int32, Ptr{UInt8}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _search_user_data = if _search_user_data == nothing
                C_NULL
            else
                _search_user_data
            end
        _search_destroy = if _search_destroy == nothing
                C_NULL
            else
                _search_destroy
            end
        ret = ccall(("gtk_tree_view_set_search_equal_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _search_equal_func, _search_user_data, _search_destroy)
        nothing
    end
    function set_show_expanders(instance::GtkTreeView, _enabled)
        ret = ccall(("gtk_tree_view_set_show_expanders", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function set_tooltip_cell(instance::GtkTreeView, _tooltip::GtkTooltip, _path::Maybe(GtkTreePath), _column::Maybe(GtkTreeViewColumn), _cell::Maybe(GtkCellRenderer))
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        _cell = if _cell == nothing
                C_NULL
            else
                _cell
            end
        ret = ccall(("gtk_tree_view_set_tooltip_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GObject}, Ptr{GObject}), instance, _tooltip, _path, _column, _cell)
        nothing
    end
    function set_tooltip_column(instance::GtkTreeView, _column)
        ret = ccall(("gtk_tree_view_set_tooltip_column", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_tooltip_row(instance::GtkTreeView, _tooltip::GtkTooltip, _path::GtkTreePath)
        ret = ccall(("gtk_tree_view_set_tooltip_row", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreePath}), instance, _tooltip, _path)
        nothing
    end
    function unset_rows_drag_dest(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_unset_rows_drag_dest", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unset_rows_drag_source(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_unset_rows_drag_source", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function TreeViewColumn()
        ret = ccall(("gtk_tree_view_column_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkTreeViewColumn, ret, false)
        ret2
    end
    function TreeViewColumn_new_with_area(_area::GtkCellArea)
        ret = ccall(("gtk_tree_view_column_new_with_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _area)
        ret2 = convert(GtkTreeViewColumn, ret, false)
        ret2
    end
    function add_attribute(instance::GtkTreeViewColumn, _cell_renderer::GtkCellRenderer, _attribute, _column)
        ret = ccall(("gtk_tree_view_column_add_attribute", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Int32), instance, _cell_renderer, _attribute, _column)
        nothing
    end
    function cell_get_position(instance::GtkTreeViewColumn, _cell_renderer::GtkCellRenderer)
        m_x_offset = Ref{Int32}()
        m_width = Ref{Int32}()
        ret = ccall(("gtk_tree_view_column_cell_get_position", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, _cell_renderer, m_x_offset, m_width)
        ret2 = convert(Bool, ret)
        _x_offset = m_x_offset[]
        _width = m_width[]
        (ret2, _x_offset, _width)
    end
    function cell_get_size(instance::GtkTreeViewColumn)
        m_x_offset = Ref{Int32}()
        m_y_offset = Ref{Int32}()
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_tree_view_column_cell_get_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}), instance, m_x_offset, m_y_offset, m_width, m_height)
        _x_offset = m_x_offset[]
        _y_offset = m_y_offset[]
        _width = m_width[]
        _height = m_height[]
        (_x_offset, _y_offset, _width, _height)
    end
    function cell_is_visible(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_cell_is_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function cell_set_cell_data(instance::GtkTreeViewColumn, _tree_model, _iter::GtkTreeIter, _is_expander, _is_expanded)
        ret = ccall(("gtk_tree_view_column_cell_set_cell_data", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GtkTreeIter}, Cint, Cint), instance, _tree_model, _iter, _is_expander, _is_expanded)
        nothing
    end
    function clear(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function clear_attributes(instance::GtkTreeViewColumn, _cell_renderer::GtkCellRenderer)
        ret = ccall(("gtk_tree_view_column_clear_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _cell_renderer)
        nothing
    end
    function clicked(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_clicked", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function focus_cell(instance::GtkTreeViewColumn, _cell::GtkCellRenderer)
        ret = ccall(("gtk_tree_view_column_focus_cell", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _cell)
        nothing
    end
    function get_alignment(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_alignment", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_button(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_button", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_clickable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_clickable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_expand(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_expand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_fixed_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_fixed_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_max_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_min_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reorderable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_reorderable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_resizable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_resizable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sizing(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sizing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = TreeViewColumnSizing(ret)
        ret2
    end
    function get_sort_column_id(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_column_id", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_sort_indicator(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_indicator", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sort_order(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_order", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SortType(ret)
        ret2
    end
    function get_spacing(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_spacing", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_title(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_tree_view(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_tree_view", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_widget(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_x_offset(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_x_offset", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function pack_end(instance::GtkTreeViewColumn, _cell::GtkCellRenderer, _expand)
        ret = ccall(("gtk_tree_view_column_pack_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _cell, _expand)
        nothing
    end
    function pack_start(instance::GtkTreeViewColumn, _cell::GtkCellRenderer, _expand)
        ret = ccall(("gtk_tree_view_column_pack_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _cell, _expand)
        nothing
    end
    function queue_resize(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_queue_resize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_alignment(instance::GtkTreeViewColumn, _xalign)
        ret = ccall(("gtk_tree_view_column_set_alignment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_cell_data_func(instance::GtkTreeViewColumn, _cell_renderer::GtkCellRenderer, _func::Maybe(Function), _func_data::Maybe(Nothing), _destroy::Function)
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _func_data = if _func_data == nothing
                C_NULL
            else
                _func_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_tree_view_column_set_cell_data_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _cell_renderer, _func, _func_data, _destroy)
        nothing
    end
    function set_clickable(instance::GtkTreeViewColumn, _clickable)
        ret = ccall(("gtk_tree_view_column_set_clickable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _clickable)
        nothing
    end
    function set_expand(instance::GtkTreeViewColumn, _expand)
        ret = ccall(("gtk_tree_view_column_set_expand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_fixed_width(instance::GtkTreeViewColumn, _fixed_width)
        ret = ccall(("gtk_tree_view_column_set_fixed_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _fixed_width)
        nothing
    end
    function set_max_width(instance::GtkTreeViewColumn, _max_width)
        ret = ccall(("gtk_tree_view_column_set_max_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _max_width)
        nothing
    end
    function set_min_width(instance::GtkTreeViewColumn, _min_width)
        ret = ccall(("gtk_tree_view_column_set_min_width", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _min_width)
        nothing
    end
    function set_reorderable(instance::GtkTreeViewColumn, _reorderable)
        ret = ccall(("gtk_tree_view_column_set_reorderable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_resizable(instance::GtkTreeViewColumn, _resizable)
        ret = ccall(("gtk_tree_view_column_set_resizable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resizable)
        nothing
    end
    function set_sizing(instance::GtkTreeViewColumn, _type)
        ret = ccall(("gtk_tree_view_column_set_sizing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function set_sort_column_id(instance::GtkTreeViewColumn, _sort_column_id)
        ret = ccall(("gtk_tree_view_column_set_sort_column_id", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _sort_column_id)
        nothing
    end
    function set_sort_indicator(instance::GtkTreeViewColumn, _setting)
        ret = ccall(("gtk_tree_view_column_set_sort_indicator", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_sort_order(instance::GtkTreeViewColumn, _order)
        ret = ccall(("gtk_tree_view_column_set_sort_order", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _order)
        nothing
    end
    function set_spacing(instance::GtkTreeViewColumn, _spacing)
        ret = ccall(("gtk_tree_view_column_set_spacing", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function set_title(instance::GtkTreeViewColumn, _title)
        ret = ccall(("gtk_tree_view_column_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function set_visible(instance::GtkTreeViewColumn, _visible)
        ret = ccall(("gtk_tree_view_column_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function set_widget(instance::GtkTreeViewColumn, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_tree_view_column_set_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function Video()
        ret = ccall(("gtk_video_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Video_new_for_file(_file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_video_new_for_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _file)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Video_new_for_filename(_filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_video_new_for_filename", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _filename)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Video_new_for_media_stream(_stream::Maybe(GtkMediaStream))
        _stream = if _stream == nothing
                C_NULL
            else
                _stream
            end
        ret = ccall(("gtk_video_new_for_media_stream", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _stream)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function Video_new_for_resource(_resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_video_new_for_resource", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{UInt8},), _resource_path)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_autoplay(instance::GtkVideo)
        ret = ccall(("gtk_video_get_autoplay", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_file(instance::GtkVideo)
        ret = ccall(("gtk_video_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_loop(instance::GtkVideo)
        ret = ccall(("gtk_video_get_loop", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_media_stream(instance::GtkVideo)
        ret = ccall(("gtk_video_get_media_stream", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkMediaStream, ret, false)
            end
        ret2
    end
    function set_autoplay(instance::GtkVideo, _autoplay)
        ret = ccall(("gtk_video_set_autoplay", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _autoplay)
        nothing
    end
    function set_file(instance::GtkVideo, _file)
        _file = if _file == nothing
                C_NULL
            else
                _file
            end
        ret = ccall(("gtk_video_set_file", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _file)
        nothing
    end
    function set_filename(instance::GtkVideo, _filename)
        _filename = if _filename == nothing
                C_NULL
            else
                _filename
            end
        ret = ccall(("gtk_video_set_filename", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _filename)
        nothing
    end
    function set_loop(instance::GtkVideo, _loop)
        ret = ccall(("gtk_video_set_loop", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _loop)
        nothing
    end
    function set_media_stream(instance::GtkVideo, _stream::Maybe(GtkMediaStream))
        _stream = if _stream == nothing
                C_NULL
            else
                _stream
            end
        ret = ccall(("gtk_video_set_media_stream", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stream)
        nothing
    end
    function set_resource(instance::GtkVideo, _resource_path)
        _resource_path = if _resource_path == nothing
                C_NULL
            else
                _resource_path
            end
        ret = ccall(("gtk_video_set_resource", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _resource_path)
        nothing
    end
    function Viewport(_hadjustment::Maybe(GtkAdjustment), _vadjustment::Maybe(GtkAdjustment))
        _hadjustment = if _hadjustment == nothing
                C_NULL
            else
                _hadjustment
            end
        _vadjustment = if _vadjustment == nothing
                C_NULL
            else
                _vadjustment
            end
        ret = ccall(("gtk_viewport_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), _hadjustment, _vadjustment)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkViewport)
        ret = ccall(("gtk_viewport_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_scroll_to_focus(instance::GtkViewport)
        ret = ccall(("gtk_viewport_get_scroll_to_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_child(instance::GtkViewport, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_viewport_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_scroll_to_focus(instance::GtkViewport, _scroll_to_focus)
        ret = ccall(("gtk_viewport_set_scroll_to_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _scroll_to_focus)
        nothing
    end
    function VolumeButton()
        ret = ccall(("gtk_volume_button_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_default_direction()
        ret = ccall(("gtk_widget_get_default_direction", "libgtk-4.so.1"), Int32, ())
        ret2 = TextDirection(ret)
        ret2
    end
    function set_default_direction(_dir)
        ret = ccall(("gtk_widget_set_default_direction", "libgtk-4.so.1"), Nothing, (Int32,), _dir)
        nothing
    end
    function action_set_enabled(instance::GtkWidget, _action_name, _enabled)
        ret = ccall(("gtk_widget_action_set_enabled", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Cint), instance, _action_name, _enabled)
        nothing
    end
    function activate_action(instance::GtkWidget, _name, _args::Maybe(GVariant))
        _args = if _args == nothing
                C_NULL
            else
                _args
            end
        ret = ccall(("gtk_widget_activate_action_variant", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}, Ptr{GVariant}), instance, _name, _args)
        ret2 = convert(Bool, ret)
        ret2
    end
    function activate_default(instance::GtkWidget)
        ret = ccall(("gtk_widget_activate_default", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function add_controller(instance::GtkWidget, _controller::GtkEventController)
        ret = ccall(("gtk_widget_add_controller", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _controller)
        nothing
    end
    function add_css_class(instance::GtkWidget, _css_class)
        ret = ccall(("gtk_widget_add_css_class", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _css_class)
        nothing
    end
    function add_mnemonic_label(instance::GtkWidget, _label::GtkWidget)
        ret = ccall(("gtk_widget_add_mnemonic_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label)
        nothing
    end
    function add_tick_callback(instance::GtkWidget, _callback::Function, _user_data::Maybe(Nothing), _notify::Function)
        _callback = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _notify = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_widget_add_tick_callback", "libgtk-4.so.1"), UInt32, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _callback, _user_data, _notify)
        ret
    end
    function allocate(instance::GtkWidget, _width, _height, _baseline, _transform::Maybe(GskTransform))
        _transform = if _transform == nothing
                C_NULL
            else
                _transform
            end
        ret = ccall(("gtk_widget_allocate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Int32, Ptr{GskTransform}), instance, _width, _height, _baseline, _transform)
        nothing
    end
    function child_focus(instance::GtkWidget, _direction)
        ret = ccall(("gtk_widget_child_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _direction)
        ret2 = convert(Bool, ret)
        ret2
    end
    function compute_bounds(instance::GtkWidget, _target::GtkWidget)
        m_out_bounds = Ref{Ptr{GrapheneRect}}()
        ret = ccall(("gtk_widget_compute_bounds", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GrapheneRect}}), instance, _target, m_out_bounds)
        ret2 = convert(Bool, ret)
        _out_bounds = m_out_bounds[]
        _out_bounds = convert(GrapheneRect, _out_bounds, false)
        (ret2, _out_bounds)
    end
    function compute_expand(instance::GtkWidget, _orientation)
        ret = ccall(("gtk_widget_compute_expand", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _orientation)
        ret2 = convert(Bool, ret)
        ret2
    end
    function compute_point(instance::GtkWidget, _target::GtkWidget, _point::GraphenePoint)
        m_out_point = Ref{Ptr{GraphenePoint}}()
        ret = ccall(("gtk_widget_compute_point", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{GraphenePoint}, Ptr{Ptr{GraphenePoint}}), instance, _target, _point, m_out_point)
        ret2 = convert(Bool, ret)
        _out_point = m_out_point[]
        _out_point = convert(GraphenePoint, _out_point, false)
        (ret2, _out_point)
    end
    function compute_transform(instance::GtkWidget, _target::GtkWidget)
        m_out_transform = Ref{Ptr{GrapheneMatrix}}()
        ret = ccall(("gtk_widget_compute_transform", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GrapheneMatrix}}), instance, _target, m_out_transform)
        ret2 = convert(Bool, ret)
        _out_transform = m_out_transform[]
        _out_transform = convert(GrapheneMatrix, _out_transform, false)
        (ret2, _out_transform)
    end
    function contains(instance::GtkWidget, _x, _y)
        ret = ccall(("gtk_widget_contains", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Float64, Float64), instance, _x, _y)
        ret2 = convert(Bool, ret)
        ret2
    end
    function create_pango_context(instance::GtkWidget)
        ret = ccall(("gtk_widget_create_pango_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, true)
        ret2
    end
    function create_pango_layout(instance::GtkWidget, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_widget_create_pango_layout", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        ret2 = convert(PangoLayout, ret, true)
        ret2
    end
    function drag_check_threshold(instance::GtkWidget, _start_x, _start_y, _current_x, _current_y)
        ret = ccall(("gtk_drag_check_threshold", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32, Int32, Int32, Int32), instance, _start_x, _start_y, _current_x, _current_y)
        ret2 = convert(Bool, ret)
        ret2
    end
    function error_bell(instance::GtkWidget)
        ret = ccall(("gtk_widget_error_bell", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_allocated_baseline(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_baseline", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_allocated_height(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_height", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_allocated_width(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_allocation(instance::GtkWidget)
        m_allocation = Ref{Ptr{GdkRectangle}}()
        ret = ccall(("gtk_widget_get_allocation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRectangle}}), instance, m_allocation)
        _allocation = m_allocation[]
        _allocation = convert(GdkRectangle, _allocation, false)
        _allocation
    end
    function get_ancestor(instance::GtkWidget, _widget_type)
        ret = ccall(("gtk_widget_get_ancestor", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt64), instance, _widget_type)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_can_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_can_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_target(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_can_target", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child_visible(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_child_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_clipboard(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_clipboard", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkClipboard, ret, false)
        ret2
    end
    function get_css_classes(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_css_classes", "libgtk-4.so.1"), Ptr{Ptr{UInt8}}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                ret2 = bytestring.(unsafe_wrap(Vector{Ptr{UInt8}}, ret, _len))
                GLib.g_strfreev(ret)
                ret2
            end
        ret2
    end
    function get_css_name(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_css_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_cursor(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_cursor", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkCursor, ret, false)
            end
        ret2
    end
    function get_direction(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_direction", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = TextDirection(ret)
        ret2
    end
    function get_display(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_display", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_first_child(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_first_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_focus_child(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_focus_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_focus_on_click(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_focus_on_click", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_focusable(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_focusable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_font_map(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_font_map", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontMap, ret, false)
            end
        ret2
    end
    function get_font_options(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_font_options", "libgtk-4.so.1"), Ptr{cairoFontOptions}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(cairoFontOptions, ret, false)
            end
        ret2
    end
    function get_frame_clock(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_frame_clock", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkFrameClock, ret, false)
            end
        ret2
    end
    function get_halign(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_halign", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Align(ret)
        ret2
    end
    function get_has_tooltip(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_has_tooltip", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_height(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_height", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_hexpand(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_hexpand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hexpand_set(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_hexpand_set", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_last_child(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_last_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_layout_manager(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_layout_manager", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkLayoutManager, ret, false)
            end
        ret2
    end
    function get_mapped(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_mapped", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_margin_bottom(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_bottom", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_end(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_end", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_start(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_start", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_top(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_top", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_name(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_native(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_native", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_next_sibling(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_next_sibling", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_opacity(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_opacity", "libgtk-4.so.1"), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_overflow(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_overflow", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Overflow(ret)
        ret2
    end
    function get_pango_context(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_pango_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, false)
        ret2
    end
    function get_parent(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_parent", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_preferred_size(instance::GtkWidget)
        m_minimum_size = Ref{Ptr{GtkRequisition}}()
        m_natural_size = Ref{Ptr{GtkRequisition}}()
        ret = ccall(("gtk_widget_get_preferred_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GtkRequisition}}, Ptr{Ptr{GtkRequisition}}), instance, m_minimum_size, m_natural_size)
        _minimum_size = m_minimum_size[]
        _minimum_size = convert(GtkRequisition, _minimum_size, false)
        _natural_size = m_natural_size[]
        _natural_size = convert(GtkRequisition, _natural_size, false)
        (_minimum_size, _natural_size)
    end
    function get_prev_sibling(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_prev_sibling", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_primary_clipboard(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_primary_clipboard", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkClipboard, ret, false)
        ret2
    end
    function get_realized(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_realized", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_receives_default(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_receives_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_request_mode(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_request_mode", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function get_root(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_root", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_scale_factor(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_scale_factor", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_sensitive(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_sensitive", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_settings(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_settings", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkSettings, ret, false)
        ret2
    end
    function get_size(instance::GtkWidget, _orientation)
        ret = ccall(("gtk_widget_get_size", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Int32), instance, _orientation)
        ret
    end
    function get_size_request(instance::GtkWidget)
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_widget_get_size_request", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_width, m_height)
        _width = m_width[]
        _height = m_height[]
        (_width, _height)
    end
    function get_state_flags(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_state_flags", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_style_context(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_style_context", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkStyleContext, ret, false)
        ret2
    end
    function get_template_child(instance::GtkWidget, _widget_type, _name)
        ret = ccall(("gtk_widget_get_template_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, UInt64, Ptr{UInt8}), instance, _widget_type, _name)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_tooltip_markup(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_tooltip_markup", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_tooltip_text(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_tooltip_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_valign(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_valign", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Align(ret)
        ret2
    end
    function get_vexpand(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_vexpand", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_vexpand_set(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_vexpand_set", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_width(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_width", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function grab_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_grab_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_css_class(instance::GtkWidget, _css_class)
        ret = ccall(("gtk_widget_has_css_class", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{UInt8}), instance, _css_class)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_default(instance::GtkWidget)
        ret = ccall(("gtk_widget_has_default", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_has_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function has_visible_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_has_visible_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function hide(instance::GtkWidget)
        ret = ccall(("gtk_widget_hide", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function in_destruction(instance::GtkWidget)
        ret = ccall(("gtk_widget_in_destruction", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function init_template(instance::GtkWidget)
        ret = ccall(("gtk_widget_init_template", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function insert_action_group(instance::GtkWidget, _name, _group)
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_widget_insert_action_group", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{GObject}), instance, _name, _group)
        nothing
    end
    function insert_after(instance::GtkWidget, _parent::GtkWidget, _previous_sibling::Maybe(GtkWidget))
        _previous_sibling = if _previous_sibling == nothing
                C_NULL
            else
                _previous_sibling
            end
        ret = ccall(("gtk_widget_insert_after", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _parent, _previous_sibling)
        nothing
    end
    function insert_before(instance::GtkWidget, _parent::GtkWidget, _next_sibling::Maybe(GtkWidget))
        _next_sibling = if _next_sibling == nothing
                C_NULL
            else
                _next_sibling
            end
        ret = ccall(("gtk_widget_insert_before", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _parent, _next_sibling)
        nothing
    end
    function is_ancestor(instance::GtkWidget, _ancestor::GtkWidget)
        ret = ccall(("gtk_widget_is_ancestor", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _ancestor)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_drawable(instance::GtkWidget)
        ret = ccall(("gtk_widget_is_drawable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_is_focus", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_sensitive(instance::GtkWidget)
        ret = ccall(("gtk_widget_is_sensitive", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_visible(instance::GtkWidget)
        ret = ccall(("gtk_widget_is_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function keynav_failed(instance::GtkWidget, _direction)
        ret = ccall(("gtk_widget_keynav_failed", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Int32), instance, _direction)
        ret2 = convert(Bool, ret)
        ret2
    end
    function list_mnemonic_labels(instance::GtkWidget)
        ret = ccall(("gtk_widget_list_mnemonic_labels", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function map(instance::GtkWidget)
        ret = ccall(("gtk_widget_map", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function measure(instance::GtkWidget, _orientation, _for_size)
        m_minimum = Ref{Int32}()
        m_natural = Ref{Int32}()
        m_minimum_baseline = Ref{Int32}()
        m_natural_baseline = Ref{Int32}()
        ret = ccall(("gtk_widget_measure", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}), instance, _orientation, _for_size, m_minimum, m_natural, m_minimum_baseline, m_natural_baseline)
        _minimum = m_minimum[]
        _natural = m_natural[]
        _minimum_baseline = m_minimum_baseline[]
        _natural_baseline = m_natural_baseline[]
        (_minimum, _natural, _minimum_baseline, _natural_baseline)
    end
    function mnemonic_activate(instance::GtkWidget, _group_cycling)
        ret = ccall(("gtk_widget_mnemonic_activate", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Cint), instance, _group_cycling)
        ret2 = convert(Bool, ret)
        ret2
    end
    function observe_children(instance::GtkWidget)
        ret = ccall(("gtk_widget_observe_children", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function observe_controllers(instance::GtkWidget)
        ret = ccall(("gtk_widget_observe_controllers", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function pick(instance::GtkWidget, _x, _y, _flags)
        ret = ccall(("gtk_widget_pick", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Float64, Float64, Int32), instance, _x, _y, _flags)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function queue_allocate(instance::GtkWidget)
        ret = ccall(("gtk_widget_queue_allocate", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function queue_draw(instance::GtkWidget)
        ret = ccall(("gtk_widget_queue_draw", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function queue_resize(instance::GtkWidget)
        ret = ccall(("gtk_widget_queue_resize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function realize(instance::GtkWidget)
        ret = ccall(("gtk_widget_realize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_controller(instance::GtkWidget, _controller::GtkEventController)
        ret = ccall(("gtk_widget_remove_controller", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _controller)
        nothing
    end
    function remove_css_class(instance::GtkWidget, _css_class)
        ret = ccall(("gtk_widget_remove_css_class", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _css_class)
        nothing
    end
    function remove_mnemonic_label(instance::GtkWidget, _label::GtkWidget)
        ret = ccall(("gtk_widget_remove_mnemonic_label", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label)
        nothing
    end
    function remove_tick_callback(instance::GtkWidget, _id)
        ret = ccall(("gtk_widget_remove_tick_callback", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _id)
        nothing
    end
    function set_can_focus(instance::GtkWidget, _can_focus)
        ret = ccall(("gtk_widget_set_can_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _can_focus)
        nothing
    end
    function set_can_target(instance::GtkWidget, _can_target)
        ret = ccall(("gtk_widget_set_can_target", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _can_target)
        nothing
    end
    function set_child_visible(instance::GtkWidget, _child_visible)
        ret = ccall(("gtk_widget_set_child_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _child_visible)
        nothing
    end
    function set_css_classes(instance::GtkWidget, _classes)
        ret = ccall(("gtk_widget_set_css_classes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{UInt8}}), instance, _classes)
        nothing
    end
    function set_cursor(instance::GtkWidget, _cursor::Maybe(GdkCursor))
        _cursor = if _cursor == nothing
                C_NULL
            else
                _cursor
            end
        ret = ccall(("gtk_widget_set_cursor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _cursor)
        nothing
    end
    function set_cursor_from_name(instance::GtkWidget, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_widget_set_cursor_from_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_direction(instance::GtkWidget, _dir)
        ret = ccall(("gtk_widget_set_direction", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _dir)
        nothing
    end
    function set_focus_child(instance::GtkWidget, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_widget_set_focus_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_focus_on_click(instance::GtkWidget, _focus_on_click)
        ret = ccall(("gtk_widget_set_focus_on_click", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _focus_on_click)
        nothing
    end
    function set_focusable(instance::GtkWidget, _focusable)
        ret = ccall(("gtk_widget_set_focusable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _focusable)
        nothing
    end
    function set_font_map(instance::GtkWidget, _font_map::Maybe(PangoFontMap))
        _font_map = if _font_map == nothing
                C_NULL
            else
                _font_map
            end
        ret = ccall(("gtk_widget_set_font_map", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _font_map)
        nothing
    end
    function set_font_options(instance::GtkWidget, _options::Maybe(cairoFontOptions))
        _options = if _options == nothing
                C_NULL
            else
                _options
            end
        ret = ccall(("gtk_widget_set_font_options", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{cairoFontOptions}), instance, _options)
        nothing
    end
    function set_halign(instance::GtkWidget, _align)
        ret = ccall(("gtk_widget_set_halign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _align)
        nothing
    end
    function set_has_tooltip(instance::GtkWidget, _has_tooltip)
        ret = ccall(("gtk_widget_set_has_tooltip", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _has_tooltip)
        nothing
    end
    function set_hexpand(instance::GtkWidget, _expand)
        ret = ccall(("gtk_widget_set_hexpand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_hexpand_set(instance::GtkWidget, _set)
        ret = ccall(("gtk_widget_set_hexpand_set", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _set)
        nothing
    end
    function set_layout_manager(instance::GtkWidget, _layout_manager::Maybe(GtkLayoutManager))
        _layout_manager = if _layout_manager == nothing
                C_NULL
            else
                _layout_manager
            end
        ret = ccall(("gtk_widget_set_layout_manager", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _layout_manager)
        nothing
    end
    function set_margin_bottom(instance::GtkWidget, _margin)
        ret = ccall(("gtk_widget_set_margin_bottom", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_end(instance::GtkWidget, _margin)
        ret = ccall(("gtk_widget_set_margin_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_start(instance::GtkWidget, _margin)
        ret = ccall(("gtk_widget_set_margin_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_top(instance::GtkWidget, _margin)
        ret = ccall(("gtk_widget_set_margin_top", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_name(instance::GtkWidget, _name)
        ret = ccall(("gtk_widget_set_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_opacity(instance::GtkWidget, _opacity)
        ret = ccall(("gtk_widget_set_opacity", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float64), instance, _opacity)
        nothing
    end
    function set_overflow(instance::GtkWidget, _overflow)
        ret = ccall(("gtk_widget_set_overflow", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _overflow)
        nothing
    end
    function set_parent(instance::GtkWidget, _parent::GtkWidget)
        ret = ccall(("gtk_widget_set_parent", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function set_receives_default(instance::GtkWidget, _receives_default)
        ret = ccall(("gtk_widget_set_receives_default", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _receives_default)
        nothing
    end
    function set_sensitive(instance::GtkWidget, _sensitive)
        ret = ccall(("gtk_widget_set_sensitive", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _sensitive)
        nothing
    end
    function set_size_request(instance::GtkWidget, _width, _height)
        ret = ccall(("gtk_widget_set_size_request", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_state_flags(instance::GtkWidget, _flags, _clear)
        ret = ccall(("gtk_widget_set_state_flags", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Cint), instance, _flags, _clear)
        nothing
    end
    function set_tooltip_markup(instance::GtkWidget, _markup)
        _markup = if _markup == nothing
                C_NULL
            else
                _markup
            end
        ret = ccall(("gtk_widget_set_tooltip_markup", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _markup)
        nothing
    end
    function set_tooltip_text(instance::GtkWidget, _text)
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_widget_set_tooltip_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_valign(instance::GtkWidget, _align)
        ret = ccall(("gtk_widget_set_valign", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _align)
        nothing
    end
    function set_vexpand(instance::GtkWidget, _expand)
        ret = ccall(("gtk_widget_set_vexpand", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_vexpand_set(instance::GtkWidget, _set)
        ret = ccall(("gtk_widget_set_vexpand_set", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _set)
        nothing
    end
    function set_visible(instance::GtkWidget, _visible)
        ret = ccall(("gtk_widget_set_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function should_layout(instance::GtkWidget)
        ret = ccall(("gtk_widget_should_layout", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function show(instance::GtkWidget)
        ret = ccall(("gtk_widget_show", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function size_allocate(instance::GtkWidget, _allocation::GdkRectangle, _baseline)
        ret = ccall(("gtk_widget_size_allocate", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRectangle}, Int32), instance, _allocation, _baseline)
        nothing
    end
    function snapshot_child(instance::GtkWidget, _child::GtkWidget, _snapshot::GtkSnapshot)
        ret = ccall(("gtk_widget_snapshot_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _snapshot)
        nothing
    end
    function translate_coordinates(instance::GtkWidget, _dest_widget::GtkWidget, _src_x, _src_y)
        m_dest_x = Ref{Float64}()
        m_dest_y = Ref{Float64}()
        ret = ccall(("gtk_widget_translate_coordinates", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Float64, Float64, Ptr{Float64}, Ptr{Float64}), instance, _dest_widget, _src_x, _src_y, m_dest_x, m_dest_y)
        ret2 = convert(Bool, ret)
        _dest_x = m_dest_x[]
        _dest_y = m_dest_y[]
        (ret2, _dest_x, _dest_y)
    end
    function trigger_tooltip_query(instance::GtkWidget)
        ret = ccall(("gtk_widget_trigger_tooltip_query", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unmap(instance::GtkWidget)
        ret = ccall(("gtk_widget_unmap", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unparent(instance::GtkWidget)
        ret = ccall(("gtk_widget_unparent", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unrealize(instance::GtkWidget)
        ret = ccall(("gtk_widget_unrealize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unset_state_flags(instance::GtkWidget, _flags)
        ret = ccall(("gtk_widget_unset_state_flags", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function WidgetPaintable(_widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_widget_paintable_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _widget)
        ret2 = convert(GtkWidgetPaintable, ret, true)
        ret2
    end
    function get_widget(instance::GtkWidgetPaintable)
        ret = ccall(("gtk_widget_paintable_get_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_widget(instance::GtkWidgetPaintable, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_widget_paintable_set_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function Window()
        ret = ccall(("gtk_window_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_default_icon_name()
        ret = ccall(("gtk_window_get_default_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, ())
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_toplevels()
        ret = ccall(("gtk_window_get_toplevels", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function list_toplevels()
        ret = ccall(("gtk_window_list_toplevels", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, ())
        ret2 = GLib.GList(ret)
        ret2
    end
    function set_auto_startup_notification(_setting)
        ret = ccall(("gtk_window_set_auto_startup_notification", "libgtk-4.so.1"), Nothing, (Cint,), _setting)
        nothing
    end
    function set_default_icon_name(_name)
        ret = ccall(("gtk_window_set_default_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{UInt8},), _name)
        nothing
    end
    function set_interactive_debugging(_enable)
        ret = ccall(("gtk_window_set_interactive_debugging", "libgtk-4.so.1"), Nothing, (Cint,), _enable)
        nothing
    end
    function close(instance::GtkWindow)
        ret = ccall(("gtk_window_close", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function destroy(instance::GtkWindow)
        ret = ccall(("gtk_window_destroy", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function fullscreen(instance::GtkWindow)
        ret = ccall(("gtk_window_fullscreen", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function fullscreen_on_monitor(instance::GtkWindow, _monitor::GdkMonitor)
        ret = ccall(("gtk_window_fullscreen_on_monitor", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _monitor)
        nothing
    end
    function get_application(instance::GtkWindow)
        ret = ccall(("gtk_window_get_application", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkApplication, ret, false)
            end
        ret2
    end
    function get_child(instance::GtkWindow)
        ret = ccall(("gtk_window_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_decorated(instance::GtkWindow)
        ret = ccall(("gtk_window_get_decorated", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_default_size(instance::GtkWindow)
        m_width = Ref{Int32}()
        m_height = Ref{Int32}()
        ret = ccall(("gtk_window_get_default_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_width, m_height)
        _width = m_width[]
        _height = m_height[]
        (_width, _height)
    end
    function get_default_widget(instance::GtkWindow)
        ret = ccall(("gtk_window_get_default_widget", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_deletable(instance::GtkWindow)
        ret = ccall(("gtk_window_get_deletable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_destroy_with_parent(instance::GtkWindow)
        ret = ccall(("gtk_window_get_destroy_with_parent", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_focus(instance::GtkWindow)
        ret = ccall(("gtk_window_get_focus", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_focus_visible(instance::GtkWindow)
        ret = ccall(("gtk_window_get_focus_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_group(instance::GtkWindow)
        ret = ccall(("gtk_window_get_group", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWindowGroup, ret, false)
        ret2
    end
    function get_handle_menubar_accel(instance::GtkWindow)
        ret = ccall(("gtk_window_get_handle_menubar_accel", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hide_on_close(instance::GtkWindow)
        ret = ccall(("gtk_window_get_hide_on_close", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_name(instance::GtkWindow)
        ret = ccall(("gtk_window_get_icon_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_mnemonics_visible(instance::GtkWindow)
        ret = ccall(("gtk_window_get_mnemonics_visible", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_modal(instance::GtkWindow)
        ret = ccall(("gtk_window_get_modal", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_resizable(instance::GtkWindow)
        ret = ccall(("gtk_window_get_resizable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkWindow)
        ret = ccall(("gtk_window_get_title", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_titlebar(instance::GtkWindow)
        ret = ccall(("gtk_window_get_titlebar", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_transient_for(instance::GtkWindow)
        ret = ccall(("gtk_window_get_transient_for", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function has_group(instance::GtkWindow)
        ret = ccall(("gtk_window_has_group", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_active(instance::GtkWindow)
        ret = ccall(("gtk_window_is_active", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_fullscreen(instance::GtkWindow)
        ret = ccall(("gtk_window_is_fullscreen", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function is_maximized(instance::GtkWindow)
        ret = ccall(("gtk_window_is_maximized", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function maximize(instance::GtkWindow)
        ret = ccall(("gtk_window_maximize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function minimize(instance::GtkWindow)
        ret = ccall(("gtk_window_minimize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function present(instance::GtkWindow)
        ret = ccall(("gtk_window_present", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function present_with_time(instance::GtkWindow, _timestamp)
        ret = ccall(("gtk_window_present_with_time", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32), instance, _timestamp)
        nothing
    end
    function set_application(instance::GtkWindow, _application::Maybe(GtkApplication))
        _application = if _application == nothing
                C_NULL
            else
                _application
            end
        ret = ccall(("gtk_window_set_application", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _application)
        nothing
    end
    function set_child(instance::GtkWindow, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_window_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_decorated(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_decorated", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_default_size(instance::GtkWindow, _width, _height)
        ret = ccall(("gtk_window_set_default_size", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _width, _height)
        nothing
    end
    function set_default_widget(instance::GtkWindow, _default_widget::Maybe(GtkWidget))
        _default_widget = if _default_widget == nothing
                C_NULL
            else
                _default_widget
            end
        ret = ccall(("gtk_window_set_default_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _default_widget)
        nothing
    end
    function set_deletable(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_deletable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_destroy_with_parent(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_destroy_with_parent", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_display(instance::GtkWindow, _display::GdkDisplay)
        ret = ccall(("gtk_window_set_display", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _display)
        nothing
    end
    function set_focus(instance::GtkWindow, _focus::Maybe(GtkWidget))
        _focus = if _focus == nothing
                C_NULL
            else
                _focus
            end
        ret = ccall(("gtk_window_set_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _focus)
        nothing
    end
    function set_focus_visible(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_focus_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_handle_menubar_accel(instance::GtkWindow, _handle_menubar_accel)
        ret = ccall(("gtk_window_set_handle_menubar_accel", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _handle_menubar_accel)
        nothing
    end
    function set_hide_on_close(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_hide_on_close", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_icon_name(instance::GtkWindow, _name)
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_window_set_icon_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_mnemonics_visible(instance::GtkWindow, _setting)
        ret = ccall(("gtk_window_set_mnemonics_visible", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_modal(instance::GtkWindow, _modal)
        ret = ccall(("gtk_window_set_modal", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_resizable(instance::GtkWindow, _resizable)
        ret = ccall(("gtk_window_set_resizable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _resizable)
        nothing
    end
    function set_startup_id(instance::GtkWindow, _startup_id)
        ret = ccall(("gtk_window_set_startup_id", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _startup_id)
        nothing
    end
    function set_title(instance::GtkWindow, _title)
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        ret = ccall(("gtk_window_set_title", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _title)
        nothing
    end
    function set_titlebar(instance::GtkWindow, _titlebar::Maybe(GtkWidget))
        _titlebar = if _titlebar == nothing
                C_NULL
            else
                _titlebar
            end
        ret = ccall(("gtk_window_set_titlebar", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _titlebar)
        nothing
    end
    function set_transient_for(instance::GtkWindow, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_window_set_transient_for", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function unfullscreen(instance::GtkWindow)
        ret = ccall(("gtk_window_unfullscreen", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unmaximize(instance::GtkWindow)
        ret = ccall(("gtk_window_unmaximize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unminimize(instance::GtkWindow)
        ret = ccall(("gtk_window_unminimize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function WindowControls(_side)
        ret = ccall(("gtk_window_controls_new", "libgtk-4.so.1"), Ptr{GObject}, (Int32,), _side)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_decoration_layout(instance::GtkWindowControls)
        ret = ccall(("gtk_window_controls_get_decoration_layout", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_empty(instance::GtkWindowControls)
        ret = ccall(("gtk_window_controls_get_empty", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_side(instance::GtkWindowControls)
        ret = ccall(("gtk_window_controls_get_side", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = PackType(ret)
        ret2
    end
    function set_decoration_layout(instance::GtkWindowControls, _layout)
        _layout = if _layout == nothing
                C_NULL
            else
                _layout
            end
        ret = ccall(("gtk_window_controls_set_decoration_layout", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _layout)
        nothing
    end
    function set_side(instance::GtkWindowControls, _side)
        ret = ccall(("gtk_window_controls_set_side", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _side)
        nothing
    end
    function WindowGroup()
        ret = ccall(("gtk_window_group_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWindowGroup, ret, true)
        ret2
    end
    function add_window(instance::GtkWindowGroup, _window::GtkWindow)
        ret = ccall(("gtk_window_group_add_window", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _window)
        nothing
    end
    function list_windows(instance::GtkWindowGroup)
        ret = ccall(("gtk_window_group_list_windows", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function remove_window(instance::GtkWindowGroup, _window::GtkWindow)
        ret = ccall(("gtk_window_group_remove_window", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _window)
        nothing
    end
    function WindowHandle()
        ret = ccall(("gtk_window_handle_new", "libgtk-4.so.1"), Ptr{GObject}, ())
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_child(instance::GtkWindowHandle)
        ret = ccall(("gtk_window_handle_get_child", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_child(instance::GtkWindowHandle, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_window_handle_set_child", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function get_accessible_role(instance::GObject)
        ret = ccall(("gtk_accessible_get_accessible_role", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = AccessibleRole(ret)
        ret2
    end
    function reset_property(instance::GObject, _property)
        ret = ccall(("gtk_accessible_reset_property", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _property)
        nothing
    end
    function reset_relation(instance::GObject, _relation)
        ret = ccall(("gtk_accessible_reset_relation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _relation)
        nothing
    end
    function reset_state(instance::GObject, _state)
        ret = ccall(("gtk_accessible_reset_state", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _state)
        nothing
    end
    function update_property(instance::GObject, _properties, _values)
        _properties = convert(Vector{Int32}, _properties)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_properties = length(_properties)
        ret = ccall(("gtk_accessible_update_property_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Ptr{GValue}}), instance, _n_properties, _properties, _values)
        nothing
    end
    function update_relation(instance::GObject, _relations, _values)
        _relations = convert(Vector{Int32}, _relations)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_relations = length(_relations)
        ret = ccall(("gtk_accessible_update_relation_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Ptr{GValue}}), instance, _n_relations, _relations, _values)
        nothing
    end
    function update_state(instance::GObject, _states, _values)
        _states = convert(Vector{Int32}, _states)
        _values = convert(Vector{Ptr{GValue}}, _values)
        _n_states = length(_states)
        ret = ccall(("gtk_accessible_update_state_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Int32}, Ptr{Ptr{GValue}}), instance, _n_states, _states, _values)
        nothing
    end
    function get_action_name(instance::GObject)
        ret = ccall(("gtk_actionable_get_action_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_action_target_value(instance::GObject)
        ret = ccall(("gtk_actionable_get_action_target_value", "libgtk-4.so.1"), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function set_action_name(instance::GObject, _action_name)
        _action_name = if _action_name == nothing
                C_NULL
            else
                _action_name
            end
        ret = ccall(("gtk_actionable_set_action_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _action_name)
        nothing
    end
    function set_action_target_value(instance::GObject, _target_value::Maybe(GVariant))
        _target_value = if _target_value == nothing
                C_NULL
            else
                _target_value
            end
        ret = ccall(("gtk_actionable_set_action_target_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GVariant}), instance, _target_value)
        nothing
    end
    function set_detailed_action_name(instance::GObject, _detailed_action_name)
        ret = ccall(("gtk_actionable_set_detailed_action_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _detailed_action_name)
        nothing
    end
    function get_app_info(instance::GObject)
        ret = ccall(("gtk_app_chooser_get_app_info", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, true)
            end
        ret2
    end
    function get_content_type(instance::GObject)
        ret = ccall(("gtk_app_chooser_get_content_type", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function refresh(instance::GObject)
        ret = ccall(("gtk_app_chooser_refresh", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_buildable_id(instance::GObject)
        ret = ccall(("gtk_buildable_get_buildable_id", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function editing_done(instance::GObject)
        ret = ccall(("gtk_cell_editable_editing_done", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function remove_widget(instance::GObject)
        ret = ccall(("gtk_cell_editable_remove_widget", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function add_attribute(instance::GObject, _cell::GtkCellRenderer, _attribute, _column)
        ret = ccall(("gtk_cell_layout_add_attribute", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{UInt8}, Int32), instance, _cell, _attribute, _column)
        nothing
    end
    function clear(instance::GObject)
        ret = ccall(("gtk_cell_layout_clear", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function clear_attributes(instance::GObject, _cell::GtkCellRenderer)
        ret = ccall(("gtk_cell_layout_clear_attributes", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _cell)
        nothing
    end
    function get_area(instance::GObject)
        ret = ccall(("gtk_cell_layout_get_area", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkCellArea, ret, false)
            end
        ret2
    end
    function get_cells(instance::GObject)
        ret = ccall(("gtk_cell_layout_get_cells", "libgtk-4.so.1"), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret)
        ret2
    end
    function pack_end(instance::GObject, _cell::GtkCellRenderer, _expand)
        ret = ccall(("gtk_cell_layout_pack_end", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _cell, _expand)
        nothing
    end
    function pack_start(instance::GObject, _cell::GtkCellRenderer, _expand)
        ret = ccall(("gtk_cell_layout_pack_start", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _cell, _expand)
        nothing
    end
    function reorder(instance::GObject, _cell::GtkCellRenderer, _position)
        ret = ccall(("gtk_cell_layout_reorder", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _cell, _position)
        nothing
    end
    function set_cell_data_func(instance::GObject, _cell::GtkCellRenderer, _func::Maybe(Function), _func_data::Maybe(Nothing), _destroy::Function)
        _func = if _func == nothing
                C_NULL
            else
                _func
            end
        _func_data = if _func_data == nothing
                C_NULL
            else
                _func_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_cell_layout_set_cell_data_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _cell, _func, _func_data, _destroy)
        nothing
    end
    function add_palette(instance::GObject, _orientation, _colors_per_line, _colors)
        _colors = convert(Vector{Ptr{GdkRGBA}}, _colors)
        _n_colors = length(_colors)
        ret = ccall(("gtk_color_chooser_add_palette", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32, Int32, Ptr{Ptr{GdkRGBA}}), instance, _orientation, _colors_per_line, _n_colors, _colors)
        nothing
    end
    function get_rgba(instance::GObject)
        m_color = Ref{Ptr{GdkRGBA}}()
        ret = ccall(("gtk_color_chooser_get_rgba", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Ptr{GdkRGBA}}), instance, m_color)
        _color = m_color[]
        _color = convert(GdkRGBA, _color, false)
        _color
    end
    function get_use_alpha(instance::GObject)
        ret = ccall(("gtk_color_chooser_get_use_alpha", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_rgba(instance::GObject, _color::GdkRGBA)
        ret = ccall(("gtk_color_chooser_set_rgba", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GdkRGBA}), instance, _color)
        nothing
    end
    function set_use_alpha(instance::GObject, _use_alpha)
        ret = ccall(("gtk_color_chooser_set_use_alpha", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _use_alpha)
        nothing
    end
    function delegate_get_property(_object::GObject, _prop_id, _value::GValue, _pspec::GParamSpec)
        ret = ccall(("gtk_editable_delegate_get_property", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, Ptr{GValue}, Ptr{GObject}), _object, _prop_id, _value, _pspec)
        ret2 = convert(Bool, ret)
        ret2
    end
    function delegate_set_property(_object::GObject, _prop_id, _value::GValue, _pspec::GParamSpec)
        ret = ccall(("gtk_editable_delegate_set_property", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, Ptr{GValue}, Ptr{GObject}), _object, _prop_id, _value, _pspec)
        ret2 = convert(Bool, ret)
        ret2
    end
    function delete_selection(instance::GObject)
        ret = ccall(("gtk_editable_delete_selection", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function delete_text(instance::GObject, _start_pos, _end_pos)
        ret = ccall(("gtk_editable_delete_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _start_pos, _end_pos)
        nothing
    end
    function finish_delegate(instance::GObject)
        ret = ccall(("gtk_editable_finish_delegate", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_alignment(instance::GObject)
        ret = ccall(("gtk_editable_get_alignment", "libgtk-4.so.1"), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_chars(instance::GObject, _start_pos, _end_pos)
        ret = ccall(("gtk_editable_get_chars", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Int32, Int32), instance, _start_pos, _end_pos)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_delegate(instance::GObject)
        ret = ccall(("gtk_editable_get_delegate", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function get_editable(instance::GObject)
        ret = ccall(("gtk_editable_get_editable", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enable_undo(instance::GObject)
        ret = ccall(("gtk_editable_get_enable_undo", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_width_chars(instance::GObject)
        ret = ccall(("gtk_editable_get_max_width_chars", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_position(instance::GObject)
        ret = ccall(("gtk_editable_get_position", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_selection_bounds(instance::GObject)
        m_start_pos = Ref{Int32}()
        m_end_pos = Ref{Int32}()
        ret = ccall(("gtk_editable_get_selection_bounds", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_start_pos, m_end_pos)
        ret2 = convert(Bool, ret)
        _start_pos = m_start_pos[]
        _end_pos = m_end_pos[]
        (ret2, _start_pos, _end_pos)
    end
    function get_text(instance::GObject)
        ret = ccall(("gtk_editable_get_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_width_chars(instance::GObject)
        ret = ccall(("gtk_editable_get_width_chars", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function init_delegate(instance::GObject)
        ret = ccall(("gtk_editable_init_delegate", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function insert_text(instance::GObject, _text, _length, _position)
        m_position = Ref{Int32}()
        m_position[] = Base.cconvert(Int32, _position)
        ret = ccall(("gtk_editable_insert_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Int32, Ptr{Int32}), instance, _text, _length, m_position)
        _position = m_position[]
        _position
    end
    function select_region(instance::GObject, _start_pos, _end_pos)
        ret = ccall(("gtk_editable_select_region", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _start_pos, _end_pos)
        nothing
    end
    function set_alignment(instance::GObject, _xalign)
        ret = ccall(("gtk_editable_set_alignment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_editable(instance::GObject, _is_editable)
        ret = ccall(("gtk_editable_set_editable", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _is_editable)
        nothing
    end
    function set_enable_undo(instance::GObject, _enable_undo)
        ret = ccall(("gtk_editable_set_enable_undo", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _enable_undo)
        nothing
    end
    function set_max_width_chars(instance::GObject, _n_chars)
        ret = ccall(("gtk_editable_set_max_width_chars", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_position(instance::GObject, _position)
        ret = ccall(("gtk_editable_set_position", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_text(instance::GObject, _text)
        ret = ccall(("gtk_editable_set_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_width_chars(instance::GObject, _n_chars)
        ret = ccall(("gtk_editable_set_width_chars", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function add_choice(instance::GObject, _id, _label, _options, _option_labels)
        _options = if _options == nothing
                C_NULL
            else
                _options
            end
        _option_labels = if _option_labels == nothing
                C_NULL
            else
                _option_labels
            end
        ret = ccall(("gtk_file_chooser_add_choice", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}, Ptr{Ptr{UInt8}}, Ptr{Ptr{UInt8}}), instance, _id, _label, _options, _option_labels)
        nothing
    end
    function add_filter(instance::GObject, _filter::GtkFileFilter)
        ret = ccall(("gtk_file_chooser_add_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function add_shortcut_folder(instance::GObject, _folder)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_add_shortcut_folder", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _folder, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_action(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_action", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = FileChooserAction(ret)
        ret2
    end
    function get_choice(instance::GObject, _id)
        ret = ccall(("gtk_file_chooser_get_choice", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{UInt8}), instance, _id)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_create_folders(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_create_folders", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_current_folder(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_current_folder", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_current_name(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_current_name", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_file(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_file", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_files(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_files", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_filter(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_filter", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkFileFilter, ret, false)
            end
        ret2
    end
    function get_filters(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_filters", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function get_select_multiple(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_select_multiple", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_shortcut_folders(instance::GObject)
        ret = ccall(("gtk_file_chooser_get_shortcut_folders", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function remove_choice(instance::GObject, _id)
        ret = ccall(("gtk_file_chooser_remove_choice", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _id)
        nothing
    end
    function remove_filter(instance::GObject, _filter::GtkFileFilter)
        ret = ccall(("gtk_file_chooser_remove_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function remove_shortcut_folder(instance::GObject, _folder)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_remove_shortcut_folder", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _folder, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_action(instance::GObject, _action)
        ret = ccall(("gtk_file_chooser_set_action", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _action)
        nothing
    end
    function set_choice(instance::GObject, _id, _option)
        ret = ccall(("gtk_file_chooser_set_choice", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}, Ptr{UInt8}), instance, _id, _option)
        nothing
    end
    function set_create_folders(instance::GObject, _create_folders)
        ret = ccall(("gtk_file_chooser_set_create_folders", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _create_folders)
        nothing
    end
    function set_current_folder(instance::GObject, _file)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_set_current_folder", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _file, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_current_name(instance::GObject, _name)
        ret = ccall(("gtk_file_chooser_set_current_name", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _name)
        nothing
    end
    function set_file(instance::GObject, _file)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_set_file", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _file, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_filter(instance::GObject, _filter::GtkFileFilter)
        ret = ccall(("gtk_file_chooser_set_filter", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function set_select_multiple(instance::GObject, _select_multiple)
        ret = ccall(("gtk_file_chooser_set_select_multiple", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _select_multiple)
        nothing
    end
    function get_font(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_font_desc(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_desc", "libgtk-4.so.1"), Ptr{PangoFontDescription}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontDescription, ret, true)
            end
        ret2
    end
    function get_font_face(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_face", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontFace, ret, false)
            end
        ret2
    end
    function get_font_family(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_family", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontFamily, ret, false)
            end
        ret2
    end
    function get_font_features(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_features", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_font_map(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_map", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontMap, ret, true)
            end
        ret2
    end
    function get_font_size(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_font_size", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_language(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_language", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_level(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_level", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_preview_text(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_preview_text", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_show_preview_entry(instance::GObject)
        ret = ccall(("gtk_font_chooser_get_show_preview_entry", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_filter_func(instance::GObject, _filter::Maybe(Function), _user_data::Maybe(Nothing), _destroy::Function)
        _filter = if _filter == nothing
                C_NULL
            else
                _filter
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Nothing (Ptr{Nothing},)
            end
        ret = ccall(("gtk_font_chooser_set_filter_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _filter, _user_data, _destroy)
        nothing
    end
    function set_font(instance::GObject, _fontname)
        ret = ccall(("gtk_font_chooser_set_font", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _fontname)
        nothing
    end
    function set_font_desc(instance::GObject, _font_desc::PangoFontDescription)
        ret = ccall(("gtk_font_chooser_set_font_desc", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{PangoFontDescription}), instance, _font_desc)
        nothing
    end
    function set_font_map(instance::GObject, _fontmap::Maybe(PangoFontMap))
        _fontmap = if _fontmap == nothing
                C_NULL
            else
                _fontmap
            end
        ret = ccall(("gtk_font_chooser_set_font_map", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _fontmap)
        nothing
    end
    function set_language(instance::GObject, _language)
        ret = ccall(("gtk_font_chooser_set_language", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _language)
        nothing
    end
    function set_level(instance::GObject, _level)
        ret = ccall(("gtk_font_chooser_set_level", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _level)
        nothing
    end
    function set_preview_text(instance::GObject, _text)
        ret = ccall(("gtk_font_chooser_set_preview_text", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{UInt8}), instance, _text)
        nothing
    end
    function set_show_preview_entry(instance::GObject, _show_preview_entry)
        ret = ccall(("gtk_font_chooser_set_show_preview_entry", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Cint), instance, _show_preview_entry)
        nothing
    end
    function get_for_surface(_surface::GdkSurface)
        ret = ccall(("gtk_native_get_for_surface", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), _surface)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_renderer(instance::GObject)
        ret = ccall(("gtk_native_get_renderer", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GskRenderer, ret, false)
        ret2
    end
    function get_surface(instance::GObject)
        ret = ccall(("gtk_native_get_surface", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkSurface, ret, false)
        ret2
    end
    function get_surface_transform(instance::GObject)
        m_x = Ref{Float64}()
        m_y = Ref{Float64}()
        ret = ccall(("gtk_native_get_surface_transform", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Float64}, Ptr{Float64}), instance, m_x, m_y)
        _x = m_x[]
        _y = m_y[]
        (_x, _y)
    end
    function realize(instance::GObject)
        ret = ccall(("gtk_native_realize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function unrealize(instance::GObject)
        ret = ccall(("gtk_native_unrealize", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_orientation(instance::GObject)
        ret = ccall(("gtk_orientable_get_orientation", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function set_orientation(instance::GObject, _orientation)
        ret = ccall(("gtk_orientable_set_orientation", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function get_display(instance::GObject)
        ret = ccall(("gtk_root_get_display", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_focus(instance::GObject)
        ret = ccall(("gtk_root_get_focus", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_focus(instance::GObject, _focus::Maybe(GtkWidget))
        _focus = if _focus == nothing
                C_NULL
            else
                _focus
            end
        ret = ccall(("gtk_root_set_focus", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _focus)
        nothing
    end
    function get_border(instance::GObject)
        m_border = Ref{Ptr{GtkBorder}}()
        ret = ccall(("gtk_scrollable_get_border", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkBorder}}), instance, m_border)
        ret2 = convert(Bool, ret)
        _border = m_border[]
        _border = convert(GtkBorder, _border, false)
        (ret2, _border)
    end
    function get_hadjustment(instance::GObject)
        ret = ccall(("gtk_scrollable_get_hadjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_hscroll_policy(instance::GObject)
        ret = ccall(("gtk_scrollable_get_hscroll_policy", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ScrollablePolicy(ret)
        ret2
    end
    function get_vadjustment(instance::GObject)
        ret = ccall(("gtk_scrollable_get_vadjustment", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_vscroll_policy(instance::GObject)
        ret = ccall(("gtk_scrollable_get_vscroll_policy", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret2 = ScrollablePolicy(ret)
        ret2
    end
    function set_hadjustment(instance::GObject, _hadjustment::Maybe(GtkAdjustment))
        _hadjustment = if _hadjustment == nothing
                C_NULL
            else
                _hadjustment
            end
        ret = ccall(("gtk_scrollable_set_hadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _hadjustment)
        nothing
    end
    function set_hscroll_policy(instance::GObject, _policy)
        ret = ccall(("gtk_scrollable_set_hscroll_policy", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function set_vadjustment(instance::GObject, _vadjustment::Maybe(GtkAdjustment))
        _vadjustment = if _vadjustment == nothing
                C_NULL
            else
                _vadjustment
            end
        ret = ccall(("gtk_scrollable_set_vadjustment", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _vadjustment)
        nothing
    end
    function set_vscroll_policy(instance::GObject, _policy)
        ret = ccall(("gtk_scrollable_set_vscroll_policy", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function get_selection(instance::GObject)
        ret = ccall(("gtk_selection_model_get_selection", "libgtk-4.so.1"), Ptr{GtkBitset}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBitset, ret, true)
        ret2
    end
    function get_selection_in_range(instance::GObject, _position, _n_items)
        ret = ccall(("gtk_selection_model_get_selection_in_range", "libgtk-4.so.1"), Ptr{GtkBitset}, (Ptr{GObject}, UInt32, UInt32), instance, _position, _n_items)
        ret2 = convert(GtkBitset, ret, true)
        ret2
    end
    function is_selected(instance::GObject, _position)
        ret = ccall(("gtk_selection_model_is_selected", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_all(instance::GObject)
        ret = ccall(("gtk_selection_model_select_all", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_item(instance::GObject, _position, _unselect_rest)
        ret = ccall(("gtk_selection_model_select_item", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, Cint), instance, _position, _unselect_rest)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_range(instance::GObject, _position, _n_items, _unselect_rest)
        ret = ccall(("gtk_selection_model_select_range", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, UInt32, Cint), instance, _position, _n_items, _unselect_rest)
        ret2 = convert(Bool, ret)
        ret2
    end
    function selection_changed(instance::GObject, _position, _n_items)
        ret = ccall(("gtk_selection_model_selection_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, UInt32, UInt32), instance, _position, _n_items)
        nothing
    end
    function set_selection(instance::GObject, _selected::GtkBitset, _mask::GtkBitset)
        ret = ccall(("gtk_selection_model_set_selection", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkBitset}, Ptr{GtkBitset}), instance, _selected, _mask)
        ret2 = convert(Bool, ret)
        ret2
    end
    function unselect_all(instance::GObject)
        ret = ccall(("gtk_selection_model_unselect_all", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function unselect_item(instance::GObject, _position)
        ret = ccall(("gtk_selection_model_unselect_item", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32), instance, _position)
        ret2 = convert(Bool, ret)
        ret2
    end
    function unselect_range(instance::GObject, _position, _n_items)
        ret = ccall(("gtk_selection_model_unselect_range", "libgtk-4.so.1"), Cint, (Ptr{GObject}, UInt32, UInt32), instance, _position, _n_items)
        ret2 = convert(Bool, ret)
        ret2
    end
    function drag_data_received(instance::GObject, _dest::GtkTreePath, _value::GValue)
        ret = ccall(("gtk_tree_drag_dest_drag_data_received", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GValue}), instance, _dest, _value)
        ret2 = convert(Bool, ret)
        ret2
    end
    function row_drop_possible(instance::GObject, _dest_path::GtkTreePath, _value::GValue)
        ret = ccall(("gtk_tree_drag_dest_row_drop_possible", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GValue}), instance, _dest_path, _value)
        ret2 = convert(Bool, ret)
        ret2
    end
    function drag_data_delete(instance::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_drag_source_drag_data_delete", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function drag_data_get(instance::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_drag_source_drag_data_get", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkContentProvider, ret, true)
            end
        ret2
    end
    function row_draggable(instance::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_drag_source_row_draggable", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        ret2 = convert(Bool, ret)
        ret2
    end
    function filter_new(instance::GObject, _root::Maybe(GtkTreePath))
        _root = if _root == nothing
                C_NULL
            else
                _root
            end
        ret = ccall(("gtk_tree_model_filter_new", "libgtk-4.so.1"), Ptr{GObject}, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _root)
        ret2 = convert(GObject, ret, true)
        ret2
    end
    function foreach(instance::GObject, _func::Function, _user_data::Maybe(Nothing))
        _func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Cint (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        ret = ccall(("gtk_tree_model_foreach", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}), instance, _func, _user_data)
        nothing
    end
    function get_column_type(instance::GObject, _index_)
        ret = ccall(("gtk_tree_model_get_column_type", "libgtk-4.so.1"), UInt64, (Ptr{GObject}, Int32), instance, _index_)
        ret
    end
    function get_flags(instance::GObject)
        ret = ccall(("gtk_tree_model_get_flags", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_iter(instance::GObject, _path::GtkTreePath)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_get_iter", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreePath}), instance, m_iter, _path)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_first(instance::GObject)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_get_iter_first", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}), instance, m_iter)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function get_iter_from_string(instance::GObject, _path_string)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_get_iter_from_string", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{UInt8}), instance, m_iter, _path_string)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function get_n_columns(instance::GObject)
        ret = ccall(("gtk_tree_model_get_n_columns", "libgtk-4.so.1"), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_path(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_get_path", "libgtk-4.so.1"), Ptr{GtkTreePath}, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(GtkTreePath, ret, true)
        ret2
    end
    function get_string_from_iter(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_get_string_from_iter", "libgtk-4.so.1"), Ptr{UInt8}, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_value(instance::GObject, _iter::GtkTreeIter, _column)
        m_value = Ref{Ptr{GValue}}()
        ret = ccall(("gtk_tree_model_get_value", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}, Int32, Ptr{Ptr{GValue}}), instance, _iter, _column, m_value)
        _value = m_value[]
        _value = convert(GValue, _value, false)
        _value
    end
    function iter_children(instance::GObject, _parent::Maybe(GtkTreeIter))
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_tree_model_iter_children", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _parent)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function iter_has_child(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_iter_has_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function iter_n_children(instance::GObject, _iter::Maybe(GtkTreeIter))
        _iter = if _iter == nothing
                C_NULL
            else
                _iter
            end
        ret = ccall(("gtk_tree_model_iter_n_children", "libgtk-4.so.1"), Int32, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret
    end
    function iter_next(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_iter_next", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function iter_nth_child(instance::GObject, _parent::Maybe(GtkTreeIter), _n)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_tree_model_iter_nth_child", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}, Int32), instance, m_iter, _parent, _n)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function iter_parent(instance::GObject, _child::GtkTreeIter)
        m_iter = Ref{Ptr{GtkTreeIter}}()
        ret = ccall(("gtk_tree_model_iter_parent", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Ptr{GtkTreeIter}}, Ptr{GtkTreeIter}), instance, m_iter, _child)
        ret2 = convert(Bool, ret)
        _iter = m_iter[]
        _iter = convert(GtkTreeIter, _iter, false)
        (ret2, _iter)
    end
    function iter_previous(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_iter_previous", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        ret2 = convert(Bool, ret)
        ret2
    end
    function ref_node(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_ref_node", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        nothing
    end
    function row_changed(instance::GObject, _path::GtkTreePath, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_row_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}), instance, _path, _iter)
        nothing
    end
    function row_deleted(instance::GObject, _path::GtkTreePath)
        ret = ccall(("gtk_tree_model_row_deleted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}), instance, _path)
        nothing
    end
    function row_has_child_toggled(instance::GObject, _path::GtkTreePath, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_row_has_child_toggled", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}), instance, _path, _iter)
        nothing
    end
    function row_inserted(instance::GObject, _path::GtkTreePath, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_row_inserted", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}), instance, _path, _iter)
        nothing
    end
    function rows_reordered(instance::GObject, _path::GtkTreePath, _iter::Maybe(GtkTreeIter), _new_order)
        _iter = if _iter == nothing
                C_NULL
            else
                _iter
            end
        _new_order = convert(Vector{Int32}, _new_order)
        _length = length(_new_order)
        ret = ccall(("gtk_tree_model_rows_reordered_with_length", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreePath}, Ptr{GtkTreeIter}, Ptr{Int32}, Int32), instance, _path, _iter, _new_order, _length)
        nothing
    end
    function unref_node(instance::GObject, _iter::GtkTreeIter)
        ret = ccall(("gtk_tree_model_unref_node", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{GtkTreeIter}), instance, _iter)
        nothing
    end
    function get_sort_column_id(instance::GObject)
        m_sort_column_id = Ref{Int32}()
        m_order = Ref{Int32}()
        ret = ccall(("gtk_tree_sortable_get_sort_column_id", "libgtk-4.so.1"), Cint, (Ptr{GObject}, Ptr{Int32}, Ptr{Int32}), instance, m_sort_column_id, m_order)
        ret2 = convert(Bool, ret)
        _sort_column_id = m_sort_column_id[]
        _order = m_order[]
        _order = SortType(_order)
        (ret2, _sort_column_id, _order)
    end
    function has_default_sort_func(instance::GObject)
        ret = ccall(("gtk_tree_sortable_has_default_sort_func", "libgtk-4.so.1"), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_sort_func(instance::GObject, _sort_func::Function, _user_data::Maybe(Nothing), _destroy::Maybe(Function))
        _sort_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Int32 (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_tree_sortable_set_default_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _sort_func, _user_data, _destroy)
        nothing
    end
    function set_sort_column_id(instance::GObject, _sort_column_id, _order)
        ret = ccall(("gtk_tree_sortable_set_sort_column_id", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Int32), instance, _sort_column_id, _order)
        nothing
    end
    function set_sort_func(instance::GObject, _sort_column_id, _sort_func::Function, _user_data::Maybe(Nothing), _destroy::Maybe(Function))
        _sort_func = begin
                @cfunction $(QuoteNode(:($(Expr(:$, :name))))) Int32 (Ptr{GObject}, Ptr{GtkTreeIter}, Ptr{GtkTreeIter}, Ptr{Nothing})
            end
        _user_data = if _user_data == nothing
                C_NULL
            else
                _user_data
            end
        _destroy = if _destroy == nothing
                C_NULL
            else
                _destroy
            end
        ret = ccall(("gtk_tree_sortable_set_sort_func", "libgtk-4.so.1"), Nothing, (Ptr{GObject}, Int32, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}), instance, _sort_column_id, _sort_func, _user_data, _destroy)
        nothing
    end
    function sort_column_changed(instance::GObject)
        ret = ccall(("gtk_tree_sortable_sort_column_changed", "libgtk-4.so.1"), Nothing, (Ptr{GObject},), instance)
        nothing
    end
end))
end
