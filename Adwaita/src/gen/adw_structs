quote
$(Expr(:toplevel, quote
    const gboxed_types = Any[]
    begin
        mutable struct AdwSpringParams <: GBoxed
            handle::Ptr{AdwSpringParams}
            begin
                (GLib.g_type(::Type{T}) where T <: AdwSpringParams) = begin
                        ccall(("adw_spring_params_get_type", libadwaita), GType, ())
                    end
                function AdwSpringParams(ref::Ptr{T}, own::Bool = false) where T <: GBoxed
                    x = new(ref)
                    if own
                        finalizer(x) do x
                            GLib.delboxed(x)
                        end
                    end
                    x
                end
                push!(gboxed_types, AdwSpringParams)
            end
        end
        const AdwSpringParamsLike = AdwSpringParams
    end
    gboxed_cache_init() = begin
            append!(GLib.gboxed_types, gboxed_types)
        end
    GLib.@Giface AdwSwipeable libadwaita adw_swipeable_get_type
    const gtype_wrapper_cache = Dict{Symbol, Type}()
    GLib.@Gobject AdwDialog GtkWidget libadwaita adw_dialog_get_type
    begin
        function GLib.signalnames(::Type{AdwDialog})
            vcat([:close_attempt, :closed], signalnames(supertype(AdwDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :closed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :close_attempt => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwAboutDialog AdwDialog libadwaita adw_about_dialog_get_type
    begin
        function GLib.signalnames(::Type{AdwAboutDialog})
            vcat([:activate_link], signalnames(supertype(AdwAboutDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :activate_link => (:Cint, [:Cstring]), :unrealize => (:Nothing, Any[]), :closed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :close_attempt => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwAboutDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwAboutDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwWindow GtkWindow libadwaita adw_window_get_type
    begin
        function GLib.signalnames(::Type{AdwWindow})
            signalnames(supertype(AdwWindow))
        end
    end
    GLib.@Gobject AdwAboutWindow AdwWindow libadwaita adw_about_window_get_type
    begin
        function GLib.signalnames(::Type{AdwAboutWindow})
            vcat([:activate_link], signalnames(supertype(AdwAboutWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :activate_link => (:Cint, [:Cstring]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwAboutWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwAboutWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwPreferencesRow GtkListBoxRow libadwaita adw_preferences_row_get_type
    begin
        function GLib.signalnames(::Type{AdwPreferencesRow})
            signalnames(supertype(AdwPreferencesRow))
        end
    end
    GLib.@Gobject AdwActionRow AdwPreferencesRow libadwaita adw_action_row_get_type
    begin
        function GLib.signalnames(::Type{AdwActionRow})
            vcat([:activated], signalnames(supertype(AdwActionRow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activated => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwActionRow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwActionRow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwAlertDialog AdwDialog libadwaita adw_alert_dialog_get_type
    begin
        function GLib.signalnames(::Type{AdwAlertDialog})
            vcat([:response], signalnames(supertype(AdwAlertDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :closed => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :close_attempt => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :response => (:Nothing, [:Cstring]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwAlertDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwAlertDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwAnimation GObject libadwaita adw_animation_get_type
    begin
        function GLib.signalnames(::Type{AdwAnimation})
            vcat([:done], signalnames(supertype(AdwAnimation)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :done => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwAnimation
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwAnimation
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwAnimationTarget GObject libadwaita adw_animation_target_get_type
    begin
        function GLib.signalnames(::Type{AdwAnimationTarget})
            signalnames(supertype(AdwAnimationTarget))
        end
    end
    GLib.@Gobject AdwApplication GtkApplication libadwaita adw_application_get_type
    begin
        function GLib.signalnames(::Type{AdwApplication})
            vcat([:action_added, :action_enabled_changed, :action_removed, :action_state_changed], signalnames(supertype(AdwApplication)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :startup => (:Nothing, Any[]), :command_line => (:Int32, Expr[:(Ptr{GObject})]), :open => (:Nothing, Any[:(Ptr{Ptr{GObject}}), :Int32, :Cstring]), :window_removed => (:Nothing, Expr[:(Ptr{GObject})]), :shutdown => (:Nothing, Any[]), :name_lost => (:Cint, Any[]), :window_added => (:Nothing, Expr[:(Ptr{GObject})]), :activate => (:Nothing, Any[]), :handle_local_options => (:Int32, [:GVariantDict]), :query_end => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwApplication
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwApplication
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwApplicationWindow GtkApplicationWindow libadwaita adw_application_window_get_type
    begin
        function GLib.signalnames(::Type{AdwApplicationWindow})
            vcat([:action_added, :action_enabled_changed, :action_removed, :action_state_changed], signalnames(supertype(AdwApplicationWindow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwApplicationWindow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwApplicationWindow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwAvatar GtkWidget libadwaita adw_avatar_get_type
    begin
        function GLib.signalnames(::Type{AdwAvatar})
            signalnames(supertype(AdwAvatar))
        end
    end
    GLib.@Gobject AdwBanner GtkWidget libadwaita adw_banner_get_type
    begin
        function GLib.signalnames(::Type{AdwBanner})
            vcat([:button_clicked], signalnames(supertype(AdwBanner)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :button_clicked => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwBanner
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwBanner
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwBin GtkWidget libadwaita adw_bin_get_type
    begin
        function GLib.signalnames(::Type{AdwBin})
            signalnames(supertype(AdwBin))
        end
    end
    GLib.@Gobject AdwBreakpointBin GtkWidget libadwaita adw_breakpoint_bin_get_type
    begin
        function GLib.signalnames(::Type{AdwBreakpointBin})
            signalnames(supertype(AdwBreakpointBin))
        end
    end
    GLib.@Gobject AdwButtonContent GtkWidget libadwaita adw_button_content_get_type
    begin
        function GLib.signalnames(::Type{AdwButtonContent})
            signalnames(supertype(AdwButtonContent))
        end
    end
    GLib.@Gobject AdwCallbackAnimationTarget AdwAnimationTarget libadwaita adw_callback_animation_target_get_type
    begin
        function GLib.signalnames(::Type{AdwCallbackAnimationTarget})
            signalnames(supertype(AdwCallbackAnimationTarget))
        end
    end
    GLib.@Gobject AdwCarousel GtkWidget libadwaita adw_carousel_get_type
    begin
        function GLib.signalnames(::Type{AdwCarousel})
            vcat([:page_changed], signalnames(supertype(AdwCarousel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :page_changed => (:Nothing, [:UInt32]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwCarousel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwCarousel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwCarouselIndicatorDots GtkWidget libadwaita adw_carousel_indicator_dots_get_type
    begin
        function GLib.signalnames(::Type{AdwCarouselIndicatorDots})
            signalnames(supertype(AdwCarouselIndicatorDots))
        end
    end
    GLib.@Gobject AdwCarouselIndicatorLines GtkWidget libadwaita adw_carousel_indicator_lines_get_type
    begin
        function GLib.signalnames(::Type{AdwCarouselIndicatorLines})
            signalnames(supertype(AdwCarouselIndicatorLines))
        end
    end
    GLib.@Gobject AdwClamp GtkWidget libadwaita adw_clamp_get_type
    begin
        function GLib.signalnames(::Type{AdwClamp})
            signalnames(supertype(AdwClamp))
        end
    end
    GLib.@Gobject AdwClampLayout GtkLayoutManager libadwaita adw_clamp_layout_get_type
    begin
        function GLib.signalnames(::Type{AdwClampLayout})
            signalnames(supertype(AdwClampLayout))
        end
    end
    GLib.@Gobject AdwClampScrollable GtkWidget libadwaita adw_clamp_scrollable_get_type
    begin
        function GLib.signalnames(::Type{AdwClampScrollable})
            signalnames(supertype(AdwClampScrollable))
        end
    end
    GLib.@Gobject AdwComboRow AdwActionRow libadwaita adw_combo_row_get_type
    begin
        function GLib.signalnames(::Type{AdwComboRow})
            signalnames(supertype(AdwComboRow))
        end
    end
    GLib.@Gobject AdwEntryRow AdwPreferencesRow libadwaita adw_entry_row_get_type
    begin
        function GLib.signalnames(::Type{AdwEntryRow})
            vcat([:apply, :entry_activated, :changed, :delete_text, :insert_text], signalnames(supertype(AdwEntryRow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :entry_activated => (:Nothing, Any[]), :apply => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwEntryRow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwEntryRow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwEnumListItem GObject libadwaita adw_enum_list_item_get_type
    begin
        function GLib.signalnames(::Type{AdwEnumListItem})
            signalnames(supertype(AdwEnumListItem))
        end
    end
    GLib.@Gobject AdwEnumListModel GObject libadwaita adw_enum_list_model_get_type
    begin
        function GLib.signalnames(::Type{AdwEnumListModel})
            vcat([:items_changed], signalnames(supertype(AdwEnumListModel)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwEnumListModel
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwEnumListModel
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwExpanderRow AdwPreferencesRow libadwaita adw_expander_row_get_type
    begin
        function GLib.signalnames(::Type{AdwExpanderRow})
            signalnames(supertype(AdwExpanderRow))
        end
    end
    GLib.@Gobject AdwFlap GtkWidget libadwaita adw_flap_get_type
    begin
        function GLib.signalnames(::Type{AdwFlap})
            signalnames(supertype(AdwFlap))
        end
    end
    GLib.@Gobject AdwHeaderBar GtkWidget libadwaita adw_header_bar_get_type
    begin
        function GLib.signalnames(::Type{AdwHeaderBar})
            signalnames(supertype(AdwHeaderBar))
        end
    end
    GLib.@Gobject AdwLeaflet GtkWidget libadwaita adw_leaflet_get_type
    begin
        function GLib.signalnames(::Type{AdwLeaflet})
            signalnames(supertype(AdwLeaflet))
        end
    end
    GLib.@Gobject AdwLeafletPage GObject libadwaita adw_leaflet_page_get_type
    begin
        function GLib.signalnames(::Type{AdwLeafletPage})
            signalnames(supertype(AdwLeafletPage))
        end
    end
    GLib.@Gobject AdwMessageDialog GtkWindow libadwaita adw_message_dialog_get_type
    begin
        function GLib.signalnames(::Type{AdwMessageDialog})
            vcat([:response], signalnames(supertype(AdwMessageDialog)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :keys_changed => (:Nothing, Any[]), :close_request => (:Cint, Any[]), :enable_debugging => (:Cint, [:Cint]), :unrealize => (:Nothing, Any[]), :activate_focus => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activate_default => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :response => (:Nothing, [:Cstring]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwMessageDialog
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwMessageDialog
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwNavigationPage GtkWidget libadwaita adw_navigation_page_get_type
    begin
        function GLib.signalnames(::Type{AdwNavigationPage})
            vcat([:hidden, :hiding, :showing, :shown], signalnames(supertype(AdwNavigationPage)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :showing => (:Nothing, Any[]), :shown => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :hidden => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :hiding => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwNavigationPage
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwNavigationPage
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwNavigationSplitView GtkWidget libadwaita adw_navigation_split_view_get_type
    begin
        function GLib.signalnames(::Type{AdwNavigationSplitView})
            signalnames(supertype(AdwNavigationSplitView))
        end
    end
    GLib.@Gobject AdwNavigationView GtkWidget libadwaita adw_navigation_view_get_type
    begin
        function GLib.signalnames(::Type{AdwNavigationView})
            vcat([:get_next_page, :popped, :pushed, :replaced], signalnames(supertype(AdwNavigationView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :pushed => (:Nothing, Any[]), :get_next_page => (:(Ptr{GObject}), Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :popped => (:Nothing, Expr[:(Ptr{GObject})]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :replaced => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwNavigationView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwNavigationView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwOverlaySplitView GtkWidget libadwaita adw_overlay_split_view_get_type
    begin
        function GLib.signalnames(::Type{AdwOverlaySplitView})
            signalnames(supertype(AdwOverlaySplitView))
        end
    end
    GLib.@Gobject AdwPasswordEntryRow AdwEntryRow libadwaita adw_password_entry_row_get_type
    begin
        function GLib.signalnames(::Type{AdwPasswordEntryRow})
            vcat([:changed, :delete_text, :insert_text], signalnames(supertype(AdwPasswordEntryRow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :entry_activated => (:Nothing, Any[]), :apply => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwPasswordEntryRow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwPasswordEntryRow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwPreferencesDialog AdwDialog libadwaita adw_preferences_dialog_get_type
    begin
        function GLib.signalnames(::Type{AdwPreferencesDialog})
            signalnames(supertype(AdwPreferencesDialog))
        end
    end
    GLib.@Gobject AdwPreferencesGroup GtkWidget libadwaita adw_preferences_group_get_type
    begin
        function GLib.signalnames(::Type{AdwPreferencesGroup})
            signalnames(supertype(AdwPreferencesGroup))
        end
    end
    GLib.@Gobject AdwPreferencesPage GtkWidget libadwaita adw_preferences_page_get_type
    begin
        function GLib.signalnames(::Type{AdwPreferencesPage})
            signalnames(supertype(AdwPreferencesPage))
        end
    end
    GLib.@Gobject AdwPreferencesWindow AdwWindow libadwaita adw_preferences_window_get_type
    begin
        function GLib.signalnames(::Type{AdwPreferencesWindow})
            signalnames(supertype(AdwPreferencesWindow))
        end
    end
    GLib.@Gobject AdwPropertyAnimationTarget AdwAnimationTarget libadwaita adw_property_animation_target_get_type
    begin
        function GLib.signalnames(::Type{AdwPropertyAnimationTarget})
            signalnames(supertype(AdwPropertyAnimationTarget))
        end
    end
    GLib.@Gobject AdwSpinRow AdwActionRow libadwaita adw_spin_row_get_type
    begin
        function GLib.signalnames(::Type{AdwSpinRow})
            vcat([:input, :output, :wrapped, :changed, :delete_text, :insert_text], signalnames(supertype(AdwSpinRow)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :input => (:Int32, [:Float64]), :wrapped => (:Nothing, Any[]), :output => (:Cint, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :activated => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwSpinRow
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwSpinRow
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwSplitButton GtkWidget libadwaita adw_split_button_get_type
    begin
        function GLib.signalnames(::Type{AdwSplitButton})
            vcat([:activate, :clicked], signalnames(supertype(AdwSplitButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :clicked => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwSplitButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwSplitButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwSpringAnimation AdwAnimation libadwaita adw_spring_animation_get_type
    begin
        function GLib.signalnames(::Type{AdwSpringAnimation})
            signalnames(supertype(AdwSpringAnimation))
        end
    end
    GLib.@Gobject AdwSqueezer GtkWidget libadwaita adw_squeezer_get_type
    begin
        function GLib.signalnames(::Type{AdwSqueezer})
            signalnames(supertype(AdwSqueezer))
        end
    end
    GLib.@Gobject AdwSqueezerPage GObject libadwaita adw_squeezer_page_get_type
    begin
        function GLib.signalnames(::Type{AdwSqueezerPage})
            signalnames(supertype(AdwSqueezerPage))
        end
    end
    GLib.@Gobject AdwStatusPage GtkWidget libadwaita adw_status_page_get_type
    begin
        function GLib.signalnames(::Type{AdwStatusPage})
            signalnames(supertype(AdwStatusPage))
        end
    end
    GLib.@Gobject AdwStyleManager GObject libadwaita adw_style_manager_get_type
    begin
        function GLib.signalnames(::Type{AdwStyleManager})
            signalnames(supertype(AdwStyleManager))
        end
    end
    GLib.@Gobject AdwSwipeTracker GObject libadwaita adw_swipe_tracker_get_type
    begin
        function GLib.signalnames(::Type{AdwSwipeTracker})
            vcat([:begin_swipe, :end_swipe, :prepare, :update_swipe], signalnames(supertype(AdwSwipeTracker)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :end_swipe => (:Nothing, [:Float64, :Float64]), :prepare => (:Nothing, [:UInt32]), :begin_swipe => (:Nothing, Any[]), :update_swipe => (:Nothing, [:Float64]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwSwipeTracker
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwSwipeTracker
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwSwitchRow AdwActionRow libadwaita adw_switch_row_get_type
    begin
        function GLib.signalnames(::Type{AdwSwitchRow})
            signalnames(supertype(AdwSwitchRow))
        end
    end
    GLib.@Gobject AdwTabBar GtkWidget libadwaita adw_tab_bar_get_type
    begin
        function GLib.signalnames(::Type{AdwTabBar})
            vcat([:extra_drag_drop, :extra_drag_value], signalnames(supertype(AdwTabBar)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :extra_drag_drop => (:Cint, Any[:(Ptr{GObject}), :_GValue]), :unrealize => (:Nothing, Any[]), :extra_drag_value => (:UInt32, Any[:(Ptr{GObject}), :_GValue]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwTabBar
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwTabBar
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwTabButton GtkWidget libadwaita adw_tab_button_get_type
    begin
        function GLib.signalnames(::Type{AdwTabButton})
            vcat([:activate, :clicked], signalnames(supertype(AdwTabButton)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :unrealize => (:Nothing, Any[]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :clicked => (:Nothing, Any[]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :activate => (:Nothing, Any[]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwTabButton
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwTabButton
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwTabOverview GtkWidget libadwaita adw_tab_overview_get_type
    begin
        function GLib.signalnames(::Type{AdwTabOverview})
            vcat([:create_tab, :extra_drag_drop, :extra_drag_value], signalnames(supertype(AdwTabOverview)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :extra_drag_drop => (:Cint, Any[:(Ptr{GObject}), :_GValue]), :create_tab => (:(Ptr{GObject}), Any[]), :unrealize => (:Nothing, Any[]), :extra_drag_value => (:UInt32, Any[:(Ptr{GObject}), :_GValue]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwTabOverview
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwTabOverview
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwTabPage GObject libadwaita adw_tab_page_get_type
    begin
        function GLib.signalnames(::Type{AdwTabPage})
            signalnames(supertype(AdwTabPage))
        end
    end
    GLib.@Gobject AdwTabView GtkWidget libadwaita adw_tab_view_get_type
    begin
        function GLib.signalnames(::Type{AdwTabView})
            vcat([:close_page, :create_window, :indicator_activated, :page_attached, :page_detached, :page_reordered, :setup_menu], signalnames(supertype(AdwTabView)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :state_flags_changed => (:Nothing, [:UInt32]), :map => (:Nothing, Any[]), :page_attached => (:Nothing, Any[:(Ptr{GObject}), :Int32]), :page_reordered => (:Nothing, Any[:(Ptr{GObject}), :Int32]), :page_detached => (:Nothing, Any[:(Ptr{GObject}), :Int32]), :unrealize => (:Nothing, Any[]), :create_window => (:(Ptr{GObject}), Any[]), :setup_menu => (:Nothing, Expr[:(Ptr{GObject})]), :show => (:Nothing, Any[]), :unmap => (:Nothing, Any[]), :indicator_activated => (:Nothing, Expr[:(Ptr{GObject})]), :hide => (:Nothing, Any[]), :query_tooltip => (:Cint, Any[:Int32, :Int32, :Cint, :(Ptr{GObject})]), :move_focus => (:Nothing, [:UInt32]), :mnemonic_activate => (:Cint, [:Cint]), :direction_changed => (:Nothing, [:UInt32]), :close_page => (:Cint, Expr[:(Ptr{GObject})]), :destroy => (:Nothing, Any[]), :keynav_failed => (:Cint, [:UInt32]), :realize => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwTabView
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwTabView
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwTimedAnimation AdwAnimation libadwaita adw_timed_animation_get_type
    begin
        function GLib.signalnames(::Type{AdwTimedAnimation})
            signalnames(supertype(AdwTimedAnimation))
        end
    end
    GLib.@Gobject AdwToast GObject libadwaita adw_toast_get_type
    begin
        function GLib.signalnames(::Type{AdwToast})
            vcat([:button_clicked, :dismissed], signalnames(supertype(AdwToast)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]), :dismissed => (:Nothing, Any[]), :button_clicked => (:Nothing, Any[]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwToast
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwToast
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwToastOverlay GtkWidget libadwaita adw_toast_overlay_get_type
    begin
        function GLib.signalnames(::Type{AdwToastOverlay})
            signalnames(supertype(AdwToastOverlay))
        end
    end
    GLib.@Gobject AdwToolbarView GtkWidget libadwaita adw_toolbar_view_get_type
    begin
        function GLib.signalnames(::Type{AdwToolbarView})
            signalnames(supertype(AdwToolbarView))
        end
    end
    GLib.@Gobject AdwViewStack GtkWidget libadwaita adw_view_stack_get_type
    begin
        function GLib.signalnames(::Type{AdwViewStack})
            signalnames(supertype(AdwViewStack))
        end
    end
    GLib.@Gobject AdwViewStackPage GObject libadwaita adw_view_stack_page_get_type
    begin
        function GLib.signalnames(::Type{AdwViewStackPage})
            signalnames(supertype(AdwViewStackPage))
        end
    end
    GLib.@Gobject AdwViewStackPages GObject libadwaita adw_view_stack_pages_get_type
    begin
        function GLib.signalnames(::Type{AdwViewStackPages})
            vcat([:items_changed, :selection_changed], signalnames(supertype(AdwViewStackPages)))
        end
        let d = Dict{Symbol, Tuple{Any, Any}}(:notify => (:Nothing, Any[:(Ptr{GParamSpec})]))
            function GLib.signal_return_type(::Type{T}, name::Symbol) where T <: AdwViewStackPages
                eval((d[name])[1])
            end
            function GLib.signal_argument_types(::Type{T}, name::Symbol) where T <: AdwViewStackPages
                Tuple(eval.((d[name])[2]))
            end
        end
    end
    GLib.@Gobject AdwViewSwitcher GtkWidget libadwaita adw_view_switcher_get_type
    begin
        function GLib.signalnames(::Type{AdwViewSwitcher})
            signalnames(supertype(AdwViewSwitcher))
        end
    end
    GLib.@Gobject AdwViewSwitcherBar GtkWidget libadwaita adw_view_switcher_bar_get_type
    begin
        function GLib.signalnames(::Type{AdwViewSwitcherBar})
            signalnames(supertype(AdwViewSwitcherBar))
        end
    end
    GLib.@Gobject AdwViewSwitcherTitle GtkWidget libadwaita adw_view_switcher_title_get_type
    begin
        function GLib.signalnames(::Type{AdwViewSwitcherTitle})
            signalnames(supertype(AdwViewSwitcherTitle))
        end
    end
    GLib.@Gobject AdwWindowTitle GtkWidget libadwaita adw_window_title_get_type
    begin
        function GLib.signalnames(::Type{AdwWindowTitle})
            signalnames(supertype(AdwWindowTitle))
        end
    end
    begin
        gtype_wrapper_cache_init() = begin
                merge!(GLib.gtype_wrappers, gtype_wrapper_cache)
            end
    end
    function AdwAboutDialog(; kwargs...)
        obj = G_.AboutDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwAboutDialog(_resource_path::Union{AbstractString, Symbol}, _release_notes_version::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.AboutDialog_new_from_appdata(_resource_path, _release_notes_version)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwAboutWindow(; kwargs...)
        obj = G_.AboutWindow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwAboutWindow(_resource_path::Union{AbstractString, Symbol}, _release_notes_version::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.AboutWindow_new_from_appdata(_resource_path, _release_notes_version)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwActionRow(; kwargs...)
        obj = G_.ActionRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwAlertDialog(_heading::Maybe(Union{AbstractString, Symbol}), _body::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.AlertDialog_new(_heading, _body)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwApplication(_application_id::Maybe(Union{AbstractString, Symbol}), _flags; kwargs...)
        obj = G_.Application_new(_application_id, _flags)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwApplicationWindow(_app::GtkApplication; kwargs...)
        obj = G_.ApplicationWindow_new(_app)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwAvatar(_size::Integer, _text::Maybe(Union{AbstractString, Symbol}), _show_initials::Bool; kwargs...)
        obj = G_.Avatar_new(_size, _text, _show_initials)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwBanner(_title::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.Banner_new(_title)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwBin(; kwargs...)
        obj = G_.Bin_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwBreakpointBin(; kwargs...)
        obj = G_.BreakpointBin_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwButtonContent(; kwargs...)
        obj = G_.ButtonContent_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwCallbackAnimationTarget(_callback::Function, _destroy::Function)
        G_.CallbackAnimationTarget_new(_callback, _destroy)
    end
    function AdwCarousel(; kwargs...)
        obj = G_.Carousel_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwCarouselIndicatorDots(; kwargs...)
        obj = G_.CarouselIndicatorDots_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwCarouselIndicatorLines(; kwargs...)
        obj = G_.CarouselIndicatorLines_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwClamp(; kwargs...)
        obj = G_.Clamp_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwClampLayout(; kwargs...)
        obj = G_.ClampLayout_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwClampScrollable(; kwargs...)
        obj = G_.ClampScrollable_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwComboRow(; kwargs...)
        obj = G_.ComboRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwDialog(; kwargs...)
        obj = G_.Dialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwEntryRow(; kwargs...)
        obj = G_.EntryRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwEnumListModel(_enum_type::Integer; kwargs...)
        obj = G_.EnumListModel_new(_enum_type)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwExpanderRow(; kwargs...)
        obj = G_.ExpanderRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwFlap(; kwargs...)
        obj = G_.Flap_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwHeaderBar(; kwargs...)
        obj = G_.HeaderBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwLeaflet(; kwargs...)
        obj = G_.Leaflet_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwMessageDialog(_parent::Maybe(GtkWindow), _heading::Maybe(Union{AbstractString, Symbol}), _body::Maybe(Union{AbstractString, Symbol}); kwargs...)
        obj = G_.MessageDialog_new(_parent, _heading, _body)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwNavigationPage(_child::GtkWidget, _title::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.NavigationPage_new(_child, _title)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwNavigationPage(_child::GtkWidget, _title::Union{AbstractString, Symbol}, _tag::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.NavigationPage_new_with_tag(_child, _title, _tag)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwNavigationSplitView(; kwargs...)
        obj = G_.NavigationSplitView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwNavigationView(; kwargs...)
        obj = G_.NavigationView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwOverlaySplitView(; kwargs...)
        obj = G_.OverlaySplitView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPasswordEntryRow()
        G_.PasswordEntryRow_new()
    end
    function AdwPreferencesDialog(; kwargs...)
        obj = G_.PreferencesDialog_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPreferencesGroup(; kwargs...)
        obj = G_.PreferencesGroup_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPreferencesPage(; kwargs...)
        obj = G_.PreferencesPage_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPreferencesRow(; kwargs...)
        obj = G_.PreferencesRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPreferencesWindow(; kwargs...)
        obj = G_.PreferencesWindow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPropertyAnimationTarget(_object::GObject, _property_name::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.PropertyAnimationTarget_new(_object, _property_name)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwPropertyAnimationTarget(_object::GObject, _pspec::GParam; kwargs...)
        obj = G_.PropertyAnimationTarget_new_for_pspec(_object, _pspec)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSpinRow(_adjustment::Maybe(GtkAdjustment), _climb_rate::Real, _digits::Integer; kwargs...)
        obj = G_.SpinRow_new(_adjustment, _climb_rate, _digits)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSpinRow(_min::Real, _max::Real, _step::Real; kwargs...)
        obj = G_.SpinRow_new_with_range(_min, _max, _step)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSplitButton(; kwargs...)
        obj = G_.SplitButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSpringAnimation(_widget::GtkWidget, _from::Real, _to::Real, _spring_params::AdwSpringParams, _target::AdwAnimationTarget; kwargs...)
        obj = G_.SpringAnimation_new(_widget, _from, _to, _spring_params, _target)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSqueezer(; kwargs...)
        obj = G_.Squeezer_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwStatusPage(; kwargs...)
        obj = G_.StatusPage_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSwipeTracker(_swipeable::AdwSwipeable; kwargs...)
        obj = G_.SwipeTracker_new(_swipeable)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwSwitchRow(; kwargs...)
        obj = G_.SwitchRow_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwTabBar(; kwargs...)
        obj = G_.TabBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwTabButton(; kwargs...)
        obj = G_.TabButton_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwTabOverview(; kwargs...)
        obj = G_.TabOverview_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwTabView(; kwargs...)
        obj = G_.TabView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwTimedAnimation(_widget::GtkWidget, _from::Real, _to::Real, _duration::Integer, _target::AdwAnimationTarget; kwargs...)
        obj = G_.TimedAnimation_new(_widget, _from, _to, _duration, _target)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwToast(_title::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.Toast_new(_title)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwToastOverlay(; kwargs...)
        obj = G_.ToastOverlay_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwToolbarView(; kwargs...)
        obj = G_.ToolbarView_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwViewStack(; kwargs...)
        obj = G_.ViewStack_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwViewSwitcher(; kwargs...)
        obj = G_.ViewSwitcher_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwViewSwitcherBar(; kwargs...)
        obj = G_.ViewSwitcherBar_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwViewSwitcherTitle(; kwargs...)
        obj = G_.ViewSwitcherTitle_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwWindow(; kwargs...)
        obj = G_.Window_new()
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    function AdwWindowTitle(_title::Union{AbstractString, Symbol}, _subtitle::Union{AbstractString, Symbol}; kwargs...)
        obj = G_.WindowTitle_new(_title, _subtitle)
        GLib.setproperties!(obj; kwargs...)
        obj
    end
    export AdwSpringParams, AdwSwipeable, AdwAboutDialog, AdwAboutDialogLeaf, AdwAboutWindow, AdwAboutWindowLeaf, AdwActionRow, AdwActionRowLeaf, AdwAlertDialog, AdwAlertDialogLeaf, AdwAnimation, AdwAnimationTarget, AdwApplication, AdwApplicationLeaf, AdwApplicationWindow, AdwApplicationWindowLeaf, AdwAvatar, AdwAvatarLeaf, AdwBanner, AdwBannerLeaf, AdwBin, AdwBinLeaf, AdwBreakpointBin, AdwBreakpointBinLeaf, AdwButtonContent, AdwButtonContentLeaf, AdwCallbackAnimationTarget, AdwCallbackAnimationTargetLeaf, AdwCarousel, AdwCarouselLeaf, AdwCarouselIndicatorDots, AdwCarouselIndicatorDotsLeaf, AdwCarouselIndicatorLines, AdwCarouselIndicatorLinesLeaf, AdwClamp, AdwClampLeaf, AdwClampLayout, AdwClampLayoutLeaf, AdwClampScrollable, AdwClampScrollableLeaf, AdwComboRow, AdwComboRowLeaf, AdwDialog, AdwDialogLeaf, AdwEntryRow, AdwEntryRowLeaf, AdwEnumListItem, AdwEnumListItemLeaf, AdwEnumListModel, AdwEnumListModelLeaf, AdwExpanderRow, AdwExpanderRowLeaf, AdwFlap, AdwFlapLeaf, AdwHeaderBar, AdwHeaderBarLeaf, AdwLeaflet, AdwLeafletLeaf, AdwLeafletPage, AdwLeafletPageLeaf, AdwMessageDialog, AdwMessageDialogLeaf, AdwNavigationPage, AdwNavigationPageLeaf, AdwNavigationSplitView, AdwNavigationSplitViewLeaf, AdwNavigationView, AdwNavigationViewLeaf, AdwOverlaySplitView, AdwOverlaySplitViewLeaf, AdwPasswordEntryRow, AdwPasswordEntryRowLeaf, AdwPreferencesDialog, AdwPreferencesDialogLeaf, AdwPreferencesGroup, AdwPreferencesGroupLeaf, AdwPreferencesPage, AdwPreferencesPageLeaf, AdwPreferencesRow, AdwPreferencesRowLeaf, AdwPreferencesWindow, AdwPreferencesWindowLeaf, AdwPropertyAnimationTarget, AdwPropertyAnimationTargetLeaf, AdwSpinRow, AdwSpinRowLeaf, AdwSplitButton, AdwSplitButtonLeaf, AdwSpringAnimation, AdwSpringAnimationLeaf, AdwSqueezer, AdwSqueezerLeaf, AdwSqueezerPage, AdwSqueezerPageLeaf, AdwStatusPage, AdwStatusPageLeaf, AdwStyleManager, AdwStyleManagerLeaf, AdwSwipeTracker, AdwSwipeTrackerLeaf, AdwSwitchRow, AdwSwitchRowLeaf, AdwTabBar, AdwTabBarLeaf, AdwTabButton, AdwTabButtonLeaf, AdwTabOverview, AdwTabOverviewLeaf, AdwTabPage, AdwTabPageLeaf, AdwTabView, AdwTabViewLeaf, AdwTimedAnimation, AdwTimedAnimationLeaf, AdwToast, AdwToastLeaf, AdwToastOverlay, AdwToastOverlayLeaf, AdwToolbarView, AdwToolbarViewLeaf, AdwViewStack, AdwViewStackLeaf, AdwViewStackPage, AdwViewStackPageLeaf, AdwViewStackPages, AdwViewStackPagesLeaf, AdwViewSwitcher, AdwViewSwitcherLeaf, AdwViewSwitcherBar, AdwViewSwitcherBarLeaf, AdwViewSwitcherTitle, AdwViewSwitcherTitleLeaf, AdwWindow, AdwWindowLeaf, AdwWindowTitle, AdwWindowTitleLeaf
end))
end
