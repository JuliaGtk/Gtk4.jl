quote
$(Expr(:toplevel, quote
    function SpringParams_new(_damping_ratio::Real, _mass::Real, _stiffness::Real)
        ret = ccall(("adw_spring_params_new", libadwaita), Ptr{AdwSpringParams}, (Float64, Float64, Float64), _damping_ratio, _mass, _stiffness)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function SpringParams_new_full(_damping::Real, _mass::Real, _stiffness::Real)
        ret = ccall(("adw_spring_params_new_full", libadwaita), Ptr{AdwSpringParams}, (Float64, Float64, Float64), _damping, _mass, _stiffness)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function get_damping(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_get_damping", libadwaita), Float64, (Ptr{AdwSpringParams},), instance)
        ret
    end
    function get_damping_ratio(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_get_damping_ratio", libadwaita), Float64, (Ptr{AdwSpringParams},), instance)
        ret
    end
    function get_mass(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_get_mass", libadwaita), Float64, (Ptr{AdwSpringParams},), instance)
        ret
    end
    function get_stiffness(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_get_stiffness", libadwaita), Float64, (Ptr{AdwSpringParams},), instance)
        ret
    end
    function ref(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_ref", libadwaita), Ptr{AdwSpringParams}, (Ptr{AdwSpringParams},), instance)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function unref(instance::AdwSpringParams)
        ret = ccall(("adw_spring_params_unref", libadwaita), Nothing, (Ptr{AdwSpringParams},), instance)
        nothing
    end
    function AboutWindow_new()
        ret = ccall(("adw_about_window_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwAboutWindowLeaf(ret, false)
        ret2
    end
    function AboutWindow_new_from_appdata(_resource_path::Union{AbstractString, Symbol}, _release_notes_version::Maybe(Union{AbstractString, Symbol}))
        _release_notes_version_maybe = nothing_to_null(_release_notes_version)
        ret = ccall(("adw_about_window_new_from_appdata", libadwaita), Ptr{GObject}, (Cstring, Cstring), _resource_path, _release_notes_version_maybe)
        ret2 = AdwAboutWindowLeaf(ret, false)
        ret2
    end
    function add_acknowledgement_section(instance::AdwAboutWindow, _name::Maybe(Union{AbstractString, Symbol}), _people)
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_about_window_add_acknowledgement_section", libadwaita), Nothing, (Ptr{GObject}, Cstring, Ptr{Cstring}), instance, _name_maybe, _people)
        nothing
    end
    function add_credit_section(instance::AdwAboutWindow, _name::Maybe(Union{AbstractString, Symbol}), _people)
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_about_window_add_credit_section", libadwaita), Nothing, (Ptr{GObject}, Cstring, Ptr{Cstring}), instance, _name_maybe, _people)
        nothing
    end
    function add_legal_section(instance::AdwAboutWindow, _title::Union{AbstractString, Symbol}, _copyright::Maybe(Union{AbstractString, Symbol}), _license_type, _license::Maybe(Union{AbstractString, Symbol}))
        _copyright_maybe = nothing_to_null(_copyright)
        _license_maybe = nothing_to_null(_license)
        ret = ccall(("adw_about_window_add_legal_section", libadwaita), Nothing, (Ptr{GObject}, Cstring, Cstring, UInt32, Cstring), instance, _title, _copyright_maybe, _license_type, _license_maybe)
        nothing
    end
    function add_link(instance::AdwAboutWindow, _title::Union{AbstractString, Symbol}, _url::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_add_link", libadwaita), Nothing, (Ptr{GObject}, Cstring, Cstring), instance, _title, _url)
        nothing
    end
    function get_application_icon(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_application_icon", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_application_name(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_application_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_artists(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_artists", libadwaita), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                arrtemp = bytestring.(unsafe_wrap(Vector{Cstring}, ret, _len))
                arrtemp
            end
        ret2
    end
    function get_comments(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_comments", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_copyright(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_copyright", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_debug_info(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_debug_info", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_debug_info_filename(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_debug_info_filename", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_designers(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_designers", libadwaita), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                arrtemp = bytestring.(unsafe_wrap(Vector{Cstring}, ret, _len))
                arrtemp
            end
        ret2
    end
    function get_developer_name(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_developer_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_developers(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_developers", libadwaita), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                arrtemp = bytestring.(unsafe_wrap(Vector{Cstring}, ret, _len))
                arrtemp
            end
        ret2
    end
    function get_documenters(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_documenters", libadwaita), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret2 = begin
                _len = length_zt(ret)
                arrtemp = bytestring.(unsafe_wrap(Vector{Cstring}, ret, _len))
                arrtemp
            end
        ret2
    end
    function get_issue_url(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_issue_url", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_license(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_license", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_license_type(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_license_type", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = License(ret)
        ret2
    end
    function get_release_notes(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_release_notes", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_release_notes_version(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_release_notes_version", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_support_url(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_support_url", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_translator_credits(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_translator_credits", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_version(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_version", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_website(instance::AdwAboutWindow)
        ret = ccall(("adw_about_window_get_website", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function set_application_icon(instance::AdwAboutWindow, _application_icon::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_application_icon", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _application_icon)
        nothing
    end
    function set_application_name(instance::AdwAboutWindow, _application_name::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_application_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _application_name)
        nothing
    end
    function set_artists(instance::AdwAboutWindow, _artists)
        _artists_maybe = nothing_to_null(_artists)
        ret = ccall(("adw_about_window_set_artists", libadwaita), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _artists_maybe)
        nothing
    end
    function set_comments(instance::AdwAboutWindow, _comments::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_comments", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _comments)
        nothing
    end
    function set_copyright(instance::AdwAboutWindow, _copyright::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_copyright", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _copyright)
        nothing
    end
    function set_debug_info(instance::AdwAboutWindow, _debug_info::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_debug_info", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _debug_info)
        nothing
    end
    function set_debug_info_filename(instance::AdwAboutWindow, _filename::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_debug_info_filename", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _filename)
        nothing
    end
    function set_designers(instance::AdwAboutWindow, _designers)
        _designers_maybe = nothing_to_null(_designers)
        ret = ccall(("adw_about_window_set_designers", libadwaita), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _designers_maybe)
        nothing
    end
    function set_developer_name(instance::AdwAboutWindow, _developer_name::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_developer_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _developer_name)
        nothing
    end
    function set_developers(instance::AdwAboutWindow, _developers)
        _developers_maybe = nothing_to_null(_developers)
        ret = ccall(("adw_about_window_set_developers", libadwaita), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _developers_maybe)
        nothing
    end
    function set_documenters(instance::AdwAboutWindow, _documenters)
        _documenters_maybe = nothing_to_null(_documenters)
        ret = ccall(("adw_about_window_set_documenters", libadwaita), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _documenters_maybe)
        nothing
    end
    function set_issue_url(instance::AdwAboutWindow, _issue_url::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_issue_url", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _issue_url)
        nothing
    end
    function set_license(instance::AdwAboutWindow, _license::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_license", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _license)
        nothing
    end
    function set_license_type(instance::AdwAboutWindow, _license_type)
        ret = ccall(("adw_about_window_set_license_type", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _license_type)
        nothing
    end
    function set_release_notes(instance::AdwAboutWindow, _release_notes::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_release_notes", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _release_notes)
        nothing
    end
    function set_release_notes_version(instance::AdwAboutWindow, _version::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_release_notes_version", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _version)
        nothing
    end
    function set_support_url(instance::AdwAboutWindow, _support_url::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_support_url", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _support_url)
        nothing
    end
    function set_translator_credits(instance::AdwAboutWindow, _translator_credits::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_translator_credits", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _translator_credits)
        nothing
    end
    function set_version(instance::AdwAboutWindow, _version::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_version", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _version)
        nothing
    end
    function set_website(instance::AdwAboutWindow, _website::Union{AbstractString, Symbol})
        ret = ccall(("adw_about_window_set_website", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _website)
        nothing
    end
    function get_accessible_parent(instance::AdwAboutWindow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwAboutWindow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwAboutWindow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwAboutWindow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwAboutWindow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwAboutWindow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwAboutWindow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwAboutWindow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwAboutWindow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwAboutWindow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwAboutWindow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwAboutWindow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwAboutWindow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwAboutWindow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwAboutWindow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwAboutWindow)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_renderer(instance::AdwAboutWindow)
        get_renderer(GtkNative(instance))
    end
    function get_surface(instance::AdwAboutWindow)
        get_surface(GtkNative(instance))
    end
    function get_surface_transform(instance::AdwAboutWindow)
        get_surface_transform(GtkNative(instance))
    end
    function realize(instance::AdwAboutWindow)
        realize(GtkNative(instance))
    end
    function unrealize(instance::AdwAboutWindow)
        unrealize(GtkNative(instance))
    end
    function get_display(instance::AdwAboutWindow)
        get_display(GtkRoot(instance))
    end
    function get_focus(instance::AdwAboutWindow)
        get_focus(GtkRoot(instance))
    end
    function set_focus(instance::AdwAboutWindow, _focus::Maybe(GtkWidget))
        set_focus(GtkRoot(instance), _focus)
    end
    function ActionRow_new()
        ret = ccall(("adw_action_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwActionRowLeaf(ret, false)
        ret2
    end
    function activate(instance::AdwActionRow)
        ret = ccall(("adw_action_row_activate", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function add_prefix(instance::AdwActionRow, _widget::GtkWidget)
        ret = ccall(("adw_action_row_add_prefix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function add_suffix(instance::AdwActionRow, _widget::GtkWidget)
        ret = ccall(("adw_action_row_add_suffix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_activatable_widget(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_activatable_widget", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_icon_name(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_subtitle(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_subtitle", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_subtitle_lines(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_subtitle_lines", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_subtitle_selectable(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_subtitle_selectable", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title_lines(instance::AdwActionRow)
        ret = ccall(("adw_action_row_get_title_lines", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function remove(instance::AdwActionRow, _widget::GtkWidget)
        ret = ccall(("adw_action_row_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_activatable_widget(instance::AdwActionRow, _widget::Maybe(GtkWidget))
        _widget_maybe = nothing_to_null(_widget)
        ret = ccall(("adw_action_row_set_activatable_widget", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget_maybe)
        nothing
    end
    function set_icon_name(instance::AdwActionRow, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_action_row_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_subtitle(instance::AdwActionRow, _subtitle::Union{AbstractString, Symbol})
        ret = ccall(("adw_action_row_set_subtitle", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _subtitle)
        nothing
    end
    function set_subtitle_lines(instance::AdwActionRow, _subtitle_lines::Integer)
        ret = ccall(("adw_action_row_set_subtitle_lines", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _subtitle_lines)
        nothing
    end
    function set_subtitle_selectable(instance::AdwActionRow, _subtitle_selectable::Bool)
        ret = ccall(("adw_action_row_set_subtitle_selectable", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _subtitle_selectable)
        nothing
    end
    function set_title_lines(instance::AdwActionRow, _title_lines::Integer)
        ret = ccall(("adw_action_row_set_title_lines", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _title_lines)
        nothing
    end
    function get_accessible_parent(instance::AdwActionRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwActionRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwActionRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwActionRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwActionRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwActionRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwActionRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwActionRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwActionRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwActionRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwActionRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwActionRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwActionRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwActionRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwActionRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwActionRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwActionRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwActionRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwActionRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwActionRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwActionRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_follow_enable_animations_setting(instance::AdwAnimation)
        ret = ccall(("adw_animation_get_follow_enable_animations_setting", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_state(instance::AdwAnimation)
        ret = ccall(("adw_animation_get_state", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = AnimationState(ret)
        ret2
    end
    function get_target(instance::AdwAnimation)
        ret = ccall(("adw_animation_get_target", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(AdwAnimationTarget, ret, false)
        ret2
    end
    function get_value(instance::AdwAnimation)
        ret = ccall(("adw_animation_get_value", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_widget(instance::AdwAnimation)
        ret = ccall(("adw_animation_get_widget", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function pause(instance::AdwAnimation)
        ret = ccall(("adw_animation_pause", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function play(instance::AdwAnimation)
        ret = ccall(("adw_animation_play", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function reset(instance::AdwAnimation)
        ret = ccall(("adw_animation_reset", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function resume(instance::AdwAnimation)
        ret = ccall(("adw_animation_resume", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_follow_enable_animations_setting(instance::AdwAnimation, _setting::Bool)
        ret = ccall(("adw_animation_set_follow_enable_animations_setting", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_target(instance::AdwAnimation, _target::AdwAnimationTarget)
        ret = ccall(("adw_animation_set_target", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _target)
        nothing
    end
    function skip(instance::AdwAnimation)
        ret = ccall(("adw_animation_skip", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function Application_new(_application_id::Maybe(Union{AbstractString, Symbol}), _flags)
        _application_id_maybe = nothing_to_null(_application_id)
        ret = ccall(("adw_application_new", libadwaita), Ptr{GObject}, (Cstring, UInt32), _application_id_maybe, _flags)
        ret2 = AdwApplicationLeaf(ret, true)
        ret2
    end
    function get_style_manager(instance::AdwApplication)
        ret = ccall(("adw_application_get_style_manager", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(AdwStyleManager, ret, false)
        ret2
    end
    function action_added(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        action_added(GActionGroup(instance), _action_name)
    end
    function action_enabled_changed(instance::AdwApplication, _action_name::Union{AbstractString, Symbol}, _enabled::Bool)
        action_enabled_changed(GActionGroup(instance), _action_name, _enabled)
    end
    function action_removed(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        action_removed(GActionGroup(instance), _action_name)
    end
    function action_state_changed(instance::AdwApplication, _action_name::Union{AbstractString, Symbol}, _state::GVariant)
        action_state_changed(GActionGroup(instance), _action_name, _state)
    end
    function activate_action(instance::AdwApplication, _action_name::Union{AbstractString, Symbol}, _parameter::Maybe(GVariant))
        activate_action(GActionGroup(instance), _action_name, _parameter)
    end
    function change_action_state(instance::AdwApplication, _action_name::Union{AbstractString, Symbol}, _value::GVariant)
        change_action_state(GActionGroup(instance), _action_name, _value)
    end
    function get_action_enabled(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        get_action_enabled(GActionGroup(instance), _action_name)
    end
    function get_action_parameter_type(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        get_action_parameter_type(GActionGroup(instance), _action_name)
    end
    function get_action_state(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        get_action_state(GActionGroup(instance), _action_name)
    end
    function get_action_state_hint(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        get_action_state_hint(GActionGroup(instance), _action_name)
    end
    function get_action_state_type(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        get_action_state_type(GActionGroup(instance), _action_name)
    end
    function has_action(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        has_action(GActionGroup(instance), _action_name)
    end
    function list_actions(instance::AdwApplication)
        list_actions(GActionGroup(instance))
    end
    function query_action(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        query_action(GActionGroup(instance), _action_name)
    end
    function add_action(instance::AdwApplication, _action::GAction)
        add_action(GActionMap(instance), _action)
    end
    function add_action_entries(instance::AdwApplication, _entries, _user_data::Maybe(Nothing))
        add_action_entries(GActionMap(instance), _entries, _user_data)
    end
    function lookup_action(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        lookup_action(GActionMap(instance), _action_name)
    end
    function remove_action(instance::AdwApplication, _action_name::Union{AbstractString, Symbol})
        remove_action(GActionMap(instance), _action_name)
    end
    function remove_action_entries(instance::AdwApplication, _entries)
        remove_action_entries(GActionMap(instance), _entries)
    end
    function ApplicationWindow_new(_app::GtkApplication)
        ret = ccall(("adw_application_window_new", libadwaita), Ptr{GObject}, (Ptr{GObject},), _app)
        ret2 = AdwApplicationWindowLeaf(ret, false)
        ret2
    end
    function get_content(instance::AdwApplicationWindow)
        ret = ccall(("adw_application_window_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function set_content(instance::AdwApplicationWindow, _content::Maybe(GtkWidget))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_application_window_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function action_added(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        action_added(GActionGroup(instance), _action_name)
    end
    function action_enabled_changed(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol}, _enabled::Bool)
        action_enabled_changed(GActionGroup(instance), _action_name, _enabled)
    end
    function action_removed(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        action_removed(GActionGroup(instance), _action_name)
    end
    function action_state_changed(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol}, _state::GVariant)
        action_state_changed(GActionGroup(instance), _action_name, _state)
    end
    function activate_action(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol}, _parameter::Maybe(GVariant))
        activate_action(GActionGroup(instance), _action_name, _parameter)
    end
    function change_action_state(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol}, _value::GVariant)
        change_action_state(GActionGroup(instance), _action_name, _value)
    end
    function get_action_enabled(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        get_action_enabled(GActionGroup(instance), _action_name)
    end
    function get_action_parameter_type(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        get_action_parameter_type(GActionGroup(instance), _action_name)
    end
    function get_action_state(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        get_action_state(GActionGroup(instance), _action_name)
    end
    function get_action_state_hint(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        get_action_state_hint(GActionGroup(instance), _action_name)
    end
    function get_action_state_type(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        get_action_state_type(GActionGroup(instance), _action_name)
    end
    function has_action(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        has_action(GActionGroup(instance), _action_name)
    end
    function list_actions(instance::AdwApplicationWindow)
        list_actions(GActionGroup(instance))
    end
    function query_action(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        query_action(GActionGroup(instance), _action_name)
    end
    function add_action(instance::AdwApplicationWindow, _action::GAction)
        add_action(GActionMap(instance), _action)
    end
    function add_action_entries(instance::AdwApplicationWindow, _entries, _user_data::Maybe(Nothing))
        add_action_entries(GActionMap(instance), _entries, _user_data)
    end
    function lookup_action(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        lookup_action(GActionMap(instance), _action_name)
    end
    function remove_action(instance::AdwApplicationWindow, _action_name::Union{AbstractString, Symbol})
        remove_action(GActionMap(instance), _action_name)
    end
    function remove_action_entries(instance::AdwApplicationWindow, _entries)
        remove_action_entries(GActionMap(instance), _entries)
    end
    function get_accessible_parent(instance::AdwApplicationWindow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwApplicationWindow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwApplicationWindow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwApplicationWindow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwApplicationWindow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwApplicationWindow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwApplicationWindow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwApplicationWindow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwApplicationWindow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwApplicationWindow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwApplicationWindow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwApplicationWindow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwApplicationWindow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwApplicationWindow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwApplicationWindow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwApplicationWindow)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_renderer(instance::AdwApplicationWindow)
        get_renderer(GtkNative(instance))
    end
    function get_surface(instance::AdwApplicationWindow)
        get_surface(GtkNative(instance))
    end
    function get_surface_transform(instance::AdwApplicationWindow)
        get_surface_transform(GtkNative(instance))
    end
    function realize(instance::AdwApplicationWindow)
        realize(GtkNative(instance))
    end
    function unrealize(instance::AdwApplicationWindow)
        unrealize(GtkNative(instance))
    end
    function get_display(instance::AdwApplicationWindow)
        get_display(GtkRoot(instance))
    end
    function get_focus(instance::AdwApplicationWindow)
        get_focus(GtkRoot(instance))
    end
    function set_focus(instance::AdwApplicationWindow, _focus::Maybe(GtkWidget))
        set_focus(GtkRoot(instance), _focus)
    end
    function Avatar_new(_size::Integer, _text::Maybe(Union{AbstractString, Symbol}), _show_initials::Bool)
        _text_maybe = nothing_to_null(_text)
        ret = ccall(("adw_avatar_new", libadwaita), Ptr{GObject}, (Int32, Cstring, Cint), _size, _text_maybe, _show_initials)
        ret2 = AdwAvatarLeaf(ret, false)
        ret2
    end
    function draw_to_texture(instance::AdwAvatar, _scale_factor::Integer)
        ret = ccall(("adw_avatar_draw_to_texture", libadwaita), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _scale_factor)
        ret2 = convert(GdkTexture, ret, true)
        ret2
    end
    function get_custom_image(instance::AdwAvatar)
        ret = ccall(("adw_avatar_get_custom_image", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = GLib.find_leaf_type_if_not_null(ret, false)
        ret2
    end
    function get_icon_name(instance::AdwAvatar)
        ret = ccall(("adw_avatar_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_show_initials(instance::AdwAvatar)
        ret = ccall(("adw_avatar_get_show_initials", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_size(instance::AdwAvatar)
        ret = ccall(("adw_avatar_get_size", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_text(instance::AdwAvatar)
        ret = ccall(("adw_avatar_get_text", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function set_custom_image(instance::AdwAvatar, _custom_image::Maybe(GdkPaintable))
        _custom_image_maybe = nothing_to_null(_custom_image)
        ret = ccall(("adw_avatar_set_custom_image", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _custom_image_maybe)
        nothing
    end
    function set_icon_name(instance::AdwAvatar, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_avatar_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_show_initials(instance::AdwAvatar, _show_initials::Bool)
        ret = ccall(("adw_avatar_set_show_initials", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_initials)
        nothing
    end
    function set_size(instance::AdwAvatar, _size::Integer)
        ret = ccall(("adw_avatar_set_size", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _size)
        nothing
    end
    function set_text(instance::AdwAvatar, _text::Maybe(Union{AbstractString, Symbol}))
        _text_maybe = nothing_to_null(_text)
        ret = ccall(("adw_avatar_set_text", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _text_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwAvatar)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwAvatar)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwAvatar)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwAvatar)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwAvatar)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwAvatar)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwAvatar, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwAvatar, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwAvatar, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwAvatar, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwAvatar, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwAvatar, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwAvatar, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwAvatar, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwAvatar, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwAvatar)
        get_buildable_id(GtkBuildable(instance))
    end
    function Banner_new(_title::Union{AbstractString, Symbol})
        ret = ccall(("adw_banner_new", libadwaita), Ptr{GObject}, (Cstring,), _title)
        ret2 = AdwBannerLeaf(ret, false)
        ret2
    end
    function get_button_label(instance::AdwBanner)
        ret = ccall(("adw_banner_get_button_label", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_revealed(instance::AdwBanner)
        ret = ccall(("adw_banner_get_revealed", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::AdwBanner)
        ret = ccall(("adw_banner_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_use_markup(instance::AdwBanner)
        ret = ccall(("adw_banner_get_use_markup", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_button_label(instance::AdwBanner, _label::Maybe(Union{AbstractString, Symbol}))
        _label_maybe = nothing_to_null(_label)
        ret = ccall(("adw_banner_set_button_label", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _label_maybe)
        nothing
    end
    function set_revealed(instance::AdwBanner, _revealed::Bool)
        ret = ccall(("adw_banner_set_revealed", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _revealed)
        nothing
    end
    function set_title(instance::AdwBanner, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_banner_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_use_markup(instance::AdwBanner, _use_markup::Bool)
        ret = ccall(("adw_banner_set_use_markup", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function get_accessible_parent(instance::AdwBanner)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwBanner)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwBanner)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwBanner)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwBanner)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwBanner)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwBanner, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwBanner, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwBanner, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwBanner, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwBanner, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwBanner, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwBanner, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwBanner, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwBanner, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwBanner)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwBanner)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwBanner, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwBanner, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwBanner, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwBanner)
        get_buildable_id(GtkBuildable(instance))
    end
    function Bin_new()
        ret = ccall(("adw_bin_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwBinLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwBin)
        ret = ccall(("adw_bin_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function set_child(instance::AdwBin, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_bin_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwBin)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwBin)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwBin)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwBin)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwBin)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwBin)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwBin, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwBin, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwBin, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwBin, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwBin, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwBin, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwBin, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwBin, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwBin, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwBin)
        get_buildable_id(GtkBuildable(instance))
    end
    function BreakpointBin_new()
        ret = ccall(("adw_breakpoint_bin_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwBreakpointBinLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwBreakpointBin)
        ret = ccall(("adw_breakpoint_bin_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function set_child(instance::AdwBreakpointBin, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_breakpoint_bin_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwBreakpointBin)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwBreakpointBin)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwBreakpointBin)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwBreakpointBin)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwBreakpointBin)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwBreakpointBin)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwBreakpointBin, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwBreakpointBin, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwBreakpointBin, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwBreakpointBin, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwBreakpointBin, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwBreakpointBin, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwBreakpointBin, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwBreakpointBin, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwBreakpointBin, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwBreakpointBin)
        get_buildable_id(GtkBuildable(instance))
    end
    function ButtonContent_new()
        ret = ccall(("adw_button_content_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwButtonContentLeaf(ret, false)
        ret2
    end
    function get_can_shrink(instance::AdwButtonContent)
        ret = ccall(("adw_button_content_get_can_shrink", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_name(instance::AdwButtonContent)
        ret = ccall(("adw_button_content_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_label(instance::AdwButtonContent)
        ret = ccall(("adw_button_content_get_label", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_use_underline(instance::AdwButtonContent)
        ret = ccall(("adw_button_content_get_use_underline", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_can_shrink(instance::AdwButtonContent, _can_shrink::Bool)
        ret = ccall(("adw_button_content_set_can_shrink", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_shrink)
        nothing
    end
    function set_icon_name(instance::AdwButtonContent, _icon_name::Union{AbstractString, Symbol})
        ret = ccall(("adw_button_content_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name)
        nothing
    end
    function set_label(instance::AdwButtonContent, _label::Union{AbstractString, Symbol})
        ret = ccall(("adw_button_content_set_label", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_use_underline(instance::AdwButtonContent, _use_underline::Bool)
        ret = ccall(("adw_button_content_set_use_underline", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_accessible_parent(instance::AdwButtonContent)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwButtonContent)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwButtonContent)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwButtonContent)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwButtonContent)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwButtonContent)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwButtonContent, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwButtonContent, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwButtonContent, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwButtonContent, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwButtonContent, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwButtonContent, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwButtonContent, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwButtonContent, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwButtonContent, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwButtonContent)
        get_buildable_id(GtkBuildable(instance))
    end
    function Carousel_new()
        ret = ccall(("adw_carousel_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwCarouselLeaf(ret, false)
        ret2
    end
    function append(instance::AdwCarousel, _child::GtkWidget)
        ret = ccall(("adw_carousel_append", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function get_allow_long_swipes(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_allow_long_swipes", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_allow_mouse_drag(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_allow_mouse_drag", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_allow_scroll_wheel(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_allow_scroll_wheel", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_interactive(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_interactive", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_n_pages(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_n_pages", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_nth_page(instance::AdwCarousel, _n::Integer)
        ret = ccall(("adw_carousel_get_nth_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _n)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_position(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_position", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_reveal_duration(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_reveal_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_scroll_params(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_scroll_params", libadwaita), Ptr{AdwSpringParams}, (Ptr{GObject},), instance)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function get_spacing(instance::AdwCarousel)
        ret = ccall(("adw_carousel_get_spacing", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function insert(instance::AdwCarousel, _child::GtkWidget, _position::Integer)
        ret = ccall(("adw_carousel_insert", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        nothing
    end
    function prepend(instance::AdwCarousel, _child::GtkWidget)
        ret = ccall(("adw_carousel_prepend", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::AdwCarousel, _child::GtkWidget)
        ret = ccall(("adw_carousel_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function reorder(instance::AdwCarousel, _child::GtkWidget, _position::Integer)
        ret = ccall(("adw_carousel_reorder", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        nothing
    end
    function scroll_to(instance::AdwCarousel, _widget::GtkWidget, _animate::Bool)
        ret = ccall(("adw_carousel_scroll_to", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _widget, _animate)
        nothing
    end
    function set_allow_long_swipes(instance::AdwCarousel, _allow_long_swipes::Bool)
        ret = ccall(("adw_carousel_set_allow_long_swipes", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_long_swipes)
        nothing
    end
    function set_allow_mouse_drag(instance::AdwCarousel, _allow_mouse_drag::Bool)
        ret = ccall(("adw_carousel_set_allow_mouse_drag", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_mouse_drag)
        nothing
    end
    function set_allow_scroll_wheel(instance::AdwCarousel, _allow_scroll_wheel::Bool)
        ret = ccall(("adw_carousel_set_allow_scroll_wheel", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_scroll_wheel)
        nothing
    end
    function set_interactive(instance::AdwCarousel, _interactive::Bool)
        ret = ccall(("adw_carousel_set_interactive", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _interactive)
        nothing
    end
    function set_reveal_duration(instance::AdwCarousel, _reveal_duration::Integer)
        ret = ccall(("adw_carousel_set_reveal_duration", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _reveal_duration)
        nothing
    end
    function set_scroll_params(instance::AdwCarousel, _params::AdwSpringParams)
        ret = ccall(("adw_carousel_set_scroll_params", libadwaita), Nothing, (Ptr{GObject}, Ptr{AdwSpringParams}), instance, _params)
        nothing
    end
    function set_spacing(instance::AdwCarousel, _spacing::Integer)
        ret = ccall(("adw_carousel_set_spacing", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function get_cancel_progress(instance::AdwCarousel)
        get_cancel_progress(AdwSwipeable(instance))
    end
    function get_distance(instance::AdwCarousel)
        get_distance(AdwSwipeable(instance))
    end
    function get_progress(instance::AdwCarousel)
        get_progress(AdwSwipeable(instance))
    end
    function get_snap_points(instance::AdwCarousel)
        get_snap_points(AdwSwipeable(instance))
    end
    function get_swipe_area(instance::AdwCarousel, _navigation_direction, _is_drag::Bool)
        get_swipe_area(AdwSwipeable(instance), _navigation_direction, _is_drag)
    end
    function get_accessible_parent(instance::AdwCarousel)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwCarousel)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwCarousel)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwCarousel)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwCarousel)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwCarousel)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwCarousel, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwCarousel, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwCarousel, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwCarousel, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwCarousel, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwCarousel, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwCarousel, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwCarousel, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwCarousel, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwCarousel)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwCarousel)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwCarousel, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function CarouselIndicatorDots_new()
        ret = ccall(("adw_carousel_indicator_dots_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwCarouselIndicatorDotsLeaf(ret, false)
        ret2
    end
    function get_carousel(instance::AdwCarouselIndicatorDots)
        ret = ccall(("adw_carousel_indicator_dots_get_carousel", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwCarousel, ret, false)
        ret2
    end
    function set_carousel(instance::AdwCarouselIndicatorDots, _carousel::Maybe(AdwCarousel))
        _carousel_maybe = nothing_to_null(_carousel)
        ret = ccall(("adw_carousel_indicator_dots_set_carousel", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _carousel_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwCarouselIndicatorDots)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwCarouselIndicatorDots)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwCarouselIndicatorDots)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwCarouselIndicatorDots)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwCarouselIndicatorDots)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwCarouselIndicatorDots)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwCarouselIndicatorDots, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwCarouselIndicatorDots, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwCarouselIndicatorDots, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwCarouselIndicatorDots, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwCarouselIndicatorDots, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwCarouselIndicatorDots, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwCarouselIndicatorDots, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwCarouselIndicatorDots, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwCarouselIndicatorDots, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwCarouselIndicatorDots)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwCarouselIndicatorDots)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwCarouselIndicatorDots, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function CarouselIndicatorLines_new()
        ret = ccall(("adw_carousel_indicator_lines_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwCarouselIndicatorLinesLeaf(ret, false)
        ret2
    end
    function get_carousel(instance::AdwCarouselIndicatorLines)
        ret = ccall(("adw_carousel_indicator_lines_get_carousel", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwCarousel, ret, false)
        ret2
    end
    function set_carousel(instance::AdwCarouselIndicatorLines, _carousel::Maybe(AdwCarousel))
        _carousel_maybe = nothing_to_null(_carousel)
        ret = ccall(("adw_carousel_indicator_lines_set_carousel", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _carousel_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwCarouselIndicatorLines)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwCarouselIndicatorLines)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwCarouselIndicatorLines)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwCarouselIndicatorLines)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwCarouselIndicatorLines)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwCarouselIndicatorLines)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwCarouselIndicatorLines, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwCarouselIndicatorLines, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwCarouselIndicatorLines, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwCarouselIndicatorLines, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwCarouselIndicatorLines, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwCarouselIndicatorLines, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwCarouselIndicatorLines, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwCarouselIndicatorLines, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwCarouselIndicatorLines, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwCarouselIndicatorLines)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwCarouselIndicatorLines)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwCarouselIndicatorLines, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function Clamp_new()
        ret = ccall(("adw_clamp_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwClampLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwClamp)
        ret = ccall(("adw_clamp_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_maximum_size(instance::AdwClamp)
        ret = ccall(("adw_clamp_get_maximum_size", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tightening_threshold(instance::AdwClamp)
        ret = ccall(("adw_clamp_get_tightening_threshold", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_unit(instance::AdwClamp)
        ret = ccall(("adw_clamp_get_unit", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LengthUnit(ret)
        ret2
    end
    function set_child(instance::AdwClamp, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_clamp_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_maximum_size(instance::AdwClamp, _maximum_size::Integer)
        ret = ccall(("adw_clamp_set_maximum_size", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _maximum_size)
        nothing
    end
    function set_tightening_threshold(instance::AdwClamp, _tightening_threshold::Integer)
        ret = ccall(("adw_clamp_set_tightening_threshold", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _tightening_threshold)
        nothing
    end
    function set_unit(instance::AdwClamp, _unit)
        ret = ccall(("adw_clamp_set_unit", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _unit)
        nothing
    end
    function get_accessible_parent(instance::AdwClamp)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwClamp)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwClamp)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwClamp)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwClamp)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwClamp)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwClamp, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwClamp, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwClamp, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwClamp, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwClamp, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwClamp, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwClamp, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwClamp, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwClamp, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwClamp)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwClamp)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwClamp, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function ClampLayout_new()
        ret = ccall(("adw_clamp_layout_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwClampLayoutLeaf(ret, true)
        ret2
    end
    function get_maximum_size(instance::AdwClampLayout)
        ret = ccall(("adw_clamp_layout_get_maximum_size", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tightening_threshold(instance::AdwClampLayout)
        ret = ccall(("adw_clamp_layout_get_tightening_threshold", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_unit(instance::AdwClampLayout)
        ret = ccall(("adw_clamp_layout_get_unit", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LengthUnit(ret)
        ret2
    end
    function set_maximum_size(instance::AdwClampLayout, _maximum_size::Integer)
        ret = ccall(("adw_clamp_layout_set_maximum_size", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _maximum_size)
        nothing
    end
    function set_tightening_threshold(instance::AdwClampLayout, _tightening_threshold::Integer)
        ret = ccall(("adw_clamp_layout_set_tightening_threshold", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _tightening_threshold)
        nothing
    end
    function set_unit(instance::AdwClampLayout, _unit)
        ret = ccall(("adw_clamp_layout_set_unit", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _unit)
        nothing
    end
    function get_orientation(instance::AdwClampLayout)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwClampLayout, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function ClampScrollable_new()
        ret = ccall(("adw_clamp_scrollable_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwClampScrollableLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwClampScrollable)
        ret = ccall(("adw_clamp_scrollable_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_maximum_size(instance::AdwClampScrollable)
        ret = ccall(("adw_clamp_scrollable_get_maximum_size", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tightening_threshold(instance::AdwClampScrollable)
        ret = ccall(("adw_clamp_scrollable_get_tightening_threshold", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_unit(instance::AdwClampScrollable)
        ret = ccall(("adw_clamp_scrollable_get_unit", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LengthUnit(ret)
        ret2
    end
    function set_child(instance::AdwClampScrollable, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_clamp_scrollable_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_maximum_size(instance::AdwClampScrollable, _maximum_size::Integer)
        ret = ccall(("adw_clamp_scrollable_set_maximum_size", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _maximum_size)
        nothing
    end
    function set_tightening_threshold(instance::AdwClampScrollable, _tightening_threshold::Integer)
        ret = ccall(("adw_clamp_scrollable_set_tightening_threshold", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _tightening_threshold)
        nothing
    end
    function set_unit(instance::AdwClampScrollable, _unit)
        ret = ccall(("adw_clamp_scrollable_set_unit", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _unit)
        nothing
    end
    function get_accessible_parent(instance::AdwClampScrollable)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwClampScrollable)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwClampScrollable)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwClampScrollable)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwClampScrollable)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwClampScrollable)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwClampScrollable, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwClampScrollable, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwClampScrollable, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwClampScrollable, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwClampScrollable, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwClampScrollable, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwClampScrollable, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwClampScrollable, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwClampScrollable, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwClampScrollable)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwClampScrollable)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwClampScrollable, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function get_border(instance::AdwClampScrollable)
        get_border(GtkScrollable(instance))
    end
    function get_hadjustment(instance::AdwClampScrollable)
        get_hadjustment(GtkScrollable(instance))
    end
    function get_hscroll_policy(instance::AdwClampScrollable)
        get_hscroll_policy(GtkScrollable(instance))
    end
    function get_vadjustment(instance::AdwClampScrollable)
        get_vadjustment(GtkScrollable(instance))
    end
    function get_vscroll_policy(instance::AdwClampScrollable)
        get_vscroll_policy(GtkScrollable(instance))
    end
    function set_hadjustment(instance::AdwClampScrollable, _hadjustment::Maybe(GtkAdjustment))
        set_hadjustment(GtkScrollable(instance), _hadjustment)
    end
    function set_hscroll_policy(instance::AdwClampScrollable, _policy)
        set_hscroll_policy(GtkScrollable(instance), _policy)
    end
    function set_vadjustment(instance::AdwClampScrollable, _vadjustment::Maybe(GtkAdjustment))
        set_vadjustment(GtkScrollable(instance), _vadjustment)
    end
    function set_vscroll_policy(instance::AdwClampScrollable, _policy)
        set_vscroll_policy(GtkScrollable(instance), _policy)
    end
    function ComboRow_new()
        ret = ccall(("adw_combo_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwComboRowLeaf(ret, false)
        ret2
    end
    function get_enable_search(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_enable_search", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_factory(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_factory", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkListItemFactory, ret, false)
        ret2
    end
    function get_list_factory(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_list_factory", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkListItemFactory, ret, false)
        ret2
    end
    function get_model(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_model", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = GLib.find_leaf_type_if_not_null(ret, false)
        ret2
    end
    function get_selected(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_selected", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_item(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_selected_item", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GObject, ret, false)
        ret2
    end
    function get_use_subtitle(instance::AdwComboRow)
        ret = ccall(("adw_combo_row_get_use_subtitle", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_enable_search(instance::AdwComboRow, _enable_search::Bool)
        ret = ccall(("adw_combo_row_set_enable_search", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_search)
        nothing
    end
    function set_factory(instance::AdwComboRow, _factory::Maybe(GtkListItemFactory))
        _factory_maybe = nothing_to_null(_factory)
        ret = ccall(("adw_combo_row_set_factory", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _factory_maybe)
        nothing
    end
    function set_list_factory(instance::AdwComboRow, _factory::Maybe(GtkListItemFactory))
        _factory_maybe = nothing_to_null(_factory)
        ret = ccall(("adw_combo_row_set_list_factory", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _factory_maybe)
        nothing
    end
    function set_model(instance::AdwComboRow, _model::Maybe(GListModel))
        _model_maybe = nothing_to_null(_model)
        ret = ccall(("adw_combo_row_set_model", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model_maybe)
        nothing
    end
    function set_selected(instance::AdwComboRow, _position::Integer)
        ret = ccall(("adw_combo_row_set_selected", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function set_use_subtitle(instance::AdwComboRow, _use_subtitle::Bool)
        ret = ccall(("adw_combo_row_set_use_subtitle", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_subtitle)
        nothing
    end
    function get_accessible_parent(instance::AdwComboRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwComboRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwComboRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwComboRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwComboRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwComboRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwComboRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwComboRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwComboRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwComboRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwComboRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwComboRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwComboRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwComboRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwComboRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwComboRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwComboRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwComboRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwComboRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwComboRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwComboRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function EntryRow_new()
        ret = ccall(("adw_entry_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwEntryRowLeaf(ret, false)
        ret2
    end
    function add_prefix(instance::AdwEntryRow, _widget::GtkWidget)
        ret = ccall(("adw_entry_row_add_prefix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function add_suffix(instance::AdwEntryRow, _widget::GtkWidget)
        ret = ccall(("adw_entry_row_add_suffix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_activates_default(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_activates_default", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_attributes(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_attributes", libadwaita), Ptr{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(PangoAttrList, ret, true)
        ret2
    end
    function get_enable_emoji_completion(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_enable_emoji_completion", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_input_hints(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_input_hints", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = InputHints(ret)
        ret2
    end
    function get_input_purpose(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_input_purpose", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_show_apply_button(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_get_show_apply_button", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function grab_focus_without_selecting(instance::AdwEntryRow)
        ret = ccall(("adw_entry_row_grab_focus_without_selecting", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove(instance::AdwEntryRow, _widget::GtkWidget)
        ret = ccall(("adw_entry_row_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_activates_default(instance::AdwEntryRow, _activates::Bool)
        ret = ccall(("adw_entry_row_set_activates_default", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _activates)
        nothing
    end
    function set_attributes(instance::AdwEntryRow, _attributes::Maybe(PangoAttrList))
        _attributes_maybe = nothing_to_null(_attributes)
        ret = ccall(("adw_entry_row_set_attributes", libadwaita), Nothing, (Ptr{GObject}, Ptr{PangoAttrList}), instance, _attributes_maybe)
        nothing
    end
    function set_enable_emoji_completion(instance::AdwEntryRow, _enable_emoji_completion::Bool)
        ret = ccall(("adw_entry_row_set_enable_emoji_completion", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_emoji_completion)
        nothing
    end
    function set_input_hints(instance::AdwEntryRow, _hints)
        ret = ccall(("adw_entry_row_set_input_hints", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::AdwEntryRow, _purpose)
        ret = ccall(("adw_entry_row_set_input_purpose", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _purpose)
        nothing
    end
    function set_show_apply_button(instance::AdwEntryRow, _show_apply_button::Bool)
        ret = ccall(("adw_entry_row_set_show_apply_button", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_apply_button)
        nothing
    end
    function get_accessible_parent(instance::AdwEntryRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwEntryRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwEntryRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwEntryRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwEntryRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwEntryRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwEntryRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwEntryRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwEntryRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwEntryRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwEntryRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwEntryRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwEntryRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwEntryRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwEntryRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwEntryRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwEntryRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwEntryRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwEntryRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwEntryRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwEntryRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function delegate_get_accessible_platform_state(instance::AdwEntryRow, _state)
        delegate_get_accessible_platform_state(GtkEditable(instance), _state)
    end
    function delete_selection(instance::AdwEntryRow)
        delete_selection(GtkEditable(instance))
    end
    function delete_text(instance::AdwEntryRow, _start_pos::Integer, _end_pos::Integer)
        delete_text(GtkEditable(instance), _start_pos, _end_pos)
    end
    function finish_delegate(instance::AdwEntryRow)
        finish_delegate(GtkEditable(instance))
    end
    function get_alignment(instance::AdwEntryRow)
        get_alignment(GtkEditable(instance))
    end
    function get_chars(instance::AdwEntryRow, _start_pos::Integer, _end_pos::Integer)
        get_chars(GtkEditable(instance), _start_pos, _end_pos)
    end
    function get_delegate(instance::AdwEntryRow)
        get_delegate(GtkEditable(instance))
    end
    function get_editable(instance::AdwEntryRow)
        get_editable(GtkEditable(instance))
    end
    function get_enable_undo(instance::AdwEntryRow)
        get_enable_undo(GtkEditable(instance))
    end
    function get_max_width_chars(instance::AdwEntryRow)
        get_max_width_chars(GtkEditable(instance))
    end
    function get_position(instance::AdwEntryRow)
        get_position(GtkEditable(instance))
    end
    function get_selection_bounds(instance::AdwEntryRow)
        get_selection_bounds(GtkEditable(instance))
    end
    function get_text(instance::AdwEntryRow)
        get_text(GtkEditable(instance))
    end
    function get_width_chars(instance::AdwEntryRow)
        get_width_chars(GtkEditable(instance))
    end
    function init_delegate(instance::AdwEntryRow)
        init_delegate(GtkEditable(instance))
    end
    function insert_text(instance::AdwEntryRow, _text::Union{AbstractString, Symbol}, _length::Integer, _position::Integer)
        insert_text(GtkEditable(instance), _text, _length, _position)
    end
    function select_region(instance::AdwEntryRow, _start_pos::Integer, _end_pos::Integer)
        select_region(GtkEditable(instance), _start_pos, _end_pos)
    end
    function set_alignment(instance::AdwEntryRow, _xalign::Real)
        set_alignment(GtkEditable(instance), _xalign)
    end
    function set_editable(instance::AdwEntryRow, _is_editable::Bool)
        set_editable(GtkEditable(instance), _is_editable)
    end
    function set_enable_undo(instance::AdwEntryRow, _enable_undo::Bool)
        set_enable_undo(GtkEditable(instance), _enable_undo)
    end
    function set_max_width_chars(instance::AdwEntryRow, _n_chars::Integer)
        set_max_width_chars(GtkEditable(instance), _n_chars)
    end
    function set_position(instance::AdwEntryRow, _position::Integer)
        set_position(GtkEditable(instance), _position)
    end
    function set_text(instance::AdwEntryRow, _text::Union{AbstractString, Symbol})
        set_text(GtkEditable(instance), _text)
    end
    function set_width_chars(instance::AdwEntryRow, _n_chars::Integer)
        set_width_chars(GtkEditable(instance), _n_chars)
    end
    function get_name(instance::AdwEnumListItem)
        ret = ccall(("adw_enum_list_item_get_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_nick(instance::AdwEnumListItem)
        ret = ccall(("adw_enum_list_item_get_nick", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_value(instance::AdwEnumListItem)
        ret = ccall(("adw_enum_list_item_get_value", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function EnumListModel_new(_enum_type::Integer)
        ret = ccall(("adw_enum_list_model_new", libadwaita), Ptr{GObject}, (UInt64,), _enum_type)
        ret2 = AdwEnumListModelLeaf(ret, true)
        ret2
    end
    function find_position(instance::AdwEnumListModel, _value::Integer)
        ret = ccall(("adw_enum_list_model_find_position", libadwaita), UInt32, (Ptr{GObject}, Int32), instance, _value)
        ret
    end
    function get_enum_type(instance::AdwEnumListModel)
        ret = ccall(("adw_enum_list_model_get_enum_type", libadwaita), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_item_type(instance::AdwEnumListModel)
        get_item_type(GListModel(instance))
    end
    function get_n_items(instance::AdwEnumListModel)
        get_n_items(GListModel(instance))
    end
    function get_item(instance::AdwEnumListModel, _position::Integer)
        get_item(GListModel(instance), _position)
    end
    function items_changed(instance::AdwEnumListModel, _position::Integer, _removed::Integer, _added::Integer)
        items_changed(GListModel(instance), _position, _removed, _added)
    end
    function ExpanderRow_new()
        ret = ccall(("adw_expander_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwExpanderRowLeaf(ret, false)
        ret2
    end
    function add_action(instance::AdwExpanderRow, _widget::GtkWidget)
        ret = ccall(("adw_expander_row_add_action", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function add_prefix(instance::AdwExpanderRow, _widget::GtkWidget)
        ret = ccall(("adw_expander_row_add_prefix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function add_row(instance::AdwExpanderRow, _child::GtkWidget)
        ret = ccall(("adw_expander_row_add_row", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function add_suffix(instance::AdwExpanderRow, _widget::GtkWidget)
        ret = ccall(("adw_expander_row_add_suffix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_enable_expansion(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_enable_expansion", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_expanded(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_expanded", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_name(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_show_enable_switch(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_show_enable_switch", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_subtitle(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_subtitle", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_subtitle_lines(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_subtitle_lines", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_title_lines(instance::AdwExpanderRow)
        ret = ccall(("adw_expander_row_get_title_lines", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function remove(instance::AdwExpanderRow, _child::GtkWidget)
        ret = ccall(("adw_expander_row_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_enable_expansion(instance::AdwExpanderRow, _enable_expansion::Bool)
        ret = ccall(("adw_expander_row_set_enable_expansion", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_expansion)
        nothing
    end
    function set_expanded(instance::AdwExpanderRow, _expanded::Bool)
        ret = ccall(("adw_expander_row_set_expanded", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _expanded)
        nothing
    end
    function set_icon_name(instance::AdwExpanderRow, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_expander_row_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_show_enable_switch(instance::AdwExpanderRow, _show_enable_switch::Bool)
        ret = ccall(("adw_expander_row_set_show_enable_switch", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_enable_switch)
        nothing
    end
    function set_subtitle(instance::AdwExpanderRow, _subtitle::Union{AbstractString, Symbol})
        ret = ccall(("adw_expander_row_set_subtitle", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _subtitle)
        nothing
    end
    function set_subtitle_lines(instance::AdwExpanderRow, _subtitle_lines::Integer)
        ret = ccall(("adw_expander_row_set_subtitle_lines", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _subtitle_lines)
        nothing
    end
    function set_title_lines(instance::AdwExpanderRow, _title_lines::Integer)
        ret = ccall(("adw_expander_row_set_title_lines", libadwaita), Nothing, (Ptr{GObject}, Int32), instance, _title_lines)
        nothing
    end
    function get_accessible_parent(instance::AdwExpanderRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwExpanderRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwExpanderRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwExpanderRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwExpanderRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwExpanderRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwExpanderRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwExpanderRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwExpanderRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwExpanderRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwExpanderRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwExpanderRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwExpanderRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwExpanderRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwExpanderRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwExpanderRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwExpanderRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwExpanderRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwExpanderRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwExpanderRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwExpanderRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function Flap_new()
        ret = ccall(("adw_flap_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwFlapLeaf(ret, false)
        ret2
    end
    function get_content(instance::AdwFlap)
        ret = ccall(("adw_flap_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_flap(instance::AdwFlap)
        ret = ccall(("adw_flap_get_flap", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_flap_position(instance::AdwFlap)
        ret = ccall(("adw_flap_get_flap_position", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = PackType(ret)
        ret2
    end
    function get_fold_duration(instance::AdwFlap)
        ret = ccall(("adw_flap_get_fold_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_fold_policy(instance::AdwFlap)
        ret = ccall(("adw_flap_get_fold_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = FlapFoldPolicy(ret)
        ret2
    end
    function get_fold_threshold_policy(instance::AdwFlap)
        ret = ccall(("adw_flap_get_fold_threshold_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = FoldThresholdPolicy(ret)
        ret2
    end
    function get_folded(instance::AdwFlap)
        ret = ccall(("adw_flap_get_folded", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_locked(instance::AdwFlap)
        ret = ccall(("adw_flap_get_locked", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_modal(instance::AdwFlap)
        ret = ccall(("adw_flap_get_modal", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_flap(instance::AdwFlap)
        ret = ccall(("adw_flap_get_reveal_flap", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_params(instance::AdwFlap)
        ret = ccall(("adw_flap_get_reveal_params", libadwaita), Ptr{AdwSpringParams}, (Ptr{GObject},), instance)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function get_reveal_progress(instance::AdwFlap)
        ret = ccall(("adw_flap_get_reveal_progress", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_separator(instance::AdwFlap)
        ret = ccall(("adw_flap_get_separator", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_swipe_to_close(instance::AdwFlap)
        ret = ccall(("adw_flap_get_swipe_to_close", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_swipe_to_open(instance::AdwFlap)
        ret = ccall(("adw_flap_get_swipe_to_open", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_type(instance::AdwFlap)
        ret = ccall(("adw_flap_get_transition_type", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = FlapTransitionType(ret)
        ret2
    end
    function set_content(instance::AdwFlap, _content::Maybe(GtkWidget))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_flap_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function set_flap(instance::AdwFlap, _flap::Maybe(GtkWidget))
        _flap_maybe = nothing_to_null(_flap)
        ret = ccall(("adw_flap_set_flap", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _flap_maybe)
        nothing
    end
    function set_flap_position(instance::AdwFlap, _position)
        ret = ccall(("adw_flap_set_flap_position", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function set_fold_duration(instance::AdwFlap, _duration::Integer)
        ret = ccall(("adw_flap_set_fold_duration", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_fold_policy(instance::AdwFlap, _policy)
        ret = ccall(("adw_flap_set_fold_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_fold_threshold_policy(instance::AdwFlap, _policy)
        ret = ccall(("adw_flap_set_fold_threshold_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_locked(instance::AdwFlap, _locked::Bool)
        ret = ccall(("adw_flap_set_locked", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _locked)
        nothing
    end
    function set_modal(instance::AdwFlap, _modal::Bool)
        ret = ccall(("adw_flap_set_modal", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_reveal_flap(instance::AdwFlap, _reveal_flap::Bool)
        ret = ccall(("adw_flap_set_reveal_flap", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reveal_flap)
        nothing
    end
    function set_reveal_params(instance::AdwFlap, _params::AdwSpringParams)
        ret = ccall(("adw_flap_set_reveal_params", libadwaita), Nothing, (Ptr{GObject}, Ptr{AdwSpringParams}), instance, _params)
        nothing
    end
    function set_separator(instance::AdwFlap, _separator::Maybe(GtkWidget))
        _separator_maybe = nothing_to_null(_separator)
        ret = ccall(("adw_flap_set_separator", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _separator_maybe)
        nothing
    end
    function set_swipe_to_close(instance::AdwFlap, _swipe_to_close::Bool)
        ret = ccall(("adw_flap_set_swipe_to_close", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _swipe_to_close)
        nothing
    end
    function set_swipe_to_open(instance::AdwFlap, _swipe_to_open::Bool)
        ret = ccall(("adw_flap_set_swipe_to_open", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _swipe_to_open)
        nothing
    end
    function set_transition_type(instance::AdwFlap, _transition_type)
        ret = ccall(("adw_flap_set_transition_type", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _transition_type)
        nothing
    end
    function get_cancel_progress(instance::AdwFlap)
        get_cancel_progress(AdwSwipeable(instance))
    end
    function get_distance(instance::AdwFlap)
        get_distance(AdwSwipeable(instance))
    end
    function get_progress(instance::AdwFlap)
        get_progress(AdwSwipeable(instance))
    end
    function get_snap_points(instance::AdwFlap)
        get_snap_points(AdwSwipeable(instance))
    end
    function get_swipe_area(instance::AdwFlap, _navigation_direction, _is_drag::Bool)
        get_swipe_area(AdwSwipeable(instance), _navigation_direction, _is_drag)
    end
    function get_accessible_parent(instance::AdwFlap)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwFlap)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwFlap)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwFlap)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwFlap)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwFlap)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwFlap, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwFlap, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwFlap, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwFlap, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwFlap, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwFlap, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwFlap, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwFlap, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwFlap, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwFlap)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwFlap)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwFlap, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function HeaderBar_new()
        ret = ccall(("adw_header_bar_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwHeaderBarLeaf(ret, false)
        ret2
    end
    function get_centering_policy(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_centering_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = CenteringPolicy(ret)
        ret2
    end
    function get_decoration_layout(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_decoration_layout", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_show_back_button(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_show_back_button", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_end_title_buttons(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_show_end_title_buttons", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_start_title_buttons(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_show_start_title_buttons", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_title(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_show_title", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title_widget(instance::AdwHeaderBar)
        ret = ccall(("adw_header_bar_get_title_widget", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function pack_end(instance::AdwHeaderBar, _child::GtkWidget)
        ret = ccall(("adw_header_bar_pack_end", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function pack_start(instance::AdwHeaderBar, _child::GtkWidget)
        ret = ccall(("adw_header_bar_pack_start", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function remove(instance::AdwHeaderBar, _child::GtkWidget)
        ret = ccall(("adw_header_bar_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_centering_policy(instance::AdwHeaderBar, _centering_policy)
        ret = ccall(("adw_header_bar_set_centering_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _centering_policy)
        nothing
    end
    function set_decoration_layout(instance::AdwHeaderBar, _layout::Maybe(Union{AbstractString, Symbol}))
        _layout_maybe = nothing_to_null(_layout)
        ret = ccall(("adw_header_bar_set_decoration_layout", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _layout_maybe)
        nothing
    end
    function set_show_back_button(instance::AdwHeaderBar, _show_back_button::Bool)
        ret = ccall(("adw_header_bar_set_show_back_button", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_back_button)
        nothing
    end
    function set_show_end_title_buttons(instance::AdwHeaderBar, _setting::Bool)
        ret = ccall(("adw_header_bar_set_show_end_title_buttons", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_start_title_buttons(instance::AdwHeaderBar, _setting::Bool)
        ret = ccall(("adw_header_bar_set_show_start_title_buttons", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_title(instance::AdwHeaderBar, _show_title::Bool)
        ret = ccall(("adw_header_bar_set_show_title", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_title)
        nothing
    end
    function set_title_widget(instance::AdwHeaderBar, _title_widget::Maybe(GtkWidget))
        _title_widget_maybe = nothing_to_null(_title_widget)
        ret = ccall(("adw_header_bar_set_title_widget", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _title_widget_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwHeaderBar)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwHeaderBar)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwHeaderBar)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwHeaderBar)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwHeaderBar)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwHeaderBar)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwHeaderBar, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwHeaderBar, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwHeaderBar, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwHeaderBar, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwHeaderBar, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwHeaderBar, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwHeaderBar, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwHeaderBar, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwHeaderBar, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwHeaderBar)
        get_buildable_id(GtkBuildable(instance))
    end
    function Leaflet_new()
        ret = ccall(("adw_leaflet_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwLeafletLeaf(ret, false)
        ret2
    end
    function append(instance::AdwLeaflet, _child::GtkWidget)
        ret = ccall(("adw_leaflet_append", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwLeafletPage, ret, false)
        ret2
    end
    function get_adjacent_child(instance::AdwLeaflet, _direction)
        ret = ccall(("adw_leaflet_get_adjacent_child", libadwaita), Ptr{GObject}, (Ptr{GObject}, UInt32), instance, _direction)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_can_navigate_back(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_can_navigate_back", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_navigate_forward(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_can_navigate_forward", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_unfold(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_can_unfold", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child_by_name(instance::AdwLeaflet, _name::Union{AbstractString, Symbol})
        ret = ccall(("adw_leaflet_get_child_by_name", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring), instance, _name)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_child_transition_params(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_child_transition_params", libadwaita), Ptr{AdwSpringParams}, (Ptr{GObject},), instance)
        ret2 = convert(AdwSpringParams, ret, true)
        ret2
    end
    function get_child_transition_running(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_child_transition_running", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_fold_threshold_policy(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_fold_threshold_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = FoldThresholdPolicy(ret)
        ret2
    end
    function get_folded(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_folded", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_homogeneous(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_homogeneous", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_mode_transition_duration(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_mode_transition_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_page(instance::AdwLeaflet, _child::GtkWidget)
        ret = ccall(("adw_leaflet_get_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwLeafletPage, ret, false)
        ret2
    end
    function get_pages(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_pages", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_transition_type(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_transition_type", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LeafletTransitionType(ret)
        ret2
    end
    function get_visible_child(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_visible_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_visible_child_name(instance::AdwLeaflet)
        ret = ccall(("adw_leaflet_get_visible_child_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function insert_child_after(instance::AdwLeaflet, _child::GtkWidget, _sibling::Maybe(GtkWidget))
        _sibling_maybe = nothing_to_null(_sibling)
        ret = ccall(("adw_leaflet_insert_child_after", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _sibling_maybe)
        ret2 = convert(AdwLeafletPage, ret, false)
        ret2
    end
    function navigate(instance::AdwLeaflet, _direction)
        ret = ccall(("adw_leaflet_navigate", libadwaita), Cint, (Ptr{GObject}, UInt32), instance, _direction)
        ret2 = convert(Bool, ret)
        ret2
    end
    function prepend(instance::AdwLeaflet, _child::GtkWidget)
        ret = ccall(("adw_leaflet_prepend", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwLeafletPage, ret, false)
        ret2
    end
    function remove(instance::AdwLeaflet, _child::GtkWidget)
        ret = ccall(("adw_leaflet_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function reorder_child_after(instance::AdwLeaflet, _child::GtkWidget, _sibling::Maybe(GtkWidget))
        _sibling_maybe = nothing_to_null(_sibling)
        ret = ccall(("adw_leaflet_reorder_child_after", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _sibling_maybe)
        nothing
    end
    function set_can_navigate_back(instance::AdwLeaflet, _can_navigate_back::Bool)
        ret = ccall(("adw_leaflet_set_can_navigate_back", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_navigate_back)
        nothing
    end
    function set_can_navigate_forward(instance::AdwLeaflet, _can_navigate_forward::Bool)
        ret = ccall(("adw_leaflet_set_can_navigate_forward", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_navigate_forward)
        nothing
    end
    function set_can_unfold(instance::AdwLeaflet, _can_unfold::Bool)
        ret = ccall(("adw_leaflet_set_can_unfold", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_unfold)
        nothing
    end
    function set_child_transition_params(instance::AdwLeaflet, _params::AdwSpringParams)
        ret = ccall(("adw_leaflet_set_child_transition_params", libadwaita), Nothing, (Ptr{GObject}, Ptr{AdwSpringParams}), instance, _params)
        nothing
    end
    function set_fold_threshold_policy(instance::AdwLeaflet, _policy)
        ret = ccall(("adw_leaflet_set_fold_threshold_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_homogeneous(instance::AdwLeaflet, _homogeneous::Bool)
        ret = ccall(("adw_leaflet_set_homogeneous", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_mode_transition_duration(instance::AdwLeaflet, _duration::Integer)
        ret = ccall(("adw_leaflet_set_mode_transition_duration", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::AdwLeaflet, _transition)
        ret = ccall(("adw_leaflet_set_transition_type", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _transition)
        nothing
    end
    function set_visible_child(instance::AdwLeaflet, _visible_child::GtkWidget)
        ret = ccall(("adw_leaflet_set_visible_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _visible_child)
        nothing
    end
    function set_visible_child_name(instance::AdwLeaflet, _name::Union{AbstractString, Symbol})
        ret = ccall(("adw_leaflet_set_visible_child_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_cancel_progress(instance::AdwLeaflet)
        get_cancel_progress(AdwSwipeable(instance))
    end
    function get_distance(instance::AdwLeaflet)
        get_distance(AdwSwipeable(instance))
    end
    function get_progress(instance::AdwLeaflet)
        get_progress(AdwSwipeable(instance))
    end
    function get_snap_points(instance::AdwLeaflet)
        get_snap_points(AdwSwipeable(instance))
    end
    function get_swipe_area(instance::AdwLeaflet, _navigation_direction, _is_drag::Bool)
        get_swipe_area(AdwSwipeable(instance), _navigation_direction, _is_drag)
    end
    function get_accessible_parent(instance::AdwLeaflet)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwLeaflet)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwLeaflet)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwLeaflet)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwLeaflet)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwLeaflet)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwLeaflet, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwLeaflet, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwLeaflet, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwLeaflet, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwLeaflet, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwLeaflet, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwLeaflet, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwLeaflet, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwLeaflet, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwLeaflet)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwLeaflet)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwLeaflet, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function get_child(instance::AdwLeafletPage)
        ret = ccall(("adw_leaflet_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_name(instance::AdwLeafletPage)
        ret = ccall(("adw_leaflet_page_get_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_navigatable(instance::AdwLeafletPage)
        ret = ccall(("adw_leaflet_page_get_navigatable", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_name(instance::AdwLeafletPage, _name::Maybe(Union{AbstractString, Symbol}))
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_leaflet_page_set_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name_maybe)
        nothing
    end
    function set_navigatable(instance::AdwLeafletPage, _navigatable::Bool)
        ret = ccall(("adw_leaflet_page_set_navigatable", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _navigatable)
        nothing
    end
    function MessageDialog_new(_parent::Maybe(GtkWindow), _heading::Maybe(Union{AbstractString, Symbol}), _body::Maybe(Union{AbstractString, Symbol}))
        _parent_maybe = nothing_to_null(_parent)
        _heading_maybe = nothing_to_null(_heading)
        _body_maybe = nothing_to_null(_body)
        ret = ccall(("adw_message_dialog_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring, Cstring), _parent_maybe, _heading_maybe, _body_maybe)
        ret2 = AdwMessageDialogLeaf(ret, false)
        ret2
    end
    function add_response(instance::AdwMessageDialog, _id::Union{AbstractString, Symbol}, _label::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_add_response", libadwaita), Nothing, (Ptr{GObject}, Cstring, Cstring), instance, _id, _label)
        nothing
    end
    function choose(instance::AdwMessageDialog, _cancellable::Maybe(GCancellable), _callback::Maybe(Function))
        _cancellable_maybe = nothing_to_null(_cancellable)
        if _callback === nothing
            _callback_cfunc = C_NULL
            _callback_closure = C_NULL
        else
            _callback_cfunc = @cfunction(GAsyncReadyCallback, Nothing, (Ptr{GObject}, Ptr{GObject}, Ref{Function}))
            _callback_closure = GLib.gc_ref(_callback)
        end
        ret = ccall(("adw_message_dialog_choose", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{Cvoid}, Ptr{Nothing}), instance, _cancellable_maybe, _callback_cfunc, _callback_closure)
        nothing
    end
    function choose_finish(instance::AdwMessageDialog, _result::GAsyncResult)
        ret = ccall(("adw_message_dialog_choose_finish", libadwaita), Cstring, (Ptr{GObject}, Ptr{GObject}), instance, _result)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_body(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_body", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_body_use_markup(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_body_use_markup", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_close_response(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_close_response", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_default_response(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_default_response", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_extra_child(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_extra_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_heading(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_heading", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_heading_use_markup(instance::AdwMessageDialog)
        ret = ccall(("adw_message_dialog_get_heading_use_markup", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_response_appearance(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_get_response_appearance", libadwaita), UInt32, (Ptr{GObject}, Cstring), instance, _response)
        ret2 = ResponseAppearance(ret)
        ret2
    end
    function get_response_enabled(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_get_response_enabled", libadwaita), Cint, (Ptr{GObject}, Cstring), instance, _response)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_response_label(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_get_response_label", libadwaita), Cstring, (Ptr{GObject}, Cstring), instance, _response)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function has_response(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_has_response", libadwaita), Cint, (Ptr{GObject}, Cstring), instance, _response)
        ret2 = convert(Bool, ret)
        ret2
    end
    function response(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_response", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _response)
        nothing
    end
    function set_body(instance::AdwMessageDialog, _body::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_set_body", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _body)
        nothing
    end
    function set_body_use_markup(instance::AdwMessageDialog, _use_markup::Bool)
        ret = ccall(("adw_message_dialog_set_body_use_markup", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function set_close_response(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_set_close_response", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _response)
        nothing
    end
    function set_default_response(instance::AdwMessageDialog, _response::Maybe(Union{AbstractString, Symbol}))
        _response_maybe = nothing_to_null(_response)
        ret = ccall(("adw_message_dialog_set_default_response", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _response_maybe)
        nothing
    end
    function set_extra_child(instance::AdwMessageDialog, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_message_dialog_set_extra_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_heading(instance::AdwMessageDialog, _heading::Maybe(Union{AbstractString, Symbol}))
        _heading_maybe = nothing_to_null(_heading)
        ret = ccall(("adw_message_dialog_set_heading", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _heading_maybe)
        nothing
    end
    function set_heading_use_markup(instance::AdwMessageDialog, _use_markup::Bool)
        ret = ccall(("adw_message_dialog_set_heading_use_markup", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function set_response_appearance(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol}, _appearance)
        ret = ccall(("adw_message_dialog_set_response_appearance", libadwaita), Nothing, (Ptr{GObject}, Cstring, UInt32), instance, _response, _appearance)
        nothing
    end
    function set_response_enabled(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol}, _enabled::Bool)
        ret = ccall(("adw_message_dialog_set_response_enabled", libadwaita), Nothing, (Ptr{GObject}, Cstring, Cint), instance, _response, _enabled)
        nothing
    end
    function set_response_label(instance::AdwMessageDialog, _response::Union{AbstractString, Symbol}, _label::Union{AbstractString, Symbol})
        ret = ccall(("adw_message_dialog_set_response_label", libadwaita), Nothing, (Ptr{GObject}, Cstring, Cstring), instance, _response, _label)
        nothing
    end
    function get_accessible_parent(instance::AdwMessageDialog)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwMessageDialog)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwMessageDialog)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwMessageDialog)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwMessageDialog)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwMessageDialog)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwMessageDialog, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwMessageDialog, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwMessageDialog, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwMessageDialog, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwMessageDialog, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwMessageDialog, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwMessageDialog, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwMessageDialog, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwMessageDialog, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwMessageDialog)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_renderer(instance::AdwMessageDialog)
        get_renderer(GtkNative(instance))
    end
    function get_surface(instance::AdwMessageDialog)
        get_surface(GtkNative(instance))
    end
    function get_surface_transform(instance::AdwMessageDialog)
        get_surface_transform(GtkNative(instance))
    end
    function realize(instance::AdwMessageDialog)
        realize(GtkNative(instance))
    end
    function unrealize(instance::AdwMessageDialog)
        unrealize(GtkNative(instance))
    end
    function get_display(instance::AdwMessageDialog)
        get_display(GtkRoot(instance))
    end
    function get_focus(instance::AdwMessageDialog)
        get_focus(GtkRoot(instance))
    end
    function set_focus(instance::AdwMessageDialog, _focus::Maybe(GtkWidget))
        set_focus(GtkRoot(instance), _focus)
    end
    function NavigationPage_new(_child::GtkWidget, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_page_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring), _child, _title)
        ret2 = AdwNavigationPageLeaf(ret, false)
        ret2
    end
    function NavigationPage_new_with_tag(_child::GtkWidget, _title::Union{AbstractString, Symbol}, _tag::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_page_new_with_tag", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring, Cstring), _child, _title, _tag)
        ret2 = AdwNavigationPageLeaf(ret, false)
        ret2
    end
    function get_can_pop(instance::AdwNavigationPage)
        ret = ccall(("adw_navigation_page_get_can_pop", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child(instance::AdwNavigationPage)
        ret = ccall(("adw_navigation_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_tag(instance::AdwNavigationPage)
        ret = ccall(("adw_navigation_page_get_tag", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title(instance::AdwNavigationPage)
        ret = ccall(("adw_navigation_page_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function set_can_pop(instance::AdwNavigationPage, _can_pop::Bool)
        ret = ccall(("adw_navigation_page_set_can_pop", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_pop)
        nothing
    end
    function set_child(instance::AdwNavigationPage, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_navigation_page_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_tag(instance::AdwNavigationPage, _tag::Maybe(Union{AbstractString, Symbol}))
        _tag_maybe = nothing_to_null(_tag)
        ret = ccall(("adw_navigation_page_set_tag", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _tag_maybe)
        nothing
    end
    function set_title(instance::AdwNavigationPage, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_page_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_accessible_parent(instance::AdwNavigationPage)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwNavigationPage)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwNavigationPage)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwNavigationPage)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwNavigationPage)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwNavigationPage)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwNavigationPage, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwNavigationPage, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwNavigationPage, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwNavigationPage, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwNavigationPage, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwNavigationPage, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwNavigationPage, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwNavigationPage, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwNavigationPage, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwNavigationPage)
        get_buildable_id(GtkBuildable(instance))
    end
    function NavigationSplitView_new()
        ret = ccall(("adw_navigation_split_view_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwNavigationSplitViewLeaf(ret, false)
        ret2
    end
    function get_collapsed(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_collapsed", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_content(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwNavigationPage, ret, false)
        ret2
    end
    function get_max_sidebar_width(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_max_sidebar_width", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_min_sidebar_width(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_min_sidebar_width", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_show_content(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_show_content", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sidebar(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_sidebar", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwNavigationPage, ret, false)
        ret2
    end
    function get_sidebar_width_fraction(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_sidebar_width_fraction", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_sidebar_width_unit(instance::AdwNavigationSplitView)
        ret = ccall(("adw_navigation_split_view_get_sidebar_width_unit", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LengthUnit(ret)
        ret2
    end
    function set_collapsed(instance::AdwNavigationSplitView, _collapsed::Bool)
        ret = ccall(("adw_navigation_split_view_set_collapsed", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _collapsed)
        nothing
    end
    function set_content(instance::AdwNavigationSplitView, _content::Maybe(AdwNavigationPage))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_navigation_split_view_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function set_max_sidebar_width(instance::AdwNavigationSplitView, _width::Real)
        ret = ccall(("adw_navigation_split_view_set_max_sidebar_width", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _width)
        nothing
    end
    function set_min_sidebar_width(instance::AdwNavigationSplitView, _width::Real)
        ret = ccall(("adw_navigation_split_view_set_min_sidebar_width", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _width)
        nothing
    end
    function set_show_content(instance::AdwNavigationSplitView, _show_content::Bool)
        ret = ccall(("adw_navigation_split_view_set_show_content", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_content)
        nothing
    end
    function set_sidebar(instance::AdwNavigationSplitView, _sidebar::Maybe(AdwNavigationPage))
        _sidebar_maybe = nothing_to_null(_sidebar)
        ret = ccall(("adw_navigation_split_view_set_sidebar", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sidebar_maybe)
        nothing
    end
    function set_sidebar_width_fraction(instance::AdwNavigationSplitView, _fraction::Real)
        ret = ccall(("adw_navigation_split_view_set_sidebar_width_fraction", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_sidebar_width_unit(instance::AdwNavigationSplitView, _unit)
        ret = ccall(("adw_navigation_split_view_set_sidebar_width_unit", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _unit)
        nothing
    end
    function get_accessible_parent(instance::AdwNavigationSplitView)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwNavigationSplitView)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwNavigationSplitView)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwNavigationSplitView)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwNavigationSplitView)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwNavigationSplitView)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwNavigationSplitView, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwNavigationSplitView, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwNavigationSplitView, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwNavigationSplitView, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwNavigationSplitView, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwNavigationSplitView, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwNavigationSplitView, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwNavigationSplitView, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwNavigationSplitView, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwNavigationSplitView)
        get_buildable_id(GtkBuildable(instance))
    end
    function NavigationView_new()
        ret = ccall(("adw_navigation_view_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwNavigationViewLeaf(ret, false)
        ret2
    end
    function add(instance::AdwNavigationView, _page::AdwNavigationPage)
        ret = ccall(("adw_navigation_view_add", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function find_page(instance::AdwNavigationView, _tag::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_view_find_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring), instance, _tag)
        ret2 = convert_if_not_null(AdwNavigationPage, ret, false)
        ret2
    end
    function get_animate_transitions(instance::AdwNavigationView)
        ret = ccall(("adw_navigation_view_get_animate_transitions", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_navigation_stack(instance::AdwNavigationView)
        ret = ccall(("adw_navigation_view_get_navigation_stack", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_pop_on_escape(instance::AdwNavigationView)
        ret = ccall(("adw_navigation_view_get_pop_on_escape", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_previous_page(instance::AdwNavigationView, _page::AdwNavigationPage)
        ret = ccall(("adw_navigation_view_get_previous_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert_if_not_null(AdwNavigationPage, ret, false)
        ret2
    end
    function get_visible_page(instance::AdwNavigationView)
        ret = ccall(("adw_navigation_view_get_visible_page", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwNavigationPage, ret, false)
        ret2
    end
    function pop(instance::AdwNavigationView)
        ret = ccall(("adw_navigation_view_pop", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function pop_to_page(instance::AdwNavigationView, _page::AdwNavigationPage)
        ret = ccall(("adw_navigation_view_pop_to_page", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function pop_to_tag(instance::AdwNavigationView, _tag::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_view_pop_to_tag", libadwaita), Cint, (Ptr{GObject}, Cstring), instance, _tag)
        ret2 = convert(Bool, ret)
        ret2
    end
    function push(instance::AdwNavigationView, _page::AdwNavigationPage)
        ret = ccall(("adw_navigation_view_push", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function push_by_tag(instance::AdwNavigationView, _tag::Union{AbstractString, Symbol})
        ret = ccall(("adw_navigation_view_push_by_tag", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _tag)
        nothing
    end
    function remove(instance::AdwNavigationView, _page::AdwNavigationPage)
        ret = ccall(("adw_navigation_view_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function replace(instance::AdwNavigationView, _pages)
        _pages_arr = convert(Vector{Ptr{GObject}}, _pages)
        _n_pages = length(_pages)
        ret = ccall(("adw_navigation_view_replace", libadwaita), Nothing, (Ptr{GObject}, Ptr{Ptr{GObject}}, Int32), instance, _pages_arr, _n_pages)
        nothing
    end
    function replace_with_tags(instance::AdwNavigationView, _tags)
        _n_tags = length(_tags)
        ret = ccall(("adw_navigation_view_replace_with_tags", libadwaita), Nothing, (Ptr{GObject}, Ptr{Cstring}, Int32), instance, _tags, _n_tags)
        nothing
    end
    function set_animate_transitions(instance::AdwNavigationView, _animate_transitions::Bool)
        ret = ccall(("adw_navigation_view_set_animate_transitions", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _animate_transitions)
        nothing
    end
    function set_pop_on_escape(instance::AdwNavigationView, _pop_on_escape::Bool)
        ret = ccall(("adw_navigation_view_set_pop_on_escape", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _pop_on_escape)
        nothing
    end
    function get_cancel_progress(instance::AdwNavigationView)
        get_cancel_progress(AdwSwipeable(instance))
    end
    function get_distance(instance::AdwNavigationView)
        get_distance(AdwSwipeable(instance))
    end
    function get_progress(instance::AdwNavigationView)
        get_progress(AdwSwipeable(instance))
    end
    function get_snap_points(instance::AdwNavigationView)
        get_snap_points(AdwSwipeable(instance))
    end
    function get_swipe_area(instance::AdwNavigationView, _navigation_direction, _is_drag::Bool)
        get_swipe_area(AdwSwipeable(instance), _navigation_direction, _is_drag)
    end
    function get_accessible_parent(instance::AdwNavigationView)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwNavigationView)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwNavigationView)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwNavigationView)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwNavigationView)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwNavigationView)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwNavigationView, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwNavigationView, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwNavigationView, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwNavigationView, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwNavigationView, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwNavigationView, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwNavigationView, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwNavigationView, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwNavigationView, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwNavigationView)
        get_buildable_id(GtkBuildable(instance))
    end
    function OverlaySplitView_new()
        ret = ccall(("adw_overlay_split_view_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwOverlaySplitViewLeaf(ret, false)
        ret2
    end
    function get_collapsed(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_collapsed", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_content(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_enable_hide_gesture(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_enable_hide_gesture", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enable_show_gesture(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_enable_show_gesture", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_sidebar_width(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_max_sidebar_width", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_min_sidebar_width(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_min_sidebar_width", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_pin_sidebar(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_pin_sidebar", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_sidebar(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_show_sidebar", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sidebar(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_sidebar", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_sidebar_position(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_sidebar_position", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = PackType(ret)
        ret2
    end
    function get_sidebar_width_fraction(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_sidebar_width_fraction", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_sidebar_width_unit(instance::AdwOverlaySplitView)
        ret = ccall(("adw_overlay_split_view_get_sidebar_width_unit", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = LengthUnit(ret)
        ret2
    end
    function set_collapsed(instance::AdwOverlaySplitView, _collapsed::Bool)
        ret = ccall(("adw_overlay_split_view_set_collapsed", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _collapsed)
        nothing
    end
    function set_content(instance::AdwOverlaySplitView, _content::Maybe(GtkWidget))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_overlay_split_view_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function set_enable_hide_gesture(instance::AdwOverlaySplitView, _enable_hide_gesture::Bool)
        ret = ccall(("adw_overlay_split_view_set_enable_hide_gesture", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_hide_gesture)
        nothing
    end
    function set_enable_show_gesture(instance::AdwOverlaySplitView, _enable_show_gesture::Bool)
        ret = ccall(("adw_overlay_split_view_set_enable_show_gesture", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_show_gesture)
        nothing
    end
    function set_max_sidebar_width(instance::AdwOverlaySplitView, _width::Real)
        ret = ccall(("adw_overlay_split_view_set_max_sidebar_width", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _width)
        nothing
    end
    function set_min_sidebar_width(instance::AdwOverlaySplitView, _width::Real)
        ret = ccall(("adw_overlay_split_view_set_min_sidebar_width", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _width)
        nothing
    end
    function set_pin_sidebar(instance::AdwOverlaySplitView, _pin_sidebar::Bool)
        ret = ccall(("adw_overlay_split_view_set_pin_sidebar", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _pin_sidebar)
        nothing
    end
    function set_show_sidebar(instance::AdwOverlaySplitView, _show_sidebar::Bool)
        ret = ccall(("adw_overlay_split_view_set_show_sidebar", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_sidebar)
        nothing
    end
    function set_sidebar(instance::AdwOverlaySplitView, _sidebar::Maybe(GtkWidget))
        _sidebar_maybe = nothing_to_null(_sidebar)
        ret = ccall(("adw_overlay_split_view_set_sidebar", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _sidebar_maybe)
        nothing
    end
    function set_sidebar_position(instance::AdwOverlaySplitView, _position)
        ret = ccall(("adw_overlay_split_view_set_sidebar_position", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _position)
        nothing
    end
    function set_sidebar_width_fraction(instance::AdwOverlaySplitView, _fraction::Real)
        ret = ccall(("adw_overlay_split_view_set_sidebar_width_fraction", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_sidebar_width_unit(instance::AdwOverlaySplitView, _unit)
        ret = ccall(("adw_overlay_split_view_set_sidebar_width_unit", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _unit)
        nothing
    end
    function get_cancel_progress(instance::AdwOverlaySplitView)
        get_cancel_progress(AdwSwipeable(instance))
    end
    function get_distance(instance::AdwOverlaySplitView)
        get_distance(AdwSwipeable(instance))
    end
    function get_progress(instance::AdwOverlaySplitView)
        get_progress(AdwSwipeable(instance))
    end
    function get_snap_points(instance::AdwOverlaySplitView)
        get_snap_points(AdwSwipeable(instance))
    end
    function get_swipe_area(instance::AdwOverlaySplitView, _navigation_direction, _is_drag::Bool)
        get_swipe_area(AdwSwipeable(instance), _navigation_direction, _is_drag)
    end
    function get_accessible_parent(instance::AdwOverlaySplitView)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwOverlaySplitView)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwOverlaySplitView)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwOverlaySplitView)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwOverlaySplitView)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwOverlaySplitView)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwOverlaySplitView, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwOverlaySplitView, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwOverlaySplitView, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwOverlaySplitView, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwOverlaySplitView, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwOverlaySplitView, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwOverlaySplitView, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwOverlaySplitView, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwOverlaySplitView, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwOverlaySplitView)
        get_buildable_id(GtkBuildable(instance))
    end
    function PasswordEntryRow_new()
        ret = ccall(("adw_password_entry_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwPasswordEntryRowLeaf(ret, false)
        ret2
    end
    function get_accessible_parent(instance::AdwPasswordEntryRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwPasswordEntryRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwPasswordEntryRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwPasswordEntryRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwPasswordEntryRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwPasswordEntryRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwPasswordEntryRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwPasswordEntryRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwPasswordEntryRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwPasswordEntryRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwPasswordEntryRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwPasswordEntryRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwPasswordEntryRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwPasswordEntryRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwPasswordEntryRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwPasswordEntryRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwPasswordEntryRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwPasswordEntryRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwPasswordEntryRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwPasswordEntryRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwPasswordEntryRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function delegate_get_accessible_platform_state(instance::AdwPasswordEntryRow, _state)
        delegate_get_accessible_platform_state(GtkEditable(instance), _state)
    end
    function delete_selection(instance::AdwPasswordEntryRow)
        delete_selection(GtkEditable(instance))
    end
    function delete_text(instance::AdwPasswordEntryRow, _start_pos::Integer, _end_pos::Integer)
        delete_text(GtkEditable(instance), _start_pos, _end_pos)
    end
    function finish_delegate(instance::AdwPasswordEntryRow)
        finish_delegate(GtkEditable(instance))
    end
    function get_alignment(instance::AdwPasswordEntryRow)
        get_alignment(GtkEditable(instance))
    end
    function get_chars(instance::AdwPasswordEntryRow, _start_pos::Integer, _end_pos::Integer)
        get_chars(GtkEditable(instance), _start_pos, _end_pos)
    end
    function get_delegate(instance::AdwPasswordEntryRow)
        get_delegate(GtkEditable(instance))
    end
    function get_editable(instance::AdwPasswordEntryRow)
        get_editable(GtkEditable(instance))
    end
    function get_enable_undo(instance::AdwPasswordEntryRow)
        get_enable_undo(GtkEditable(instance))
    end
    function get_max_width_chars(instance::AdwPasswordEntryRow)
        get_max_width_chars(GtkEditable(instance))
    end
    function get_position(instance::AdwPasswordEntryRow)
        get_position(GtkEditable(instance))
    end
    function get_selection_bounds(instance::AdwPasswordEntryRow)
        get_selection_bounds(GtkEditable(instance))
    end
    function get_text(instance::AdwPasswordEntryRow)
        get_text(GtkEditable(instance))
    end
    function get_width_chars(instance::AdwPasswordEntryRow)
        get_width_chars(GtkEditable(instance))
    end
    function init_delegate(instance::AdwPasswordEntryRow)
        init_delegate(GtkEditable(instance))
    end
    function insert_text(instance::AdwPasswordEntryRow, _text::Union{AbstractString, Symbol}, _length::Integer, _position::Integer)
        insert_text(GtkEditable(instance), _text, _length, _position)
    end
    function select_region(instance::AdwPasswordEntryRow, _start_pos::Integer, _end_pos::Integer)
        select_region(GtkEditable(instance), _start_pos, _end_pos)
    end
    function set_alignment(instance::AdwPasswordEntryRow, _xalign::Real)
        set_alignment(GtkEditable(instance), _xalign)
    end
    function set_editable(instance::AdwPasswordEntryRow, _is_editable::Bool)
        set_editable(GtkEditable(instance), _is_editable)
    end
    function set_enable_undo(instance::AdwPasswordEntryRow, _enable_undo::Bool)
        set_enable_undo(GtkEditable(instance), _enable_undo)
    end
    function set_max_width_chars(instance::AdwPasswordEntryRow, _n_chars::Integer)
        set_max_width_chars(GtkEditable(instance), _n_chars)
    end
    function set_position(instance::AdwPasswordEntryRow, _position::Integer)
        set_position(GtkEditable(instance), _position)
    end
    function set_text(instance::AdwPasswordEntryRow, _text::Union{AbstractString, Symbol})
        set_text(GtkEditable(instance), _text)
    end
    function set_width_chars(instance::AdwPasswordEntryRow, _n_chars::Integer)
        set_width_chars(GtkEditable(instance), _n_chars)
    end
    function PreferencesGroup_new()
        ret = ccall(("adw_preferences_group_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwPreferencesGroupLeaf(ret, false)
        ret2
    end
    function add(instance::AdwPreferencesGroup, _child::GtkWidget)
        ret = ccall(("adw_preferences_group_add", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function get_description(instance::AdwPreferencesGroup)
        ret = ccall(("adw_preferences_group_get_description", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_header_suffix(instance::AdwPreferencesGroup)
        ret = ccall(("adw_preferences_group_get_header_suffix", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_title(instance::AdwPreferencesGroup)
        ret = ccall(("adw_preferences_group_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function remove(instance::AdwPreferencesGroup, _child::GtkWidget)
        ret = ccall(("adw_preferences_group_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_description(instance::AdwPreferencesGroup, _description::Maybe(Union{AbstractString, Symbol}))
        _description_maybe = nothing_to_null(_description)
        ret = ccall(("adw_preferences_group_set_description", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _description_maybe)
        nothing
    end
    function set_header_suffix(instance::AdwPreferencesGroup, _suffix::Maybe(GtkWidget))
        _suffix_maybe = nothing_to_null(_suffix)
        ret = ccall(("adw_preferences_group_set_header_suffix", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _suffix_maybe)
        nothing
    end
    function set_title(instance::AdwPreferencesGroup, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_preferences_group_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_accessible_parent(instance::AdwPreferencesGroup)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwPreferencesGroup)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwPreferencesGroup)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwPreferencesGroup)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwPreferencesGroup)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwPreferencesGroup)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwPreferencesGroup, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwPreferencesGroup, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwPreferencesGroup, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwPreferencesGroup, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwPreferencesGroup, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwPreferencesGroup, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwPreferencesGroup, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwPreferencesGroup, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwPreferencesGroup, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwPreferencesGroup)
        get_buildable_id(GtkBuildable(instance))
    end
    function PreferencesPage_new()
        ret = ccall(("adw_preferences_page_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwPreferencesPageLeaf(ret, false)
        ret2
    end
    function add(instance::AdwPreferencesPage, _group::AdwPreferencesGroup)
        ret = ccall(("adw_preferences_page_add", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _group)
        nothing
    end
    function get_description(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_get_description", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_icon_name(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_name(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_get_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_use_underline(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_get_use_underline", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function remove(instance::AdwPreferencesPage, _group::AdwPreferencesGroup)
        ret = ccall(("adw_preferences_page_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _group)
        nothing
    end
    function scroll_to_top(instance::AdwPreferencesPage)
        ret = ccall(("adw_preferences_page_scroll_to_top", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_description(instance::AdwPreferencesPage, _description::Union{AbstractString, Symbol})
        ret = ccall(("adw_preferences_page_set_description", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _description)
        nothing
    end
    function set_icon_name(instance::AdwPreferencesPage, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_preferences_page_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_name(instance::AdwPreferencesPage, _name::Maybe(Union{AbstractString, Symbol}))
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_preferences_page_set_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name_maybe)
        nothing
    end
    function set_title(instance::AdwPreferencesPage, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_preferences_page_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_use_underline(instance::AdwPreferencesPage, _use_underline::Bool)
        ret = ccall(("adw_preferences_page_set_use_underline", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_accessible_parent(instance::AdwPreferencesPage)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwPreferencesPage)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwPreferencesPage)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwPreferencesPage)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwPreferencesPage)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwPreferencesPage)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwPreferencesPage, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwPreferencesPage, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwPreferencesPage, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwPreferencesPage, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwPreferencesPage, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwPreferencesPage, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwPreferencesPage, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwPreferencesPage, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwPreferencesPage, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwPreferencesPage)
        get_buildable_id(GtkBuildable(instance))
    end
    function PreferencesRow_new()
        ret = ccall(("adw_preferences_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwPreferencesRowLeaf(ret, false)
        ret2
    end
    function get_title(instance::AdwPreferencesRow)
        ret = ccall(("adw_preferences_row_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title_selectable(instance::AdwPreferencesRow)
        ret = ccall(("adw_preferences_row_get_title_selectable", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_markup(instance::AdwPreferencesRow)
        ret = ccall(("adw_preferences_row_get_use_markup", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::AdwPreferencesRow)
        ret = ccall(("adw_preferences_row_get_use_underline", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_title(instance::AdwPreferencesRow, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_preferences_row_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_title_selectable(instance::AdwPreferencesRow, _title_selectable::Bool)
        ret = ccall(("adw_preferences_row_set_title_selectable", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _title_selectable)
        nothing
    end
    function set_use_markup(instance::AdwPreferencesRow, _use_markup::Bool)
        ret = ccall(("adw_preferences_row_set_use_markup", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function set_use_underline(instance::AdwPreferencesRow, _use_underline::Bool)
        ret = ccall(("adw_preferences_row_set_use_underline", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_accessible_parent(instance::AdwPreferencesRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwPreferencesRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwPreferencesRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwPreferencesRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwPreferencesRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwPreferencesRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwPreferencesRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwPreferencesRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwPreferencesRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwPreferencesRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwPreferencesRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwPreferencesRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwPreferencesRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwPreferencesRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwPreferencesRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwPreferencesRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwPreferencesRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwPreferencesRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwPreferencesRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwPreferencesRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwPreferencesRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function PreferencesWindow_new()
        ret = ccall(("adw_preferences_window_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwPreferencesWindowLeaf(ret, false)
        ret2
    end
    function add(instance::AdwPreferencesWindow, _page::AdwPreferencesPage)
        ret = ccall(("adw_preferences_window_add", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function add_toast(instance::AdwPreferencesWindow, _toast::AdwToast)
        _toast = GLib.glib_ref(_toast)
        ret = ccall(("adw_preferences_window_add_toast", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _toast)
        nothing
    end
    function close_subpage(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_close_subpage", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_can_navigate_back(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_get_can_navigate_back", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_search_enabled(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_get_search_enabled", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_page(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_get_visible_page", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwPreferencesPage, ret, false)
        ret2
    end
    function get_visible_page_name(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_get_visible_page_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function pop_subpage(instance::AdwPreferencesWindow)
        ret = ccall(("adw_preferences_window_pop_subpage", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function present_subpage(instance::AdwPreferencesWindow, _subpage::GtkWidget)
        ret = ccall(("adw_preferences_window_present_subpage", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _subpage)
        nothing
    end
    function push_subpage(instance::AdwPreferencesWindow, _page::AdwNavigationPage)
        ret = ccall(("adw_preferences_window_push_subpage", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function remove(instance::AdwPreferencesWindow, _page::AdwPreferencesPage)
        ret = ccall(("adw_preferences_window_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function set_can_navigate_back(instance::AdwPreferencesWindow, _can_navigate_back::Bool)
        ret = ccall(("adw_preferences_window_set_can_navigate_back", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_navigate_back)
        nothing
    end
    function set_search_enabled(instance::AdwPreferencesWindow, _search_enabled::Bool)
        ret = ccall(("adw_preferences_window_set_search_enabled", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _search_enabled)
        nothing
    end
    function set_visible_page(instance::AdwPreferencesWindow, _page::AdwPreferencesPage)
        ret = ccall(("adw_preferences_window_set_visible_page", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function set_visible_page_name(instance::AdwPreferencesWindow, _name::Union{AbstractString, Symbol})
        ret = ccall(("adw_preferences_window_set_visible_page_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_accessible_parent(instance::AdwPreferencesWindow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwPreferencesWindow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwPreferencesWindow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwPreferencesWindow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwPreferencesWindow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwPreferencesWindow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwPreferencesWindow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwPreferencesWindow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwPreferencesWindow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwPreferencesWindow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwPreferencesWindow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwPreferencesWindow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwPreferencesWindow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwPreferencesWindow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwPreferencesWindow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwPreferencesWindow)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_renderer(instance::AdwPreferencesWindow)
        get_renderer(GtkNative(instance))
    end
    function get_surface(instance::AdwPreferencesWindow)
        get_surface(GtkNative(instance))
    end
    function get_surface_transform(instance::AdwPreferencesWindow)
        get_surface_transform(GtkNative(instance))
    end
    function realize(instance::AdwPreferencesWindow)
        realize(GtkNative(instance))
    end
    function unrealize(instance::AdwPreferencesWindow)
        unrealize(GtkNative(instance))
    end
    function get_display(instance::AdwPreferencesWindow)
        get_display(GtkRoot(instance))
    end
    function get_focus(instance::AdwPreferencesWindow)
        get_focus(GtkRoot(instance))
    end
    function set_focus(instance::AdwPreferencesWindow, _focus::Maybe(GtkWidget))
        set_focus(GtkRoot(instance), _focus)
    end
    function PropertyAnimationTarget_new(_object::GObject, _property_name::Union{AbstractString, Symbol})
        ret = ccall(("adw_property_animation_target_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring), _object, _property_name)
        ret2 = AdwPropertyAnimationTargetLeaf(ret, true)
        ret2
    end
    function PropertyAnimationTarget_new_for_pspec(_object::GObject, _pspec::GParam)
        ret = ccall(("adw_property_animation_target_new_for_pspec", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GParam}), _object, _pspec)
        ret2 = AdwPropertyAnimationTargetLeaf(ret, true)
        ret2
    end
    function get_object(instance::AdwPropertyAnimationTarget)
        ret = ccall(("adw_property_animation_target_get_object", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GObject, ret, false)
        ret2
    end
    function get_pspec(instance::AdwPropertyAnimationTarget)
        ret = ccall(("adw_property_animation_target_get_pspec", libadwaita), Ptr{GParam}, (Ptr{GObject},), instance)
        ret2 = convert(GParam, ret)
        ret2
    end
    function SpinRow_new(_adjustment::Maybe(GtkAdjustment), _climb_rate::Real, _digits::Integer)
        _adjustment_maybe = nothing_to_null(_adjustment)
        ret = ccall(("adw_spin_row_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Float64, UInt32), _adjustment_maybe, _climb_rate, _digits)
        ret2 = AdwSpinRowLeaf(ret, false)
        ret2
    end
    function SpinRow_new_with_range(_min::Real, _max::Real, _step::Real)
        ret = ccall(("adw_spin_row_new_with_range", libadwaita), Ptr{GObject}, (Float64, Float64, Float64), _min, _max, _step)
        ret2 = AdwSpinRowLeaf(ret, false)
        ret2
    end
    function configure(instance::AdwSpinRow, _adjustment::Maybe(GtkAdjustment), _climb_rate::Real, _digits::Integer)
        _adjustment_maybe = nothing_to_null(_adjustment)
        ret = ccall(("adw_spin_row_configure", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Float64, UInt32), instance, _adjustment_maybe, _climb_rate, _digits)
        nothing
    end
    function get_adjustment(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_adjustment", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_climb_rate(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_climb_rate", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_digits(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_digits", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_numeric(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_numeric", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_snap_to_ticks(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_snap_to_ticks", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_update_policy(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_update_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = SpinButtonUpdatePolicy(ret)
        ret2
    end
    function get_value(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_value", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_get_wrap", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_adjustment(instance::AdwSpinRow, _adjustment::Maybe(GtkAdjustment))
        _adjustment_maybe = nothing_to_null(_adjustment)
        ret = ccall(("adw_spin_row_set_adjustment", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment_maybe)
        nothing
    end
    function set_climb_rate(instance::AdwSpinRow, _climb_rate::Real)
        ret = ccall(("adw_spin_row_set_climb_rate", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _climb_rate)
        nothing
    end
    function set_digits(instance::AdwSpinRow, _digits::Integer)
        ret = ccall(("adw_spin_row_set_digits", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _digits)
        nothing
    end
    function set_numeric(instance::AdwSpinRow, _numeric::Bool)
        ret = ccall(("adw_spin_row_set_numeric", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _numeric)
        nothing
    end
    function set_range(instance::AdwSpinRow, _min::Real, _max::Real)
        ret = ccall(("adw_spin_row_set_range", libadwaita), Nothing, (Ptr{GObject}, Float64, Float64), instance, _min, _max)
        nothing
    end
    function set_snap_to_ticks(instance::AdwSpinRow, _snap_to_ticks::Bool)
        ret = ccall(("adw_spin_row_set_snap_to_ticks", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _snap_to_ticks)
        nothing
    end
    function set_update_policy(instance::AdwSpinRow, _policy)
        ret = ccall(("adw_spin_row_set_update_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_value(instance::AdwSpinRow, _value::Real)
        ret = ccall(("adw_spin_row_set_value", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_wrap(instance::AdwSpinRow, _wrap::Bool)
        ret = ccall(("adw_spin_row_set_wrap", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _wrap)
        nothing
    end
    function update(instance::AdwSpinRow)
        ret = ccall(("adw_spin_row_update", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_accessible_parent(instance::AdwSpinRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwSpinRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwSpinRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwSpinRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwSpinRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwSpinRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwSpinRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwSpinRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwSpinRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwSpinRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwSpinRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwSpinRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwSpinRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwSpinRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwSpinRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwSpinRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwSpinRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwSpinRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwSpinRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwSpinRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwSpinRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function delegate_get_accessible_platform_state(instance::AdwSpinRow, _state)
        delegate_get_accessible_platform_state(GtkEditable(instance), _state)
    end
    function delete_selection(instance::AdwSpinRow)
        delete_selection(GtkEditable(instance))
    end
    function delete_text(instance::AdwSpinRow, _start_pos::Integer, _end_pos::Integer)
        delete_text(GtkEditable(instance), _start_pos, _end_pos)
    end
    function finish_delegate(instance::AdwSpinRow)
        finish_delegate(GtkEditable(instance))
    end
    function get_alignment(instance::AdwSpinRow)
        get_alignment(GtkEditable(instance))
    end
    function get_chars(instance::AdwSpinRow, _start_pos::Integer, _end_pos::Integer)
        get_chars(GtkEditable(instance), _start_pos, _end_pos)
    end
    function get_delegate(instance::AdwSpinRow)
        get_delegate(GtkEditable(instance))
    end
    function get_editable(instance::AdwSpinRow)
        get_editable(GtkEditable(instance))
    end
    function get_enable_undo(instance::AdwSpinRow)
        get_enable_undo(GtkEditable(instance))
    end
    function get_max_width_chars(instance::AdwSpinRow)
        get_max_width_chars(GtkEditable(instance))
    end
    function get_position(instance::AdwSpinRow)
        get_position(GtkEditable(instance))
    end
    function get_selection_bounds(instance::AdwSpinRow)
        get_selection_bounds(GtkEditable(instance))
    end
    function get_text(instance::AdwSpinRow)
        get_text(GtkEditable(instance))
    end
    function get_width_chars(instance::AdwSpinRow)
        get_width_chars(GtkEditable(instance))
    end
    function init_delegate(instance::AdwSpinRow)
        init_delegate(GtkEditable(instance))
    end
    function insert_text(instance::AdwSpinRow, _text::Union{AbstractString, Symbol}, _length::Integer, _position::Integer)
        insert_text(GtkEditable(instance), _text, _length, _position)
    end
    function select_region(instance::AdwSpinRow, _start_pos::Integer, _end_pos::Integer)
        select_region(GtkEditable(instance), _start_pos, _end_pos)
    end
    function set_alignment(instance::AdwSpinRow, _xalign::Real)
        set_alignment(GtkEditable(instance), _xalign)
    end
    function set_editable(instance::AdwSpinRow, _is_editable::Bool)
        set_editable(GtkEditable(instance), _is_editable)
    end
    function set_enable_undo(instance::AdwSpinRow, _enable_undo::Bool)
        set_enable_undo(GtkEditable(instance), _enable_undo)
    end
    function set_max_width_chars(instance::AdwSpinRow, _n_chars::Integer)
        set_max_width_chars(GtkEditable(instance), _n_chars)
    end
    function set_position(instance::AdwSpinRow, _position::Integer)
        set_position(GtkEditable(instance), _position)
    end
    function set_text(instance::AdwSpinRow, _text::Union{AbstractString, Symbol})
        set_text(GtkEditable(instance), _text)
    end
    function set_width_chars(instance::AdwSpinRow, _n_chars::Integer)
        set_width_chars(GtkEditable(instance), _n_chars)
    end
    function SplitButton_new()
        ret = ccall(("adw_split_button_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwSplitButtonLeaf(ret, false)
        ret2
    end
    function get_can_shrink(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_can_shrink", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_direction(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_direction", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ArrowType(ret)
        ret2
    end
    function get_dropdown_tooltip(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_dropdown_tooltip", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_icon_name(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_label(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_label", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_menu_model(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_menu_model", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GMenuModel, ret, false)
        ret2
    end
    function get_popover(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_popover", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkPopover, ret, false)
        ret2
    end
    function get_use_underline(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_get_use_underline", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function popdown(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_popdown", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function popup(instance::AdwSplitButton)
        ret = ccall(("adw_split_button_popup", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_can_shrink(instance::AdwSplitButton, _can_shrink::Bool)
        ret = ccall(("adw_split_button_set_can_shrink", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _can_shrink)
        nothing
    end
    function set_child(instance::AdwSplitButton, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_split_button_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_direction(instance::AdwSplitButton, _direction)
        ret = ccall(("adw_split_button_set_direction", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _direction)
        nothing
    end
    function set_dropdown_tooltip(instance::AdwSplitButton, _tooltip::Union{AbstractString, Symbol})
        ret = ccall(("adw_split_button_set_dropdown_tooltip", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _tooltip)
        nothing
    end
    function set_icon_name(instance::AdwSplitButton, _icon_name::Union{AbstractString, Symbol})
        ret = ccall(("adw_split_button_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name)
        nothing
    end
    function set_label(instance::AdwSplitButton, _label::Union{AbstractString, Symbol})
        ret = ccall(("adw_split_button_set_label", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_menu_model(instance::AdwSplitButton, _menu_model::Maybe(GMenuModel))
        _menu_model_maybe = nothing_to_null(_menu_model)
        ret = ccall(("adw_split_button_set_menu_model", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu_model_maybe)
        nothing
    end
    function set_popover(instance::AdwSplitButton, _popover::Maybe(GtkPopover))
        _popover_maybe = nothing_to_null(_popover)
        ret = ccall(("adw_split_button_set_popover", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _popover_maybe)
        nothing
    end
    function set_use_underline(instance::AdwSplitButton, _use_underline::Bool)
        ret = ccall(("adw_split_button_set_use_underline", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_accessible_parent(instance::AdwSplitButton)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwSplitButton)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwSplitButton)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwSplitButton)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwSplitButton)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwSplitButton)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwSplitButton, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwSplitButton, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwSplitButton, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwSplitButton, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwSplitButton, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwSplitButton, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwSplitButton, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwSplitButton, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwSplitButton, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwSplitButton)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwSplitButton)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwSplitButton, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwSplitButton, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwSplitButton, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwSplitButton)
        get_buildable_id(GtkBuildable(instance))
    end
    function SpringAnimation_new(_widget::GtkWidget, _from::Real, _to::Real, _spring_params::AdwSpringParams, _target::AdwAnimationTarget)
        _target = GLib.glib_ref(_target)
        ret = ccall(("adw_spring_animation_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Float64, Float64, Ptr{AdwSpringParams}, Ptr{GObject}), _widget, _from, _to, _spring_params, _target)
        ret2 = AdwSpringAnimationLeaf(ret, false)
        ret2
    end
    function calculate_value(instance::AdwSpringAnimation, _time::Integer)
        ret = ccall(("adw_spring_animation_calculate_value", libadwaita), Float64, (Ptr{GObject}, UInt32), instance, _time)
        ret
    end
    function calculate_velocity(instance::AdwSpringAnimation, _time::Integer)
        ret = ccall(("adw_spring_animation_calculate_velocity", libadwaita), Float64, (Ptr{GObject}, UInt32), instance, _time)
        ret
    end
    function get_clamp(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_clamp", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_epsilon(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_epsilon", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_estimated_duration(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_estimated_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_initial_velocity(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_initial_velocity", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_spring_params(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_spring_params", libadwaita), Ptr{AdwSpringParams}, (Ptr{GObject},), instance)
        ret2 = convert(AdwSpringParams, ret, false)
        ret2
    end
    function get_value_from(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_value_from", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value_to(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_value_to", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_velocity(instance::AdwSpringAnimation)
        ret = ccall(("adw_spring_animation_get_velocity", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_clamp(instance::AdwSpringAnimation, _clamp::Bool)
        ret = ccall(("adw_spring_animation_set_clamp", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _clamp)
        nothing
    end
    function set_epsilon(instance::AdwSpringAnimation, _epsilon::Real)
        ret = ccall(("adw_spring_animation_set_epsilon", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _epsilon)
        nothing
    end
    function set_initial_velocity(instance::AdwSpringAnimation, _velocity::Real)
        ret = ccall(("adw_spring_animation_set_initial_velocity", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _velocity)
        nothing
    end
    function set_spring_params(instance::AdwSpringAnimation, _spring_params::AdwSpringParams)
        ret = ccall(("adw_spring_animation_set_spring_params", libadwaita), Nothing, (Ptr{GObject}, Ptr{AdwSpringParams}), instance, _spring_params)
        nothing
    end
    function set_value_from(instance::AdwSpringAnimation, _value::Real)
        ret = ccall(("adw_spring_animation_set_value_from", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_value_to(instance::AdwSpringAnimation, _value::Real)
        ret = ccall(("adw_spring_animation_set_value_to", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function Squeezer_new()
        ret = ccall(("adw_squeezer_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwSqueezerLeaf(ret, false)
        ret2
    end
    function add(instance::AdwSqueezer, _child::GtkWidget)
        ret = ccall(("adw_squeezer_add", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwSqueezerPage, ret, false)
        ret2
    end
    function get_allow_none(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_allow_none", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_homogeneous(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_homogeneous", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_interpolate_size(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_interpolate_size", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_page(instance::AdwSqueezer, _child::GtkWidget)
        ret = ccall(("adw_squeezer_get_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwSqueezerPage, ret, false)
        ret2
    end
    function get_pages(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_pages", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_switch_threshold_policy(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_switch_threshold_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = FoldThresholdPolicy(ret)
        ret2
    end
    function get_transition_duration(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_transition_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_transition_running(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_transition_running", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_type(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_transition_type", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = SqueezerTransitionType(ret)
        ret2
    end
    function get_visible_child(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_visible_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_xalign(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_xalign", libadwaita), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_yalign(instance::AdwSqueezer)
        ret = ccall(("adw_squeezer_get_yalign", libadwaita), Float32, (Ptr{GObject},), instance)
        ret
    end
    function remove(instance::AdwSqueezer, _child::GtkWidget)
        ret = ccall(("adw_squeezer_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_allow_none(instance::AdwSqueezer, _allow_none::Bool)
        ret = ccall(("adw_squeezer_set_allow_none", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_none)
        nothing
    end
    function set_homogeneous(instance::AdwSqueezer, _homogeneous::Bool)
        ret = ccall(("adw_squeezer_set_homogeneous", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_interpolate_size(instance::AdwSqueezer, _interpolate_size::Bool)
        ret = ccall(("adw_squeezer_set_interpolate_size", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _interpolate_size)
        nothing
    end
    function set_switch_threshold_policy(instance::AdwSqueezer, _policy)
        ret = ccall(("adw_squeezer_set_switch_threshold_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_transition_duration(instance::AdwSqueezer, _duration::Integer)
        ret = ccall(("adw_squeezer_set_transition_duration", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::AdwSqueezer, _transition)
        ret = ccall(("adw_squeezer_set_transition_type", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _transition)
        nothing
    end
    function set_xalign(instance::AdwSqueezer, _xalign::Real)
        ret = ccall(("adw_squeezer_set_xalign", libadwaita), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_yalign(instance::AdwSqueezer, _yalign::Real)
        ret = ccall(("adw_squeezer_set_yalign", libadwaita), Nothing, (Ptr{GObject}, Float32), instance, _yalign)
        nothing
    end
    function get_accessible_parent(instance::AdwSqueezer)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwSqueezer)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwSqueezer)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwSqueezer)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwSqueezer)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwSqueezer)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwSqueezer, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwSqueezer, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwSqueezer, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwSqueezer, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwSqueezer, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwSqueezer, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwSqueezer, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwSqueezer, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwSqueezer, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwSqueezer)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_orientation(instance::AdwSqueezer)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwSqueezer, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function get_child(instance::AdwSqueezerPage)
        ret = ccall(("adw_squeezer_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_enabled(instance::AdwSqueezerPage)
        ret = ccall(("adw_squeezer_page_get_enabled", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_enabled(instance::AdwSqueezerPage, _enabled::Bool)
        ret = ccall(("adw_squeezer_page_set_enabled", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function StatusPage_new()
        ret = ccall(("adw_status_page_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwStatusPageLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwStatusPage)
        ret = ccall(("adw_status_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_description(instance::AdwStatusPage)
        ret = ccall(("adw_status_page_get_description", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_icon_name(instance::AdwStatusPage)
        ret = ccall(("adw_status_page_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_paintable(instance::AdwStatusPage)
        ret = ccall(("adw_status_page_get_paintable", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = GLib.find_leaf_type_if_not_null(ret, false)
        ret2
    end
    function get_title(instance::AdwStatusPage)
        ret = ccall(("adw_status_page_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function set_child(instance::AdwStatusPage, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_status_page_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_description(instance::AdwStatusPage, _description::Maybe(Union{AbstractString, Symbol}))
        _description_maybe = nothing_to_null(_description)
        ret = ccall(("adw_status_page_set_description", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _description_maybe)
        nothing
    end
    function set_icon_name(instance::AdwStatusPage, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_status_page_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_paintable(instance::AdwStatusPage, _paintable::Maybe(GdkPaintable))
        _paintable_maybe = nothing_to_null(_paintable)
        ret = ccall(("adw_status_page_set_paintable", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _paintable_maybe)
        nothing
    end
    function set_title(instance::AdwStatusPage, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_status_page_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_accessible_parent(instance::AdwStatusPage)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwStatusPage)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwStatusPage)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwStatusPage)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwStatusPage)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwStatusPage)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwStatusPage, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwStatusPage, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwStatusPage, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwStatusPage, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwStatusPage, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwStatusPage, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwStatusPage, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwStatusPage, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwStatusPage, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwStatusPage)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_default()
        ret = ccall(("adw_style_manager_get_default", libadwaita), Ptr{GObject}, ())
        ret2 = convert(AdwStyleManager, ret, false)
        ret2
    end
    function get_for_display(_display::GdkDisplay)
        ret = ccall(("adw_style_manager_get_for_display", libadwaita), Ptr{GObject}, (Ptr{GObject},), _display)
        ret2 = convert(AdwStyleManager, ret, false)
        ret2
    end
    function get_color_scheme(instance::AdwStyleManager)
        ret = ccall(("adw_style_manager_get_color_scheme", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ColorScheme(ret)
        ret2
    end
    function get_dark(instance::AdwStyleManager)
        ret = ccall(("adw_style_manager_get_dark", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_display(instance::AdwStyleManager)
        ret = ccall(("adw_style_manager_get_display", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GdkDisplay, ret, false)
        ret2
    end
    function get_high_contrast(instance::AdwStyleManager)
        ret = ccall(("adw_style_manager_get_high_contrast", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_system_supports_color_schemes(instance::AdwStyleManager)
        ret = ccall(("adw_style_manager_get_system_supports_color_schemes", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_color_scheme(instance::AdwStyleManager, _color_scheme)
        ret = ccall(("adw_style_manager_set_color_scheme", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _color_scheme)
        nothing
    end
    function SwipeTracker_new(_swipeable::AdwSwipeable)
        ret = ccall(("adw_swipe_tracker_new", libadwaita), Ptr{GObject}, (Ptr{GtkWidget},), _swipeable)
        ret2 = AdwSwipeTrackerLeaf(ret, true)
        ret2
    end
    function get_allow_long_swipes(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_allow_long_swipes", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_allow_mouse_drag(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_allow_mouse_drag", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enabled(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_enabled", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_lower_overshoot(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_lower_overshoot", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reversed(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_reversed", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_swipeable(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_swipeable", libadwaita), Ptr{GtkWidget}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function get_upper_overshoot(instance::AdwSwipeTracker)
        ret = ccall(("adw_swipe_tracker_get_upper_overshoot", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_allow_long_swipes(instance::AdwSwipeTracker, _allow_long_swipes::Bool)
        ret = ccall(("adw_swipe_tracker_set_allow_long_swipes", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_long_swipes)
        nothing
    end
    function set_allow_mouse_drag(instance::AdwSwipeTracker, _allow_mouse_drag::Bool)
        ret = ccall(("adw_swipe_tracker_set_allow_mouse_drag", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _allow_mouse_drag)
        nothing
    end
    function set_enabled(instance::AdwSwipeTracker, _enabled::Bool)
        ret = ccall(("adw_swipe_tracker_set_enabled", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function set_lower_overshoot(instance::AdwSwipeTracker, _overshoot::Bool)
        ret = ccall(("adw_swipe_tracker_set_lower_overshoot", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _overshoot)
        nothing
    end
    function set_reversed(instance::AdwSwipeTracker, _reversed::Bool)
        ret = ccall(("adw_swipe_tracker_set_reversed", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reversed)
        nothing
    end
    function set_upper_overshoot(instance::AdwSwipeTracker, _overshoot::Bool)
        ret = ccall(("adw_swipe_tracker_set_upper_overshoot", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _overshoot)
        nothing
    end
    function shift_position(instance::AdwSwipeTracker, _delta::Real)
        ret = ccall(("adw_swipe_tracker_shift_position", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _delta)
        nothing
    end
    function get_orientation(instance::AdwSwipeTracker)
        get_orientation(GtkOrientable(instance))
    end
    function set_orientation(instance::AdwSwipeTracker, _orientation)
        set_orientation(GtkOrientable(instance), _orientation)
    end
    function SwitchRow_new()
        ret = ccall(("adw_switch_row_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwSwitchRowLeaf(ret, false)
        ret2
    end
    function get_active(instance::AdwSwitchRow)
        ret = ccall(("adw_switch_row_get_active", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::AdwSwitchRow, _is_active::Bool)
        ret = ccall(("adw_switch_row_set_active", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function get_accessible_parent(instance::AdwSwitchRow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwSwitchRow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwSwitchRow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwSwitchRow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwSwitchRow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwSwitchRow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwSwitchRow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwSwitchRow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwSwitchRow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwSwitchRow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwSwitchRow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwSwitchRow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwSwitchRow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwSwitchRow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwSwitchRow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwSwitchRow)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwSwitchRow)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwSwitchRow, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwSwitchRow, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwSwitchRow, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwSwitchRow)
        get_buildable_id(GtkBuildable(instance))
    end
    function TabBar_new()
        ret = ccall(("adw_tab_bar_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwTabBarLeaf(ret, false)
        ret2
    end
    function get_autohide(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_autohide", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_end_action_widget(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_end_action_widget", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_expand_tabs(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_expand_tabs", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extra_drag_preferred_action(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_extra_drag_preferred_action", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = DragAction(ret)
        ret2
    end
    function get_extra_drag_preload(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_extra_drag_preload", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inverted(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_inverted", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_is_overflowing(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_is_overflowing", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_start_action_widget(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_start_action_widget", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_tabs_revealed(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_tabs_revealed", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_view(instance::AdwTabBar)
        ret = ccall(("adw_tab_bar_get_view", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwTabView, ret, false)
        ret2
    end
    function set_autohide(instance::AdwTabBar, _autohide::Bool)
        ret = ccall(("adw_tab_bar_set_autohide", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _autohide)
        nothing
    end
    function set_end_action_widget(instance::AdwTabBar, _widget::Maybe(GtkWidget))
        _widget_maybe = nothing_to_null(_widget)
        ret = ccall(("adw_tab_bar_set_end_action_widget", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget_maybe)
        nothing
    end
    function set_expand_tabs(instance::AdwTabBar, _expand_tabs::Bool)
        ret = ccall(("adw_tab_bar_set_expand_tabs", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _expand_tabs)
        nothing
    end
    function set_extra_drag_preload(instance::AdwTabBar, _preload::Bool)
        ret = ccall(("adw_tab_bar_set_extra_drag_preload", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _preload)
        nothing
    end
    function set_inverted(instance::AdwTabBar, _inverted::Bool)
        ret = ccall(("adw_tab_bar_set_inverted", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_start_action_widget(instance::AdwTabBar, _widget::Maybe(GtkWidget))
        _widget_maybe = nothing_to_null(_widget)
        ret = ccall(("adw_tab_bar_set_start_action_widget", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget_maybe)
        nothing
    end
    function set_view(instance::AdwTabBar, _view::Maybe(AdwTabView))
        _view_maybe = nothing_to_null(_view)
        ret = ccall(("adw_tab_bar_set_view", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _view_maybe)
        nothing
    end
    function setup_extra_drop_target(instance::AdwTabBar, _actions, _types)
        _types_arr = convert(Vector{UInt64}, _types)
        _n_types = length(_types)
        ret = ccall(("adw_tab_bar_setup_extra_drop_target", libadwaita), Nothing, (Ptr{GObject}, UInt32, Ptr{UInt64}, UInt64), instance, _actions, _types_arr, _n_types)
        nothing
    end
    function get_accessible_parent(instance::AdwTabBar)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwTabBar)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwTabBar)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwTabBar)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwTabBar)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwTabBar)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwTabBar, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwTabBar, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwTabBar, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwTabBar, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwTabBar, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwTabBar, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwTabBar, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwTabBar, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwTabBar, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwTabBar)
        get_buildable_id(GtkBuildable(instance))
    end
    function TabButton_new()
        ret = ccall(("adw_tab_button_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwTabButtonLeaf(ret, false)
        ret2
    end
    function get_view(instance::AdwTabButton)
        ret = ccall(("adw_tab_button_get_view", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwTabView, ret, false)
        ret2
    end
    function set_view(instance::AdwTabButton, _view::Maybe(AdwTabView))
        _view_maybe = nothing_to_null(_view)
        ret = ccall(("adw_tab_button_set_view", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _view_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwTabButton)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwTabButton)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwTabButton)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwTabButton)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwTabButton)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwTabButton)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwTabButton, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwTabButton, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwTabButton, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwTabButton, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwTabButton, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwTabButton, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwTabButton, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwTabButton, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwTabButton, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_action_name(instance::AdwTabButton)
        get_action_name(GtkActionable(instance))
    end
    function get_action_target_value(instance::AdwTabButton)
        get_action_target_value(GtkActionable(instance))
    end
    function set_action_name(instance::AdwTabButton, _action_name::Maybe(Union{AbstractString, Symbol}))
        set_action_name(GtkActionable(instance), _action_name)
    end
    function set_action_target_value(instance::AdwTabButton, _target_value::Maybe(GVariant))
        set_action_target_value(GtkActionable(instance), _target_value)
    end
    function set_detailed_action_name(instance::AdwTabButton, _detailed_action_name::Union{AbstractString, Symbol})
        set_detailed_action_name(GtkActionable(instance), _detailed_action_name)
    end
    function get_buildable_id(instance::AdwTabButton)
        get_buildable_id(GtkBuildable(instance))
    end
    function TabOverview_new()
        ret = ccall(("adw_tab_overview_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwTabOverviewLeaf(ret, false)
        ret2
    end
    function get_child(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_enable_new_tab(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_enable_new_tab", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enable_search(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_enable_search", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extra_drag_preferred_action(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_extra_drag_preferred_action", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = DragAction(ret)
        ret2
    end
    function get_extra_drag_preload(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_extra_drag_preload", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inverted(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_inverted", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_open(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_open", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_search_active(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_search_active", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_secondary_menu(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_secondary_menu", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GMenuModel, ret, false)
        ret2
    end
    function get_show_end_title_buttons(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_show_end_title_buttons", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_start_title_buttons(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_show_start_title_buttons", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_view(instance::AdwTabOverview)
        ret = ccall(("adw_tab_overview_get_view", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwTabView, ret, false)
        ret2
    end
    function set_child(instance::AdwTabOverview, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_tab_overview_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function set_enable_new_tab(instance::AdwTabOverview, _enable_new_tab::Bool)
        ret = ccall(("adw_tab_overview_set_enable_new_tab", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_new_tab)
        nothing
    end
    function set_enable_search(instance::AdwTabOverview, _enable_search::Bool)
        ret = ccall(("adw_tab_overview_set_enable_search", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enable_search)
        nothing
    end
    function set_extra_drag_preload(instance::AdwTabOverview, _preload::Bool)
        ret = ccall(("adw_tab_overview_set_extra_drag_preload", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _preload)
        nothing
    end
    function set_inverted(instance::AdwTabOverview, _inverted::Bool)
        ret = ccall(("adw_tab_overview_set_inverted", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_open(instance::AdwTabOverview, _open::Bool)
        ret = ccall(("adw_tab_overview_set_open", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _open)
        nothing
    end
    function set_secondary_menu(instance::AdwTabOverview, _secondary_menu::Maybe(GMenuModel))
        _secondary_menu_maybe = nothing_to_null(_secondary_menu)
        ret = ccall(("adw_tab_overview_set_secondary_menu", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _secondary_menu_maybe)
        nothing
    end
    function set_show_end_title_buttons(instance::AdwTabOverview, _show_end_title_buttons::Bool)
        ret = ccall(("adw_tab_overview_set_show_end_title_buttons", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_end_title_buttons)
        nothing
    end
    function set_show_start_title_buttons(instance::AdwTabOverview, _show_start_title_buttons::Bool)
        ret = ccall(("adw_tab_overview_set_show_start_title_buttons", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _show_start_title_buttons)
        nothing
    end
    function set_view(instance::AdwTabOverview, _view::Maybe(AdwTabView))
        _view_maybe = nothing_to_null(_view)
        ret = ccall(("adw_tab_overview_set_view", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _view_maybe)
        nothing
    end
    function setup_extra_drop_target(instance::AdwTabOverview, _actions, _types)
        _types_arr = convert(Vector{UInt64}, _types)
        _n_types = length(_types)
        ret = ccall(("adw_tab_overview_setup_extra_drop_target", libadwaita), Nothing, (Ptr{GObject}, UInt32, Ptr{UInt64}, UInt64), instance, _actions, _types_arr, _n_types)
        nothing
    end
    function get_accessible_parent(instance::AdwTabOverview)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwTabOverview)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwTabOverview)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwTabOverview)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwTabOverview)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwTabOverview)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwTabOverview, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwTabOverview, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwTabOverview, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwTabOverview, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwTabOverview, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwTabOverview, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwTabOverview, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwTabOverview, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwTabOverview, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwTabOverview)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_child(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_icon(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_icon", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = GLib.find_leaf_type_if_not_null(ret, false)
        ret2
    end
    function get_indicator_activatable(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_indicator_activatable", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_indicator_icon(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_indicator_icon", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = GLib.find_leaf_type_if_not_null(ret, false)
        ret2
    end
    function get_indicator_tooltip(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_indicator_tooltip", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_keyword(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_keyword", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_live_thumbnail(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_live_thumbnail", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_loading(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_loading", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_needs_attention(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_needs_attention", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_parent(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_parent", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwTabPage, ret, false)
        ret2
    end
    function get_pinned(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_pinned", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selected(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_selected", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_thumbnail_xalign(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_thumbnail_xalign", libadwaita), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_thumbnail_yalign(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_thumbnail_yalign", libadwaita), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_title(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_tooltip(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_get_tooltip", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function invalidate_thumbnail(instance::AdwTabPage)
        ret = ccall(("adw_tab_page_invalidate_thumbnail", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function set_icon(instance::AdwTabPage, _icon::Maybe(GIcon))
        _icon_maybe = nothing_to_null(_icon)
        ret = ccall(("adw_tab_page_set_icon", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _icon_maybe)
        nothing
    end
    function set_indicator_activatable(instance::AdwTabPage, _activatable::Bool)
        ret = ccall(("adw_tab_page_set_indicator_activatable", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _activatable)
        nothing
    end
    function set_indicator_icon(instance::AdwTabPage, _indicator_icon::Maybe(GIcon))
        _indicator_icon_maybe = nothing_to_null(_indicator_icon)
        ret = ccall(("adw_tab_page_set_indicator_icon", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _indicator_icon_maybe)
        nothing
    end
    function set_indicator_tooltip(instance::AdwTabPage, _tooltip::Union{AbstractString, Symbol})
        ret = ccall(("adw_tab_page_set_indicator_tooltip", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _tooltip)
        nothing
    end
    function set_keyword(instance::AdwTabPage, _keyword::Union{AbstractString, Symbol})
        ret = ccall(("adw_tab_page_set_keyword", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _keyword)
        nothing
    end
    function set_live_thumbnail(instance::AdwTabPage, _live_thumbnail::Bool)
        ret = ccall(("adw_tab_page_set_live_thumbnail", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _live_thumbnail)
        nothing
    end
    function set_loading(instance::AdwTabPage, _loading::Bool)
        ret = ccall(("adw_tab_page_set_loading", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _loading)
        nothing
    end
    function set_needs_attention(instance::AdwTabPage, _needs_attention::Bool)
        ret = ccall(("adw_tab_page_set_needs_attention", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _needs_attention)
        nothing
    end
    function set_thumbnail_xalign(instance::AdwTabPage, _xalign::Real)
        ret = ccall(("adw_tab_page_set_thumbnail_xalign", libadwaita), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_thumbnail_yalign(instance::AdwTabPage, _yalign::Real)
        ret = ccall(("adw_tab_page_set_thumbnail_yalign", libadwaita), Nothing, (Ptr{GObject}, Float32), instance, _yalign)
        nothing
    end
    function set_title(instance::AdwTabPage, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_tab_page_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_tooltip(instance::AdwTabPage, _tooltip::Union{AbstractString, Symbol})
        ret = ccall(("adw_tab_page_set_tooltip", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _tooltip)
        nothing
    end
    function get_accessible_parent(instance::AdwTabPage)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwTabPage)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwTabPage)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwTabPage)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwTabPage)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwTabPage)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwTabPage, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwTabPage, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwTabPage, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwTabPage, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwTabPage, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwTabPage, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwTabPage, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwTabPage, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwTabPage, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function TabView_new()
        ret = ccall(("adw_tab_view_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwTabViewLeaf(ret, false)
        ret2
    end
    function add_page(instance::AdwTabView, _child::GtkWidget, _parent::Maybe(AdwTabPage))
        _parent_maybe = nothing_to_null(_parent)
        ret = ccall(("adw_tab_view_add_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}), instance, _child, _parent_maybe)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function add_shortcuts(instance::AdwTabView, _shortcuts)
        ret = ccall(("adw_tab_view_add_shortcuts", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _shortcuts)
        nothing
    end
    function append(instance::AdwTabView, _child::GtkWidget)
        ret = ccall(("adw_tab_view_append", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function append_pinned(instance::AdwTabView, _child::GtkWidget)
        ret = ccall(("adw_tab_view_append_pinned", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function close_other_pages(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_close_other_pages", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function close_page(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_close_page", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function close_page_finish(instance::AdwTabView, _page::AdwTabPage, _confirm::Bool)
        ret = ccall(("adw_tab_view_close_page_finish", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _page, _confirm)
        nothing
    end
    function close_pages_after(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_close_pages_after", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function close_pages_before(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_close_pages_before", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function get_default_icon(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_default_icon", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function get_is_transferring_page(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_is_transferring_page", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_menu_model(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_menu_model", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GMenuModel, ret, false)
        ret2
    end
    function get_n_pages(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_n_pages", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_pinned_pages(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_n_pinned_pages", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_nth_page(instance::AdwTabView, _position::Integer)
        ret = ccall(("adw_tab_view_get_nth_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Int32), instance, _position)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function get_page(instance::AdwTabView, _child::GtkWidget)
        ret = ccall(("adw_tab_view_get_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function get_page_position(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_get_page_position", libadwaita), Int32, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret
    end
    function get_pages(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_pages", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_selected_page(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_selected_page", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwTabPage, ret, false)
        ret2
    end
    function get_shortcuts(instance::AdwTabView)
        ret = ccall(("adw_tab_view_get_shortcuts", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = TabViewShortcuts(ret)
        ret2
    end
    function insert(instance::AdwTabView, _child::GtkWidget, _position::Integer)
        ret = ccall(("adw_tab_view_insert", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function insert_pinned(instance::AdwTabView, _child::GtkWidget, _position::Integer)
        ret = ccall(("adw_tab_view_insert_pinned", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _child, _position)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function invalidate_thumbnails(instance::AdwTabView)
        ret = ccall(("adw_tab_view_invalidate_thumbnails", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function prepend(instance::AdwTabView, _child::GtkWidget)
        ret = ccall(("adw_tab_view_prepend", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function prepend_pinned(instance::AdwTabView, _child::GtkWidget)
        ret = ccall(("adw_tab_view_prepend_pinned", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwTabPage, ret, false)
        ret2
    end
    function remove_shortcuts(instance::AdwTabView, _shortcuts)
        ret = ccall(("adw_tab_view_remove_shortcuts", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _shortcuts)
        nothing
    end
    function reorder_backward(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_reorder_backward", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reorder_first(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_reorder_first", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reorder_forward(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_reorder_forward", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reorder_last(instance::AdwTabView, _page::AdwTabPage)
        ret = ccall(("adw_tab_view_reorder_last", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        ret2 = convert(Bool, ret)
        ret2
    end
    function reorder_page(instance::AdwTabView, _page::AdwTabPage, _position::Integer)
        ret = ccall(("adw_tab_view_reorder_page", libadwaita), Cint, (Ptr{GObject}, Ptr{GObject}, Int32), instance, _page, _position)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_next_page(instance::AdwTabView)
        ret = ccall(("adw_tab_view_select_next_page", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function select_previous_page(instance::AdwTabView)
        ret = ccall(("adw_tab_view_select_previous_page", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_icon(instance::AdwTabView, _default_icon::GIcon)
        ret = ccall(("adw_tab_view_set_default_icon", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _default_icon)
        nothing
    end
    function set_menu_model(instance::AdwTabView, _menu_model::Maybe(GMenuModel))
        _menu_model_maybe = nothing_to_null(_menu_model)
        ret = ccall(("adw_tab_view_set_menu_model", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu_model_maybe)
        nothing
    end
    function set_page_pinned(instance::AdwTabView, _page::AdwTabPage, _pinned::Bool)
        ret = ccall(("adw_tab_view_set_page_pinned", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Cint), instance, _page, _pinned)
        nothing
    end
    function set_selected_page(instance::AdwTabView, _selected_page::AdwTabPage)
        ret = ccall(("adw_tab_view_set_selected_page", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _selected_page)
        nothing
    end
    function set_shortcuts(instance::AdwTabView, _shortcuts)
        ret = ccall(("adw_tab_view_set_shortcuts", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _shortcuts)
        nothing
    end
    function transfer_page(instance::AdwTabView, _page::AdwTabPage, _other_view::AdwTabView, _position::Integer)
        ret = ccall(("adw_tab_view_transfer_page", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}, Ptr{GObject}, Int32), instance, _page, _other_view, _position)
        nothing
    end
    function get_accessible_parent(instance::AdwTabView)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwTabView)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwTabView)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwTabView)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwTabView)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwTabView)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwTabView, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwTabView, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwTabView, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwTabView, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwTabView, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwTabView, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwTabView, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwTabView, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwTabView, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwTabView)
        get_buildable_id(GtkBuildable(instance))
    end
    function TimedAnimation_new(_widget::GtkWidget, _from::Real, _to::Real, _duration::Integer, _target::AdwAnimationTarget)
        _target = GLib.glib_ref(_target)
        ret = ccall(("adw_timed_animation_new", libadwaita), Ptr{GObject}, (Ptr{GObject}, Float64, Float64, UInt32, Ptr{GObject}), _widget, _from, _to, _duration, _target)
        ret2 = AdwTimedAnimationLeaf(ret, false)
        ret2
    end
    function get_alternate(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_alternate", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_duration(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_duration", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_easing(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_easing", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = Easing(ret)
        ret2
    end
    function get_repeat_count(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_repeat_count", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_reverse(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_reverse", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_value_from(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_value_from", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value_to(instance::AdwTimedAnimation)
        ret = ccall(("adw_timed_animation_get_value_to", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_alternate(instance::AdwTimedAnimation, _alternate::Bool)
        ret = ccall(("adw_timed_animation_set_alternate", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _alternate)
        nothing
    end
    function set_duration(instance::AdwTimedAnimation, _duration::Integer)
        ret = ccall(("adw_timed_animation_set_duration", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_easing(instance::AdwTimedAnimation, _easing)
        ret = ccall(("adw_timed_animation_set_easing", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _easing)
        nothing
    end
    function set_repeat_count(instance::AdwTimedAnimation, _repeat_count::Integer)
        ret = ccall(("adw_timed_animation_set_repeat_count", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _repeat_count)
        nothing
    end
    function set_reverse(instance::AdwTimedAnimation, _reverse::Bool)
        ret = ccall(("adw_timed_animation_set_reverse", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reverse)
        nothing
    end
    function set_value_from(instance::AdwTimedAnimation, _value::Real)
        ret = ccall(("adw_timed_animation_set_value_from", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_value_to(instance::AdwTimedAnimation, _value::Real)
        ret = ccall(("adw_timed_animation_set_value_to", libadwaita), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function Toast_new(_title::Union{AbstractString, Symbol})
        ret = ccall(("adw_toast_new", libadwaita), Ptr{GObject}, (Cstring,), _title)
        ret2 = AdwToastLeaf(ret, true)
        ret2
    end
    function dismiss(instance::AdwToast)
        ret = ccall(("adw_toast_dismiss", libadwaita), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_action_name(instance::AdwToast)
        ret = ccall(("adw_toast_get_action_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_action_target_value(instance::AdwToast)
        ret = ccall(("adw_toast_get_action_target_value", libadwaita), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function get_button_label(instance::AdwToast)
        ret = ccall(("adw_toast_get_button_label", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_custom_title(instance::AdwToast)
        ret = ccall(("adw_toast_get_custom_title", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_priority(instance::AdwToast)
        ret = ccall(("adw_toast_get_priority", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ToastPriority(ret)
        ret2
    end
    function get_timeout(instance::AdwToast)
        ret = ccall(("adw_toast_get_timeout", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_title(instance::AdwToast)
        ret = ccall(("adw_toast_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_use_markup(instance::AdwToast)
        ret = ccall(("adw_toast_get_use_markup", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_action_name(instance::AdwToast, _action_name::Maybe(Union{AbstractString, Symbol}))
        _action_name_maybe = nothing_to_null(_action_name)
        ret = ccall(("adw_toast_set_action_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _action_name_maybe)
        nothing
    end
    function set_action_target_value(instance::AdwToast, _action_target::Maybe(GVariant))
        _action_target_maybe = nothing_to_null(_action_target)
        ret = ccall(("adw_toast_set_action_target_value", libadwaita), Nothing, (Ptr{GObject}, Ptr{GVariant}), instance, _action_target_maybe)
        nothing
    end
    function set_button_label(instance::AdwToast, _button_label::Maybe(Union{AbstractString, Symbol}))
        _button_label_maybe = nothing_to_null(_button_label)
        ret = ccall(("adw_toast_set_button_label", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _button_label_maybe)
        nothing
    end
    function set_custom_title(instance::AdwToast, _widget::Maybe(GtkWidget))
        _widget_maybe = nothing_to_null(_widget)
        ret = ccall(("adw_toast_set_custom_title", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget_maybe)
        nothing
    end
    function set_detailed_action_name(instance::AdwToast, _detailed_action_name::Maybe(Union{AbstractString, Symbol}))
        _detailed_action_name_maybe = nothing_to_null(_detailed_action_name)
        ret = ccall(("adw_toast_set_detailed_action_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _detailed_action_name_maybe)
        nothing
    end
    function set_priority(instance::AdwToast, _priority)
        ret = ccall(("adw_toast_set_priority", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _priority)
        nothing
    end
    function set_timeout(instance::AdwToast, _timeout::Integer)
        ret = ccall(("adw_toast_set_timeout", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _timeout)
        nothing
    end
    function set_title(instance::AdwToast, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_toast_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_use_markup(instance::AdwToast, _use_markup::Bool)
        ret = ccall(("adw_toast_set_use_markup", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function ToastOverlay_new()
        ret = ccall(("adw_toast_overlay_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwToastOverlayLeaf(ret, false)
        ret2
    end
    function add_toast(instance::AdwToastOverlay, _toast::AdwToast)
        _toast = GLib.glib_ref(_toast)
        ret = ccall(("adw_toast_overlay_add_toast", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _toast)
        nothing
    end
    function get_child(instance::AdwToastOverlay)
        ret = ccall(("adw_toast_overlay_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function set_child(instance::AdwToastOverlay, _child::Maybe(GtkWidget))
        _child_maybe = nothing_to_null(_child)
        ret = ccall(("adw_toast_overlay_set_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwToastOverlay)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwToastOverlay)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwToastOverlay)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwToastOverlay)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwToastOverlay)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwToastOverlay)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwToastOverlay, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwToastOverlay, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwToastOverlay, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwToastOverlay, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwToastOverlay, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwToastOverlay, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwToastOverlay, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwToastOverlay, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwToastOverlay, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwToastOverlay)
        get_buildable_id(GtkBuildable(instance))
    end
    function ToolbarView_new()
        ret = ccall(("adw_toolbar_view_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwToolbarViewLeaf(ret, false)
        ret2
    end
    function add_bottom_bar(instance::AdwToolbarView, _widget::GtkWidget)
        ret = ccall(("adw_toolbar_view_add_bottom_bar", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function add_top_bar(instance::AdwToolbarView, _widget::GtkWidget)
        ret = ccall(("adw_toolbar_view_add_top_bar", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_bottom_bar_height(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_bottom_bar_height", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_bottom_bar_style(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_bottom_bar_style", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function get_content(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_extend_content_to_bottom_edge(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_extend_content_to_bottom_edge", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extend_content_to_top_edge(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_extend_content_to_top_edge", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_bottom_bars(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_reveal_bottom_bars", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_top_bars(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_reveal_top_bars", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_top_bar_height(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_top_bar_height", libadwaita), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_top_bar_style(instance::AdwToolbarView)
        ret = ccall(("adw_toolbar_view_get_top_bar_style", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function remove(instance::AdwToolbarView, _widget::GtkWidget)
        ret = ccall(("adw_toolbar_view_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_bottom_bar_style(instance::AdwToolbarView, _style)
        ret = ccall(("adw_toolbar_view_set_bottom_bar_style", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _style)
        nothing
    end
    function set_content(instance::AdwToolbarView, _content::Maybe(GtkWidget))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_toolbar_view_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function set_extend_content_to_bottom_edge(instance::AdwToolbarView, _extend::Bool)
        ret = ccall(("adw_toolbar_view_set_extend_content_to_bottom_edge", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _extend)
        nothing
    end
    function set_extend_content_to_top_edge(instance::AdwToolbarView, _extend::Bool)
        ret = ccall(("adw_toolbar_view_set_extend_content_to_top_edge", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _extend)
        nothing
    end
    function set_reveal_bottom_bars(instance::AdwToolbarView, _reveal::Bool)
        ret = ccall(("adw_toolbar_view_set_reveal_bottom_bars", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reveal)
        nothing
    end
    function set_reveal_top_bars(instance::AdwToolbarView, _reveal::Bool)
        ret = ccall(("adw_toolbar_view_set_reveal_top_bars", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reveal)
        nothing
    end
    function set_top_bar_style(instance::AdwToolbarView, _style)
        ret = ccall(("adw_toolbar_view_set_top_bar_style", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _style)
        nothing
    end
    function get_accessible_parent(instance::AdwToolbarView)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwToolbarView)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwToolbarView)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwToolbarView)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwToolbarView)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwToolbarView)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwToolbarView, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwToolbarView, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwToolbarView, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwToolbarView, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwToolbarView, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwToolbarView, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwToolbarView, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwToolbarView, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwToolbarView, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwToolbarView)
        get_buildable_id(GtkBuildable(instance))
    end
    function ViewStack_new()
        ret = ccall(("adw_view_stack_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwViewStackLeaf(ret, false)
        ret2
    end
    function add(instance::AdwViewStack, _child::GtkWidget)
        ret = ccall(("adw_view_stack_add", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwViewStackPage, ret, false)
        ret2
    end
    function add_named(instance::AdwViewStack, _child::GtkWidget, _name::Maybe(Union{AbstractString, Symbol}))
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_view_stack_add_named", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Cstring), instance, _child, _name_maybe)
        ret2 = convert(AdwViewStackPage, ret, false)
        ret2
    end
    function add_titled(instance::AdwViewStack, _child::GtkWidget, _name::Maybe(Union{AbstractString, Symbol}), _title::Union{AbstractString, Symbol})
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_view_stack_add_titled", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Cstring, Cstring), instance, _child, _name_maybe, _title)
        ret2 = convert(AdwViewStackPage, ret, false)
        ret2
    end
    function add_titled_with_icon(instance::AdwViewStack, _child::GtkWidget, _name::Maybe(Union{AbstractString, Symbol}), _title::Union{AbstractString, Symbol}, _icon_name::Union{AbstractString, Symbol})
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_view_stack_add_titled_with_icon", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}, Cstring, Cstring, Cstring), instance, _child, _name_maybe, _title, _icon_name)
        ret2 = convert(AdwViewStackPage, ret, false)
        ret2
    end
    function get_child_by_name(instance::AdwViewStack, _name::Union{AbstractString, Symbol})
        ret = ccall(("adw_view_stack_get_child_by_name", libadwaita), Ptr{GObject}, (Ptr{GObject}, Cstring), instance, _name)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_hhomogeneous(instance::AdwViewStack)
        ret = ccall(("adw_view_stack_get_hhomogeneous", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_page(instance::AdwViewStack, _child::GtkWidget)
        ret = ccall(("adw_view_stack_get_page", libadwaita), Ptr{GObject}, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        ret2 = convert(AdwViewStackPage, ret, false)
        ret2
    end
    function get_pages(instance::AdwViewStack)
        ret = ccall(("adw_view_stack_get_pages", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_vhomogeneous(instance::AdwViewStack)
        ret = ccall(("adw_view_stack_get_vhomogeneous", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_child(instance::AdwViewStack)
        ret = ccall(("adw_view_stack_get_visible_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function get_visible_child_name(instance::AdwViewStack)
        ret = ccall(("adw_view_stack_get_visible_child_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function remove(instance::AdwViewStack, _child::GtkWidget)
        ret = ccall(("adw_view_stack_remove", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_hhomogeneous(instance::AdwViewStack, _hhomogeneous::Bool)
        ret = ccall(("adw_view_stack_set_hhomogeneous", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _hhomogeneous)
        nothing
    end
    function set_vhomogeneous(instance::AdwViewStack, _vhomogeneous::Bool)
        ret = ccall(("adw_view_stack_set_vhomogeneous", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _vhomogeneous)
        nothing
    end
    function set_visible_child(instance::AdwViewStack, _child::GtkWidget)
        ret = ccall(("adw_view_stack_set_visible_child", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_visible_child_name(instance::AdwViewStack, _name::Union{AbstractString, Symbol})
        ret = ccall(("adw_view_stack_set_visible_child_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_accessible_parent(instance::AdwViewStack)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwViewStack)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwViewStack)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwViewStack)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwViewStack)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwViewStack)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwViewStack, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwViewStack, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwViewStack, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwViewStack, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwViewStack, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwViewStack, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwViewStack, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwViewStack, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwViewStack, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwViewStack)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_badge_number(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_badge_number", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_child(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_child", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_icon_name(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_icon_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_name(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_name", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_needs_attention(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_needs_attention", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_use_underline(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_use_underline", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible(instance::AdwViewStackPage)
        ret = ccall(("adw_view_stack_page_get_visible", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_badge_number(instance::AdwViewStackPage, _badge_number::Integer)
        ret = ccall(("adw_view_stack_page_set_badge_number", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _badge_number)
        nothing
    end
    function set_icon_name(instance::AdwViewStackPage, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name_maybe = nothing_to_null(_icon_name)
        ret = ccall(("adw_view_stack_page_set_icon_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name_maybe)
        nothing
    end
    function set_name(instance::AdwViewStackPage, _name::Maybe(Union{AbstractString, Symbol}))
        _name_maybe = nothing_to_null(_name)
        ret = ccall(("adw_view_stack_page_set_name", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _name_maybe)
        nothing
    end
    function set_needs_attention(instance::AdwViewStackPage, _needs_attention::Bool)
        ret = ccall(("adw_view_stack_page_set_needs_attention", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _needs_attention)
        nothing
    end
    function set_title(instance::AdwViewStackPage, _title::Maybe(Union{AbstractString, Symbol}))
        _title_maybe = nothing_to_null(_title)
        ret = ccall(("adw_view_stack_page_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title_maybe)
        nothing
    end
    function set_use_underline(instance::AdwViewStackPage, _use_underline::Bool)
        ret = ccall(("adw_view_stack_page_set_use_underline", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function set_visible(instance::AdwViewStackPage, _visible::Bool)
        ret = ccall(("adw_view_stack_page_set_visible", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function get_accessible_parent(instance::AdwViewStackPage)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwViewStackPage)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwViewStackPage)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwViewStackPage)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwViewStackPage)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwViewStackPage)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwViewStackPage, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwViewStackPage, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwViewStackPage, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwViewStackPage, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwViewStackPage, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwViewStackPage, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwViewStackPage, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwViewStackPage, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwViewStackPage, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_selected_page(instance::AdwViewStackPages)
        ret = ccall(("adw_view_stack_pages_get_selected_page", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwViewStackPage, ret, false)
        ret2
    end
    function set_selected_page(instance::AdwViewStackPages, _page::AdwViewStackPage)
        ret = ccall(("adw_view_stack_pages_set_selected_page", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _page)
        nothing
    end
    function get_item_type(instance::AdwViewStackPages)
        get_item_type(GListModel(instance))
    end
    function get_n_items(instance::AdwViewStackPages)
        get_n_items(GListModel(instance))
    end
    function get_item(instance::AdwViewStackPages, _position::Integer)
        get_item(GListModel(instance), _position)
    end
    function items_changed(instance::AdwViewStackPages, _position::Integer, _removed::Integer, _added::Integer)
        items_changed(GListModel(instance), _position, _removed, _added)
    end
    function get_selection(instance::AdwViewStackPages)
        get_selection(GtkSelectionModel(instance))
    end
    function get_selection_in_range(instance::AdwViewStackPages, _position::Integer, _n_items::Integer)
        get_selection_in_range(GtkSelectionModel(instance), _position, _n_items)
    end
    function is_selected(instance::AdwViewStackPages, _position::Integer)
        is_selected(GtkSelectionModel(instance), _position)
    end
    function select_all(instance::AdwViewStackPages)
        select_all(GtkSelectionModel(instance))
    end
    function select_item(instance::AdwViewStackPages, _position::Integer, _unselect_rest::Bool)
        select_item(GtkSelectionModel(instance), _position, _unselect_rest)
    end
    function select_range(instance::AdwViewStackPages, _position::Integer, _n_items::Integer, _unselect_rest::Bool)
        select_range(GtkSelectionModel(instance), _position, _n_items, _unselect_rest)
    end
    function selection_changed(instance::AdwViewStackPages, _position::Integer, _n_items::Integer)
        selection_changed(GtkSelectionModel(instance), _position, _n_items)
    end
    function set_selection(instance::AdwViewStackPages, _selected::GtkBitset, _mask::GtkBitset)
        set_selection(GtkSelectionModel(instance), _selected, _mask)
    end
    function unselect_all(instance::AdwViewStackPages)
        unselect_all(GtkSelectionModel(instance))
    end
    function unselect_item(instance::AdwViewStackPages, _position::Integer)
        unselect_item(GtkSelectionModel(instance), _position)
    end
    function unselect_range(instance::AdwViewStackPages, _position::Integer, _n_items::Integer)
        unselect_range(GtkSelectionModel(instance), _position, _n_items)
    end
    function ViewSwitcher_new()
        ret = ccall(("adw_view_switcher_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwViewSwitcherLeaf(ret, false)
        ret2
    end
    function get_policy(instance::AdwViewSwitcher)
        ret = ccall(("adw_view_switcher_get_policy", libadwaita), UInt32, (Ptr{GObject},), instance)
        ret2 = ViewSwitcherPolicy(ret)
        ret2
    end
    function get_stack(instance::AdwViewSwitcher)
        ret = ccall(("adw_view_switcher_get_stack", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwViewStack, ret, false)
        ret2
    end
    function set_policy(instance::AdwViewSwitcher, _policy)
        ret = ccall(("adw_view_switcher_set_policy", libadwaita), Nothing, (Ptr{GObject}, UInt32), instance, _policy)
        nothing
    end
    function set_stack(instance::AdwViewSwitcher, _stack::Maybe(AdwViewStack))
        _stack_maybe = nothing_to_null(_stack)
        ret = ccall(("adw_view_switcher_set_stack", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwViewSwitcher)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwViewSwitcher)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwViewSwitcher)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwViewSwitcher)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwViewSwitcher)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwViewSwitcher)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwViewSwitcher, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwViewSwitcher, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwViewSwitcher, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwViewSwitcher, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwViewSwitcher, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwViewSwitcher, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwViewSwitcher, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwViewSwitcher, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwViewSwitcher, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwViewSwitcher)
        get_buildable_id(GtkBuildable(instance))
    end
    function ViewSwitcherBar_new()
        ret = ccall(("adw_view_switcher_bar_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwViewSwitcherBarLeaf(ret, false)
        ret2
    end
    function get_reveal(instance::AdwViewSwitcherBar)
        ret = ccall(("adw_view_switcher_bar_get_reveal", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_stack(instance::AdwViewSwitcherBar)
        ret = ccall(("adw_view_switcher_bar_get_stack", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwViewStack, ret, false)
        ret2
    end
    function set_reveal(instance::AdwViewSwitcherBar, _reveal::Bool)
        ret = ccall(("adw_view_switcher_bar_set_reveal", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _reveal)
        nothing
    end
    function set_stack(instance::AdwViewSwitcherBar, _stack::Maybe(AdwViewStack))
        _stack_maybe = nothing_to_null(_stack)
        ret = ccall(("adw_view_switcher_bar_set_stack", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwViewSwitcherBar)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwViewSwitcherBar)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwViewSwitcherBar)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwViewSwitcherBar)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwViewSwitcherBar)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwViewSwitcherBar)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwViewSwitcherBar, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwViewSwitcherBar, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwViewSwitcherBar, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwViewSwitcherBar, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwViewSwitcherBar, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwViewSwitcherBar, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwViewSwitcherBar, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwViewSwitcherBar, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwViewSwitcherBar, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwViewSwitcherBar)
        get_buildable_id(GtkBuildable(instance))
    end
    function ViewSwitcherTitle_new()
        ret = ccall(("adw_view_switcher_title_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwViewSwitcherTitleLeaf(ret, false)
        ret2
    end
    function get_stack(instance::AdwViewSwitcherTitle)
        ret = ccall(("adw_view_switcher_title_get_stack", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(AdwViewStack, ret, false)
        ret2
    end
    function get_subtitle(instance::AdwViewSwitcherTitle)
        ret = ccall(("adw_view_switcher_title_get_subtitle", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title(instance::AdwViewSwitcherTitle)
        ret = ccall(("adw_view_switcher_title_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title_visible(instance::AdwViewSwitcherTitle)
        ret = ccall(("adw_view_switcher_title_get_title_visible", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_view_switcher_enabled(instance::AdwViewSwitcherTitle)
        ret = ccall(("adw_view_switcher_title_get_view_switcher_enabled", libadwaita), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_stack(instance::AdwViewSwitcherTitle, _stack::Maybe(AdwViewStack))
        _stack_maybe = nothing_to_null(_stack)
        ret = ccall(("adw_view_switcher_title_set_stack", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack_maybe)
        nothing
    end
    function set_subtitle(instance::AdwViewSwitcherTitle, _subtitle::Union{AbstractString, Symbol})
        ret = ccall(("adw_view_switcher_title_set_subtitle", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _subtitle)
        nothing
    end
    function set_title(instance::AdwViewSwitcherTitle, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_view_switcher_title_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_view_switcher_enabled(instance::AdwViewSwitcherTitle, _enabled::Bool)
        ret = ccall(("adw_view_switcher_title_set_view_switcher_enabled", libadwaita), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function get_accessible_parent(instance::AdwViewSwitcherTitle)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwViewSwitcherTitle)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwViewSwitcherTitle)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwViewSwitcherTitle)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwViewSwitcherTitle)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwViewSwitcherTitle)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwViewSwitcherTitle, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwViewSwitcherTitle, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwViewSwitcherTitle, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwViewSwitcherTitle, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwViewSwitcherTitle, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwViewSwitcherTitle, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwViewSwitcherTitle, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwViewSwitcherTitle, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwViewSwitcherTitle, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwViewSwitcherTitle)
        get_buildable_id(GtkBuildable(instance))
    end
    function Window_new()
        ret = ccall(("adw_window_new", libadwaita), Ptr{GObject}, ())
        ret2 = AdwWindowLeaf(ret, false)
        ret2
    end
    function get_content(instance::AdwWindow)
        ret = ccall(("adw_window_get_content", libadwaita), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert_if_not_null(GtkWidget, ret, false)
        ret2
    end
    function set_content(instance::AdwWindow, _content::Maybe(GtkWidget))
        _content_maybe = nothing_to_null(_content)
        ret = ccall(("adw_window_set_content", libadwaita), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _content_maybe)
        nothing
    end
    function get_accessible_parent(instance::AdwWindow)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwWindow)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwWindow)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwWindow)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwWindow)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwWindow)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwWindow, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwWindow, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwWindow, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwWindow, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwWindow, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwWindow, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwWindow, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwWindow, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwWindow, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwWindow)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_renderer(instance::AdwWindow)
        get_renderer(GtkNative(instance))
    end
    function get_surface(instance::AdwWindow)
        get_surface(GtkNative(instance))
    end
    function get_surface_transform(instance::AdwWindow)
        get_surface_transform(GtkNative(instance))
    end
    function realize(instance::AdwWindow)
        realize(GtkNative(instance))
    end
    function unrealize(instance::AdwWindow)
        unrealize(GtkNative(instance))
    end
    function get_display(instance::AdwWindow)
        get_display(GtkRoot(instance))
    end
    function get_focus(instance::AdwWindow)
        get_focus(GtkRoot(instance))
    end
    function set_focus(instance::AdwWindow, _focus::Maybe(GtkWidget))
        set_focus(GtkRoot(instance), _focus)
    end
    function WindowTitle_new(_title::Union{AbstractString, Symbol}, _subtitle::Union{AbstractString, Symbol})
        ret = ccall(("adw_window_title_new", libadwaita), Ptr{GObject}, (Cstring, Cstring), _title, _subtitle)
        ret2 = AdwWindowTitleLeaf(ret, false)
        ret2
    end
    function get_subtitle(instance::AdwWindowTitle)
        ret = ccall(("adw_window_title_get_subtitle", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function get_title(instance::AdwWindowTitle)
        ret = ccall(("adw_window_title_get_title", libadwaita), Cstring, (Ptr{GObject},), instance)
        ret2 = string_or_nothing(ret, false)
        ret2
    end
    function set_subtitle(instance::AdwWindowTitle, _subtitle::Union{AbstractString, Symbol})
        ret = ccall(("adw_window_title_set_subtitle", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _subtitle)
        nothing
    end
    function set_title(instance::AdwWindowTitle, _title::Union{AbstractString, Symbol})
        ret = ccall(("adw_window_title_set_title", libadwaita), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_accessible_parent(instance::AdwWindowTitle)
        get_accessible_parent(GtkAccessible(instance))
    end
    function get_accessible_role(instance::AdwWindowTitle)
        get_accessible_role(GtkAccessible(instance))
    end
    function get_at_context(instance::AdwWindowTitle)
        get_at_context(GtkAccessible(instance))
    end
    function get_bounds(instance::AdwWindowTitle)
        get_bounds(GtkAccessible(instance))
    end
    function get_first_accessible_child(instance::AdwWindowTitle)
        get_first_accessible_child(GtkAccessible(instance))
    end
    function get_next_accessible_sibling(instance::AdwWindowTitle)
        get_next_accessible_sibling(GtkAccessible(instance))
    end
    function get_platform_state(instance::AdwWindowTitle, _state)
        get_platform_state(GtkAccessible(instance), _state)
    end
    function reset_property(instance::AdwWindowTitle, _property)
        reset_property(GtkAccessible(instance), _property)
    end
    function reset_relation(instance::AdwWindowTitle, _relation)
        reset_relation(GtkAccessible(instance), _relation)
    end
    function reset_state(instance::AdwWindowTitle, _state)
        reset_state(GtkAccessible(instance), _state)
    end
    function set_accessible_parent(instance::AdwWindowTitle, _parent::Maybe(GtkAccessible), _next_sibling::Maybe(GtkAccessible))
        set_accessible_parent(GtkAccessible(instance), _parent, _next_sibling)
    end
    function update_next_accessible_sibling(instance::AdwWindowTitle, _new_sibling::Maybe(GtkAccessible))
        update_next_accessible_sibling(GtkAccessible(instance), _new_sibling)
    end
    function update_property(instance::AdwWindowTitle, _properties, _values)
        update_property(GtkAccessible(instance), _properties, _values)
    end
    function update_relation(instance::AdwWindowTitle, _relations, _values)
        update_relation(GtkAccessible(instance), _relations, _values)
    end
    function update_state(instance::AdwWindowTitle, _states, _values)
        update_state(GtkAccessible(instance), _states, _values)
    end
    function get_buildable_id(instance::AdwWindowTitle)
        get_buildable_id(GtkBuildable(instance))
    end
    function get_cancel_progress(instance::AdwSwipeable)
        ret = ccall(("adw_swipeable_get_cancel_progress", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_distance(instance::AdwSwipeable)
        ret = ccall(("adw_swipeable_get_distance", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_progress(instance::AdwSwipeable)
        ret = ccall(("adw_swipeable_get_progress", libadwaita), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_snap_points(instance::AdwSwipeable)
        m_n_snap_points = Ref{Int32}()
        ret = ccall(("adw_swipeable_get_snap_points", libadwaita), Ptr{Float64}, (Ptr{GObject}, Ptr{Int32}), instance, m_n_snap_points)
        ret2 = begin
                arrtemp = copy(unsafe_wrap(Vector{Float64}, ret, m_n_snap_points[]))
                GLib.g_free(ret)
                arrtemp
            end
        _n_snap_points = m_n_snap_points[]
        ret2
    end
    function get_swipe_area(instance::AdwSwipeable, _navigation_direction, _is_drag::Bool)
        m_rect = Ref{_GdkRectangle}()
        ret = ccall(("adw_swipeable_get_swipe_area", libadwaita), Nothing, (Ptr{GObject}, UInt32, Cint, Ptr{_GdkRectangle}), instance, _navigation_direction, _is_drag, m_rect)
        _rect = m_rect[]
        _rect
    end
end))
end
