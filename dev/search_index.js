var documenterSearchIndex = {"docs":
[{"location":"diff3to4/#Differences-between-Gtk.jl-and-Gtk4.jl-1","page":"Gtk.jl to Gtk4.jl","title":"Differences between Gtk.jl and Gtk4.jl","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"Gtk4.jl builds on and is very similar to Gtk.jl. Here is a summary of what's different.","category":"page"},{"location":"diff3to4/#Properties-1","page":"Gtk.jl to Gtk4.jl","title":"Properties","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"GObject properties can still be set and accessed using get_gtk_property and set_gtk_property!. However, properties are now mapped onto Julia properties, so one can set a window title using win.title = \"My title\".  Also, GAccessor no longer exists and is replaced by getter and setter methods defined in G_. Whereas in Gtk.jl one could use GAccessor.title(win,\"My title\") to set the title, in Gtk4.jl the equivalent is G_.set_title(win, \"My title\").","category":"page"},{"location":"diff3to4/#Constants,-enums,-and-flags-1","page":"Gtk.jl to Gtk4.jl","title":"Constants, enums, and flags","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"GTK constants in Gtk4.jl are in the main module instead of a Constants submodule.","category":"page"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"In Gtk.jl, GTK's enum and flags constants were turned into integers. In Gtk4.jl, these are now mapped onto Julia enums, specifically the implementations CEnum.jl for enums and BitFlags.jl for flags. This improves understandability when a function returns an enum or flag, but the downside is the sometimes extreme length of the enum's name. To mitigate this, convert methods are defined for commonly used enums so that shorter symbols can be used instead of the full enum name. For example, :h can be used instead of Gtk4.Orientation_HORIZONTAL in GtkBox(orientation, spacing).","category":"page"},{"location":"diff3to4/#G_-contains-automatically-generated-methods-1","page":"Gtk.jl to Gtk4.jl","title":"G_ contains automatically generated methods","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"In Gtk.jl, the submodule Gtk.GAccessor contains getter and setter methods, which often correspond to object properties. In Gtk4.jl, the submodule Gtk4.G_ contains automatically generated methods, which include all methods in GAccessor and many more. These methods directly call the C functions in libgtk and thus use 0-based indexing. Where possible, they translate between Julia types and C types, for example converting nothing to C_NULL and vice versa.","category":"page"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"For consistency, the getter and setter methods in G_ keep their full names, including \"set\" and \"get\". For example, to set the title of a window, use set_title(w, \"text\") rather than title(w, \"text\").","category":"page"},{"location":"diff3to4/#GObject-names-1","page":"Gtk.jl to Gtk4.jl","title":"GObject names","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"The equivalent of Gtk.ShortNames doesn't exist. All GObject types are mapped onto Julia types with the same name. It would probably be better to leave out the namespace, as is done in the Python pygobject bindings, but that might lead to name collisions between Gtk types and Julia types or between Gtk and other GObject libraries.","category":"page"},{"location":"diff3to4/#No-showall-1","page":"Gtk.jl to Gtk4.jl","title":"No showall","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"In GTK 4, widgets are shown by default, so showall does not exist, and show is no longer necessary in most situations. Exceptions include GtkDialogs and GtkApplicationWindows.","category":"page"},{"location":"diff3to4/#No-GtkContainer-1","page":"Gtk.jl to Gtk4.jl","title":"No GtkContainer","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"In GTK 4, GtkContainer has been removed and most widgets derive directly from GtkWidget. Each class that can contain child widgets has its own functions for adding and/or removing them. In Gtk4.jl, collection interface methods like push! have been defined for relatively simple containers, such as GtkBox and GtkWindow. For widgets that have one child, such as GtkWindow, getindex and setindex! have also been defined, so that one can set a child widget using window[] = child.","category":"page"},{"location":"diff3to4/#Events-1","page":"Gtk.jl to Gtk4.jl","title":"Events","text":"","category":"section"},{"location":"diff3to4/#","page":"Gtk.jl to Gtk4.jl","title":"Gtk.jl to Gtk4.jl","text":"Events such as button presses are handled through \"event controllers\" in GTK 4.","category":"page"},{"location":"manual/combobox/#Combobox-1","page":"Combobox","title":"Combobox","text":"","category":"section"},{"location":"manual/combobox/#","page":"Combobox","title":"Combobox","text":"The combobox widget allows for selecting an item from a dropdown menu. There are two different flavors of comboboxes. A simple GtkComboBoxText widget and a more powerful and generic GtkComboBox widget. The former is a subtype of the latter.","category":"page"},{"location":"manual/combobox/#GtkComboBoxText-1","page":"Combobox","title":"GtkComboBoxText","text":"","category":"section"},{"location":"manual/combobox/#","page":"Combobox","title":"Combobox","text":"The following example shows how to fill a GtkComboBoxText with elements and listen on the changed event:","category":"page"},{"location":"manual/combobox/#","page":"Combobox","title":"Combobox","text":"using Gtk4, Gtk4.G_\n\ncb = GtkComboBoxText()\nchoices = [\"one\", \"two\", \"three\", \"four\"]\nfor choice in choices\n  push!(cb,choice)\nend\n# Let's set the active element to be \"two\"\ncb.active = 1\n\nsignal_connect(cb, \"changed\") do widget, others...\n  # get the active index\n  idx = cb.active\n  # get the active string\n  str = G_.get_active_text(cb)\n  println(\"Active element is \\\"$str\\\" at index $idx\")\nend\n\nwin = GtkWindow(\"ComboBoxText Example\",400,200)\npush!(win, cb)","category":"page"},{"location":"manual/listtreeview/#List-and-Tree-Widgets-1","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"The GtkTreeView is a very powerful widget for displaying table-like or hierarchical data. It is used for both lists and trees.","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"The power of this widget comes with a slightly more complex design that one has to understand when using the widget. The most important thing is that the widget itself does not store the displayed data. Instead there are dedicated GtkListStore and GtkTreeStore containers that will hold the data. The benefit of this approach is that it is possible to decouple the view from the data:","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"The widget automatically updates when adding, removing or editing data from the store\nThe widget can sort its data without modifications in the store\nColumns can be reordered and resized\nFiltering can be used to show only subsets of data","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"We will in the following introduce both widgets based on small and a more complex example.","category":"page"},{"location":"manual/listtreeview/#List-Store-1","page":"List and Tree Widgets","title":"List Store","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Lets start with a very simple example: A table with three columns representing the name, the age and the gender of a person. Each column must have a specific type. Here, we chose to represent the gender using a boolean value where true  represents female and false represents male. We thus initialize the list store using","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"ls = GtkListStore(String, Int, Bool)","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Now we will the store with data","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"push!(ls,(\"Peter\",20,false))\npush!(ls,(\"Paul\",30,false))\npush!(ls,(\"Mary\",25,true))","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"If we want so insert the data at a specific position we can use the insert function","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"insert!(ls, 2, (\"Susanne\", 35, true))","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"You can use ls like a matrix like container. Calling length and size will give you","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"julia> length(ls)\n4\n\njulia> size(ls)\n(4,3)","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Specific element can be be accessed using","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"julia> ls[1,1]\n\"Peter\"\njulia> ls[1,1] = \"Pete\"\n\"Pete\"","category":"page"},{"location":"manual/listtreeview/#List-View-1","page":"List and Tree Widgets","title":"List View","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Now we actually want to display our data. To this end we create a tree view object","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"tv = GtkTreeView(GtkTreeModel(ls))","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Then we need specific renderers for each of the columns. Usually you will only need a text renderer, but in our example we want to display the boolean value using a checkbox.","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"rTxt = GtkCellRendererText()\nrTog = GtkCellRendererToggle()","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Finally we create for each column a TreeViewColumn object","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"c1 = GtkTreeViewColumn(\"Name\", rTxt, Dict([(\"text\",0)]))\nc2 = GtkTreeViewColumn(\"Age\", rTxt, Dict([(\"text\",1)]))\nc3 = GtkTreeViewColumn(\"Female\", rTog, Dict([(\"active\",2)]))","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"We need to push these column description objects to the tree view","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"push!(tv, c1, c2, c3)","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Then we can display the tree view widget in a window","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"win = GtkWindow(tv, \"List View\")","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"If you prefer that the columns are resizable by the user call","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"for c in [c1, c2, c3]\n    G_.set_resizable(c, true)\nend","category":"page"},{"location":"manual/listtreeview/#Sorting-1","page":"List and Tree Widgets","title":"Sorting","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"We next want to make the tree view sortable","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"for (i,c) in enumerate([c1,c2,c3])\n  G_.set_sort_column_id(c,i-1)\nend","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"If you now click on one of the column headers, the data will be sorted with respect to the selected column. You can even make the columns reorderable","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"for (i,c) in enumerate([c1, c2, c3])\n    G_.set_reorderable(c, i)\nend","category":"page"},{"location":"manual/listtreeview/#Selection-1","page":"List and Tree Widgets","title":"Selection","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Usually the interesting bit of a list will be the entry being selected. This is done using an additional GtkTreeSelection object that can be retrieved by","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"selection = G_.get_selection(tv)","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"One either have single selection or multiple selections. We toggle this by calling","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"selection = G_.set_mode(selection,Gtk4.SelectionMode_MULTIPLE)","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"We will stick with single selection for now and want to know the index of the selected item","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"julia> ls[selected(selection),1]\n\"Pete\"","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Since it can happen that no item has been selected at all, it is a good idea to put this into an if statement","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"if hasselection(selection)\n  # do something with selected(selection)\nend","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Sometimes you want to invoke an action of an item is selected. This can be done by","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"signal_connect(selection, \"changed\") do widget\n  if hasselection(selection)\n    currentIt = selected(selection)\n\n    # now you can to something with the selected item\n    println(\"Name: \", ls[currentIt,1], \" Age: \", ls[currentIt,1])\n  end\nend","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Another useful signal is \"row-activated\" that will be triggered by a double click of the user.","category":"page"},{"location":"manual/listtreeview/#Filtering-1","page":"List and Tree Widgets","title":"Filtering","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"A very useful thing is to apply a filter to a list view such that only a subset of data is shown. We can do this using the GtkTreeModelFilter type. It is as the GtkListStore a GtkTreeModel and therefore we can assign it to a tree view. So the idea is to wrap a GtkListStore in a GtkTreeModelFilter and assign that to the tree view.","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Next question is how to decide which row of the list store should be shown and which shouldn't. We will do this by adding an additional column to the list store that is hidden. The column will be of type Bool and a value true indicates that the entry is to be shown while false indicates the opposite. We make the filtering based on this column by a call to G_.setvisible_column. The full example now looks like this:","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"using Gtk4\n\nls = GtkListStore(String, Int, Bool, Bool)\npush!(ls,(\"Peter\",20,false,true))\npush!(ls,(\"Paul\",30,false,true))\npush!(ls,(\"Mary\",25,true,true))\ninsert!(ls, 2, (\"Susanne\",35,true,true))\n\nrTxt = GtkCellRendererText()\nrTog = GtkCellRendererToggle()\n\nc1 = GtkTreeViewColumn(\"Name\", rTxt, Dict([(\"text\",0)]), sort_column_id=0)\nc2 = GtkTreeViewColumn(\"Age\", rTxt, Dict([(\"text\",1)]), sort_column_id=1)\nc3 = GtkTreeViewColumn(\"Female\", rTog, Dict([(\"active\",2)]), sort_column_id=2)\n\ntmFiltered = GtkTreeModelFilter(ls)\nG_.set_visible_column(tmFiltered,3)\ntv = GtkTreeView(GtkTreeModel(tmFiltered))\npush!(tv, c1, c2, c3)\n\nselection = G_.get_selection(tv)\n\nsignal_connect(selection, \"changed\") do widget\n  if hasselection(selection)\n    currentIt = selected(selection)\n\n    println(\"Name: \", GtkTreeModel(tmFiltered)[currentIt,1],\n            \" Age: \", GtkTreeModel(tmFiltered)[currentIt,1])\n  end\nend\n\nent = GtkEntry()\n\nsignal_connect(ent, \"changed\") do widget\n  searchText = get_gtk_property(ent, :text, String)\n\n  for l=1:length(ls)\n    showMe = true\n\n    if length(searchText) > 0\n      showMe = showMe && occursin(lowercase(searchText), lowercase(ls[l,1]))\n    end\n\n    ls[l,4] = showMe\n  end\nend\n\nvbox = GtkBox(:v)\npush!(vbox,ent,tv)\n\nwin = GtkWindow(vbox, \"List View with Filter\")","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"You can see that we have added a little search bar such that you can see the filtering in action. It is furthermore important to note that we had to replace ls with GtkTreeModel(tmFiltered) in the selection changed callback since the selection will give an iterator that is only valid in the filtered tree model.","category":"page"},{"location":"manual/listtreeview/#Tree-Widget-1","page":"List and Tree Widgets","title":"Tree Widget","text":"","category":"section"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"Here is an example of the tree model in action:","category":"page"},{"location":"manual/listtreeview/#","page":"List and Tree Widgets","title":"List and Tree Widgets","text":"using Gtk4\n\nts = GtkTreeStore(String)\niter1 = push!(ts,(\"one\",))\niter2 = push!(ts,(\"two\",),iter1)\niter3 = push!(ts,(\"three\",),iter2)\ntv = GtkTreeView(GtkTreeModel(ts))\nr1 = GtkCellRendererText()\nc1 = GtkTreeViewColumn(\"A\", r1, Dict([(\"text\",0)]))\npush!(tv,c1)\nwin = GtkWindow(tv, \"Tree View\")\n\niter = Gtk4.iter_from_index(ts, [1])\nts[iter,1] = \"ONE\"","category":"page"},{"location":"manual/canvas/#Drawing-on-Canvas-1","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"","category":"section"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"Generic (Cairo) drawing is done on a Canvas. You control what appears on this canvas by defining a draw function:","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"using Gtk4, Graphics\nc = GtkCanvas()\nwin = GtkWindow(c, \"Canvas\")\n@guarded draw(c) do widget\n    ctx = getgc(c)\n    h = height(c)\n    w = width(c)\n    # Paint red rectangle\n    rectangle(ctx, 0, 0, w, h/2)\n    set_source_rgb(ctx, 1, 0, 0)\n    fill(ctx)\n    # Paint blue rectangle\n    rectangle(ctx, 0, 3h/4, w, h/4)\n    set_source_rgb(ctx, 0, 0, 1)\n    fill(ctx)\nend","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"This draw function will get called each time the window gets resized or otherwise needs to refresh its display.","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"(Image: canvas)","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"See Graphics.jl's or Cairo.jl's documentation for more information on graphics.","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"Errors in the draw function can corrupt Gtk4's internal state; if this happens, you have to quit julia and start a fresh session. To avoid this problem, the @guarded macro wraps your code in a try/catch block and prevents the corruption. It is especially useful when initially writing and debugging code.","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"Mouse events can be handled using event controllers. The event controller for mouse clicks is GtkGestureClick. We first create this event controller, then add it to the widget using push!.","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"g=GtkGestureClick()\npush!(c,g)\n\nfunction on_pressed(controller, n_press, x, y)\n    w=widget(controller)\n    ctx = getgc(w)\n    set_source_rgb(ctx, 0, 1, 0)\n    arc(ctx, x, y, 5, 0, 2pi)\n    stroke(ctx)\n    reveal(w)\nend\n\nsignal_connect(on_pressed, g, \"pressed\")\n","category":"page"},{"location":"manual/canvas/#","page":"Drawing on Canvas","title":"Drawing on Canvas","text":"This will draw a green circle on the canvas at every mouse click. Resizing the window will make them go away; they were drawn on the canvas, but they weren't added to the draw function.","category":"page"},{"location":"doc/reference/#API-Reference-1","page":"Gtk4 Reference","title":"API Reference","text":"","category":"section"},{"location":"doc/reference/#Public-interface-1","page":"Gtk4 Reference","title":"Public interface","text":"","category":"section"},{"location":"doc/reference/#","page":"Gtk4 Reference","title":"Gtk4 Reference","text":"Modules = [Gtk4]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = false","category":"page"},{"location":"doc/reference/#Gtk4._GtkTextIter-Tuple{GtkTextBuffer, Integer}","page":"Gtk4 Reference","title":"Gtk4._GtkTextIter","text":"_GtkTextIter(text::GtkTextBuffer, char_offset::Integer)\n\nCreates a _GtkTextIter with offset char_offset (one-based index).\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Base.parent","page":"Gtk4 Reference","title":"Base.parent","text":"parent(w::GtkWidget)\n\nReturns the parent widget of w, or nothing if the widget has not been set as the child of another widget (or is a toplevel widget, like a GtkWindow).\n\nSee also toplevel.\n\nRelated GTK function: gtk_widget_get_parent()\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Base.show-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Base.show","text":"show(w::GtkWidget)\n\nFlag w to be displayed and return w.\n\nRelated GTK function: gtk_widget_show()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Cairo.destroy-Tuple{GtkWindow}","page":"Gtk4 Reference","title":"Cairo.destroy","text":"destroy(win::GtkWindow)\n\nDestroy win and unreference all widgets in its hierarchy.\n\nRelated GTK function: gtk_window_destroy()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Graphics.height-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Graphics.height","text":"height(w::GtkWidget)\n\nReturns the allocated height of w in pixels.\n\nRelated GTK function: gtk_widget_get_allocated_height()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Graphics.width-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Graphics.width","text":"width(w::GtkWidget)\n\nReturns the allocated width of w in pixels.\n\nRelated GTK function: gtk_widget_get_allocated_width()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.buffer-Tuple{Union{_GtkTextIter, Ref{_GtkTextIter}}}","page":"Gtk4 Reference","title":"Gtk4.buffer","text":"buffer(iter::Union{Ref{_GtkTextIter}, _GtkTextIter})\n\nReturns the buffer associated with iter.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.create_mark-Tuple{GtkTextBuffer, Any, Union{_GtkTextIter, Ref{_GtkTextIter}}, Bool}","page":"Gtk4 Reference","title":"Gtk4.create_mark","text":"create_mark(buffer::GtkTextBuffer, mark_name, it::TI, left_gravity::Bool)\ncreate_mark(buffer::GtkTextBuffer, it::TI)\n\nImpements gtk_text_buffer_create_mark.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.cursor","page":"Gtk4 Reference","title":"Gtk4.cursor","text":"cursor(w::GtkWidget)\n\nGets the cursor c for a widget w.\n\nRelated GTK function: gtk_widget_get_cursor()\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.cursor-Tuple{GtkWidget, Union{Nothing, Gtk4.Gdk4.GdkCursor}}","page":"Gtk4 Reference","title":"Gtk4.cursor","text":"cursor(w::GtkWidget, c)\n\nSets a cursor c when the mouse is over a widget w. If c is nothing, use the default cursor for w.\n\nRelated GTK function: gtk_widget_set_cursor()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.fullscreen-Tuple{GtkWindow}","page":"Gtk4 Reference","title":"Gtk4.fullscreen","text":"fullscreen(win::GtkWindow)\n\nSet win to fullscreen mode.\n\nSee also unfullscreen.\n\nRelated GTK function: gtk_window_fullscreen()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.grab_focus-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.grab_focus","text":"grab_focus(w::GtkWidget)\n\nGives w the keyboard focus for the window it is in. Returns false if this fails.\n\nRelated GTK function: gtk_widget_grab_focus()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.hasparent-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.hasparent","text":"hasparent(w::GtkWidget) -> Bool\n\nReturns true if w has a parent widget.\n\nSee also parent.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.hide-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.hide","text":"hide(w::GtkWidget)\n\nFlag w to be hidden and return w. This is the opposite of show.\n\nRelated GTK function: gtk_widget_hide()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.isvisible-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.isvisible","text":"isvisible(w::GtkWidget) -> Bool\n\nReturns whether w and all of its parents are marked as visible.\n\nRelated GTK function: gtk_widget_is_visible()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.maximize-Tuple{GtkWindow}","page":"Gtk4 Reference","title":"Gtk4.maximize","text":"maximize(win::GtkWindow)\n\nRequest that the window win be maximized.\n\nSee also unmaximize.\n\nRelated GTK function: gtk_window_maximize()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.place_cursor-Tuple{GtkTextBuffer, _GtkTextIter}","page":"Gtk4 Reference","title":"Gtk4.place_cursor","text":"place_cursor(buffer::GtkTextBuffer, it::_GtkTextIter)\nplace_cursor(buffer::GtkTextBuffer, pos::Int)\n\nPlace the cursor at indicated position.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.screen_size","page":"Gtk4 Reference","title":"Gtk4.screen_size","text":"screen_size(widget=nothing)\n\nReturns a tuple (width,height) that gives the primary monitor size for the display where widget is being displayed, or the default display if widget is unrealized or not given.\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.scroll_to-Tuple{GtkTextView, GtkTextMark, Real, Bool, Real, Real}","page":"Gtk4 Reference","title":"Gtk4.scroll_to","text":"scroll_to(view::GtkTextView, mark::GtkTextMark, within_margin::Real,\n               use_align::Bool, xalign::Real, yalign::Real)\n\nscroll_to(view::GtkTextView, iter::TI, within_margin::Real,\n          use_align::Bool, xalign::Real, yalign::Real)\n\nImplements gtk_text_view_scroll_to_mark and gtk_text_view_scroll_to_iter.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.search","page":"Gtk4 Reference","title":"Gtk4.search","text":"search(buffer::GtkTextBuffer, str::AbstractString, direction = :forward,\n    flag = GtkTextSearchFlags.GTK_TEXT_SEARCH_TEXT_ONLY)\n\nSearch text str in buffer in direction :forward or :backward starting from the cursor position in the buffer.\n\nReturns a tuple (found, start, stop) where found indicates whether the search was successful and start and stop are _GtkTextIters containing the location of the match.\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.select_range-Tuple{GtkTextBuffer, Union{_GtkTextIter, Ref{_GtkTextIter}}, Union{_GtkTextIter, Ref{_GtkTextIter}}}","page":"Gtk4 Reference","title":"Gtk4.select_range","text":"select_range(buffer::GtkTextBuffer, ins::TI, bound::TI)\nselect_range(buffer::GtkTextBuffer, range::GtkTextRange)\n\nSelect the text in buffer accorind to _GtkTextIter ins and bound.\n\nImplements gtk_text_buffer_select_range.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.selection_bounds-Tuple{GtkTextBuffer}","page":"Gtk4 Reference","title":"Gtk4.selection_bounds","text":"selection_bounds(buffer::GtkTextBuffer)\n\nReturns a tuple (selected, start, stop) indicating if text is selected in the buffer, and if so sets the _GtkTextIter start and stop to point to the selected text.\n\nImplements gtk_text_buffer_get_selection_bounds.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.toplevel-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.toplevel","text":"toplevel(w::GtkWidget)\n\nReturns the topmost ancestor of w, which in most cases will be a GtkWindow.\n\nSee also parent.\n\nRelated GTK function: gtk_widget_get_root()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.unfullscreen-Tuple{GtkWindow}","page":"Gtk4 Reference","title":"Gtk4.unfullscreen","text":"unfullscreen(win::GtkWindow)\n\nIf win is in fullscreen mode, return it to normal mode.\n\nSee also fullscreen.\n\nRelated GTK function: gtk_window_unfullscreen()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.unmaximize-Tuple{GtkWindow}","page":"Gtk4 Reference","title":"Gtk4.unmaximize","text":"unmaximize(win::GtkWindow)\n\nIf win is maximized, return it to its former size.\n\nSee also maximize.\n\nRelated GTK function: gtk_window_unmaximize()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.visible-Tuple{GtkWidget, Bool}","page":"Gtk4 Reference","title":"Gtk4.visible","text":"visible(w::GtkWidget, state::Bool)\n\nControl visibility of w. Note that w will not be visible unless its parent is also visible.\n\nRelated GTK function: gtk_widget_set_visible()\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.widget","page":"Gtk4 Reference","title":"Gtk4.widget","text":"widget(c::GtkEventController)\n\nReturns the widget associated with an event controller.\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.@load_builder-Tuple{Any}","page":"Gtk4 Reference","title":"Gtk4.@load_builder","text":"@load_builder(b::GtkBuilder)\n\nLoads all GtkBuildable objects from a GtkBuilder object and assigns them to Julia variables in the current scope. GtkBuilder ID's are mapped onto Julia variable names.\n\n\n\n\n\n","category":"macro"},{"location":"doc/reference/#Private-methods-1","page":"Gtk4 Reference","title":"Private methods","text":"","category":"section"},{"location":"doc/reference/#","page":"Gtk4 Reference","title":"Gtk4 Reference","text":"Modules = [Gtk4]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = false\nPrivate = true","category":"page"},{"location":"doc/reference/#Base.skip-Tuple{Ref{_GtkTextIter}, Integer, Symbol}","page":"Gtk4 Reference","title":"Base.skip","text":"skip(iter::Ref{_GtkTextIter}, count::Integer, what::Symbol)\n\nMoves iter according to the operation specified by what and count. Operations are :\n\n:chars (gtk_text_iter_forward_chars)\n:lines (gtk_text_iter_forward_lines)\n:words (gtk_text_iter_forward_word_ends)\n:word_cursor_positions (gtk_text_iter_forward_cursor_positions)\n:sentences (gtk_text_iter_forward_sentence_ends)\n:visible_words (gtk_text_iter_forward_visible_word_ends)\n:visible_cursor_positions (gtk_text_iter_forward_visible_cursor_positions)\n:visible_lines (gtk_text_iter_forward_visible_lines)\n:line_ends (gtk_text_iter_forward_visible_lines)\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Base.skip-Tuple{Ref{_GtkTextIter}, Integer}","page":"Gtk4 Reference","title":"Base.skip","text":"skip(iter::Ref{_GtkTextIter}, count::Integer)\n\nMoves iter count characters. Returns a Bool indicating if the move was successful.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Base.skip-Tuple{Ref{_GtkTextIter}, Symbol}","page":"Gtk4 Reference","title":"Base.skip","text":"skip(iter::Ref{_GtkTextIter}, what::Symbol)\n\nMoves iter according to the operation specified by what. Operations are :\n\n:forward_line (gtk_text_iter_forward_line)\n:backward_line (gtk_text_iter_backward_line)\n:forward_to_line_end (gtk_text_iter_forward_to_line_end)\n:backward_word_start (gtk_text_iter_forward_word_end)\n:forward_word_end (gtk_text_iter_backward_word_start)\n:backward_sentence_start (gtk_text_iter_backward_sentence_start)\n:forward_sentence_end (gtk_text_iter_forward_sentence_end)\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.backward_search-Tuple{Ref{_GtkTextIter}, AbstractString, Ref{_GtkTextIter}, Ref{_GtkTextIter}, Ref{_GtkTextIter}, Any}","page":"Gtk4 Reference","title":"Gtk4.backward_search","text":"backward_search(iter::Ref{_GtkTextIter},\n    str::AbstractString, start::Ref{_GtkTextIter},\n    stop::Ref{_GtkTextIter}, limit::Ref{_GtkTextIter}, flag::Int32)\n\nImplements gtk_text_iter_backward_search.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.buffer_to_window_coords","page":"Gtk4 Reference","title":"Gtk4.buffer_to_window_coords","text":"buffer_to_window_coords(view::GtkTextView, buffer_x::Integer, buffer_y::Integer, wintype::Integer = 0)\n\nImplements gtk_text_view_buffer_to_window_coords.\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.char_offset-Tuple{Union{_GtkTextIter, Ref{_GtkTextIter}}}","page":"Gtk4 Reference","title":"Gtk4.char_offset","text":"char_offset(iter::Union{Ref{_GtkTextIter}, _GtkTextIter})\n\nReturns the offset of iter (one-based index).\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.display","page":"Gtk4 Reference","title":"Gtk4.display","text":"display(w::GtkWidget)\n\nGets the GdkDisplay for w. Should only be called if w has been added to a widget hierarchy.\n\nRelated GTK function: gtk_widget_get_display()\n\n\n\n\n\n","category":"function"},{"location":"doc/reference/#Gtk4.find_controller-Union{Tuple{T}, Tuple{GtkWidget, Type{T}}} where T<:GtkEventController","page":"Gtk4 Reference","title":"Gtk4.find_controller","text":"find_controller(w::GtkWidget, ::Type{T}) where T <: GtkEventController\n\nReturns an event controller of type T connected to a widget, or nothing if one doesn't exist. This function is intended for testing purposes (to simulate events) and is not recommended otherwise, as there is a performance penalty for creating a list of a widget's event controllers.\n\nRelated GTK function: gtk_widget_observe_controllers)\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.forward_search-Tuple{Ref{_GtkTextIter}, AbstractString, Ref{_GtkTextIter}, Ref{_GtkTextIter}, Ref{_GtkTextIter}, Any}","page":"Gtk4 Reference","title":"Gtk4.forward_search","text":"forward_search(iter::Ref{_GtkTextIter},\n    str::AbstractString, start::Ref{_GtkTextIter},\n    stop::Ref{_GtkTextIter}, limit::Ref{_GtkTextIter}, flag::Int32)\n\nImplements gtk_text_iter_forward_search.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.monitor-Tuple{GtkWidget}","page":"Gtk4 Reference","title":"Gtk4.monitor","text":"monitor(w::GtkWidget)\n\nGets the GdkMonitor where w is displayed, or nothing if the widget is not part of a widget hierarchy.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.text_iter_at_position-Tuple{GtkTextView, Integer, Integer}","page":"Gtk4 Reference","title":"Gtk4.text_iter_at_position","text":"text_iter_at_position(view::GtkTextView, x::Integer, y::Integer)\n\nImplements gtk_text_view_get_iter_at_position.\n\n\n\n\n\n","category":"method"},{"location":"doc/reference/#Gtk4.window_to_buffer_coords","page":"Gtk4 Reference","title":"Gtk4.window_to_buffer_coords","text":"window_to_buffer_coords(view::GtkTextView, window_x::Integer, window_y::Integer, wintype::Integer = 2)\n\nImplements gtk_text_view_window_to_buffer_coords.\n\n\n\n\n\n","category":"function"},{"location":"manual/gettingStarted/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"We start this tutorial with a very simple example that creates an empty window of size 400x200 pixels and adds a button to it","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"using Gtk4\n\nwin = GtkWindow(\"My First Gtk4.jl Program\", 400, 200)\n\nb = GtkButton(\"Click Me\")\npush!(win,b)","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"We will now go through this example step by step. First the package is loaded using Gtk4 statement. Then a window is created using the GtkWindow constructor. It gets as input the window title, the window width, and the window height. Then a button is created using the GtkButton constructor. In order to insert the button into the window we call","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"push!(win,b)","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"Since a GtkWindow can have only one child widget, we could have added the button to the window using","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"win[] = b","category":"page"},{"location":"manual/gettingStarted/#Extended-Example-1","page":"Getting Started","title":"Extended Example","text":"","category":"section"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"We will now extend the example to let the button actually do something. To this end we first define a callback function that will be executed when the user clicks the button. Our callback function just prints a message.","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"function on_button_clicked(w)\n  println(\"The button has been clicked\")\nend","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"What happens when the user clicks the button is that a \"clicked\" signal is emitted. In order to connect this signal to our function on_button_clicked we have to call","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"signal_connect(on_button_clicked, b, \"clicked\")","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"Our full extended example thus looks like:","category":"page"},{"location":"manual/gettingStarted/#","page":"Getting Started","title":"Getting Started","text":"using Gtk4\n\nwin = GtkWindow(\"My First Gtk4.jl Program\", 400, 200)\n\nb = GtkButton(\"Click Me\")\npush!(win,b)\n\nfunction on_button_clicked(w)\n  println(\"The button has been clicked\")\nend\nsignal_connect(on_button_clicked, b, \"clicked\")","category":"page"},{"location":"manual/methods/#Automatically-generated-methods-1","page":"Automatically generated methods","title":"Automatically generated methods","text":"","category":"section"},{"location":"manual/methods/#","page":"Automatically generated methods","title":"Automatically generated methods","text":"The functions defined in this package all wrap ccall's of GTK functions in a Julian and hopefully user friendly way. In Gtk4.jl many of these wrappers use methods automatically generated using GObject introspection, which can be found in a submodule G_. If you don't see a particular functionality wrapped, you can call these autogenerated functions yourself. The names of these functions and methods are intended to be easy to predict from the corresponding C library function names, and most are the same as in the pygobject bindings for GTK.","category":"page"},{"location":"manual/methods/#","page":"Automatically generated methods","title":"Automatically generated methods","text":"The autogenerated methods in G_, like the corresponding C functions, use 0-based indexing, while the more user-friendly wrappers outside G_ use 1-based indexing. Some types of methods are not yet supported. For example, methods involving callbacks must be wrapped by using ccall.","category":"page"},{"location":"manual/methods/#","page":"Automatically generated methods","title":"Automatically generated methods","text":"The following table lists a few examples.","category":"page"},{"location":"manual/methods/#","page":"Automatically generated methods","title":"Automatically generated methods","text":"C function Gtk4.G_ Julia method Comments\nvoid gtk_window_add_child (GtkWindow* window, GtkWidget* child) add_child (window::GtkWindow, child::GtkWidget) C arguments mapped directly onto Julia arguments\nGtkStackPage* gtk_stack_add_child (GtkStack* stack, GtkWidget* child) add_child (stack::GtkStack, child::GtkWidget) many widgets have add_child methods, but we dispatch using type of first argument\nvoid gtk_builder_add_from_file (GtkBuilder* builder, const gchar* filename, GError** error) add_from_file (builder::GtkBuilder, filename::AbstractString) if ccall fills GError argument, a Julia exception is thrown\nguint gtk_get_major_version () get_major_version () returns an Int32\nvoid gtk_rgb_to_hsv (float r, float g, float b, float* h, float* s, float* v) rgb_to_hsv (r::Real, g::Real, b::Real) GObject introspection tells us that h, s, and v are outputs. Julia method returns (h, s, v)","category":"page"},{"location":"manual/signals/#Signals-and-Callbacks-1","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"","category":"section"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"A button is not much use if it doesn't do anything. GTK uses signals as a method for communicating that something of interest has happened. Most signals will be emitted as a consequence of user interaction: clicking on a button, closing a window, or just moving the mouse. You connect your signals to particular functions to make something happen.","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Let's try a simple example:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"b = GtkButton(\"Press me\")\nwin = GtkWindow(b, \"Callbacks\")\n\nfunction button_clicked_callback(widget)\n    println(widget, \" was clicked!\")\nend\n\nid = signal_connect(button_clicked_callback, b, \"clicked\")","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Here, button_clicked_callback is a callback function, something designed to be called by GTK to implement the response to user action.  You use the signal_connect function to specify when it should be called: in this case, when widget b (your button) emits the \"clicked\" signal.","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Using Julia's do syntax, the exact same code could alternatively be written as","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"b = GtkButton(\"Press me\")\nwin = GtkWindow(b, \"Callbacks\")\nid = signal_connect(b, \"clicked\") do widget\n     println(widget, \" was clicked!\")\nend","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"If you try this, and click on the button, you should see something like the following:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"julia> GtkButton(action-name=NULL, action-target, related-action, use-action-appearance=TRUE, name=\"\", parent, width-request=-1, height-request=-1, visible=TRUE, sensitive=TRUE, app-paintable=FALSE, can-focus=TRUE, has-focus=TRUE, is-focus=TRUE, can-default=FALSE, has-default=FALSE, receives-default=TRUE, composite-child=FALSE, style, events=0, no-show-all=FALSE, has-tooltip=FALSE, tooltip-markup=NULL, tooltip-text=NULL, window, double-buffered=TRUE, halign=GTK_ALIGN_FILL, valign=GTK_ALIGN_FILL, margin-left=0, margin-right=0, margin-top=0, margin-bottom=0, margin=0, hexpand=FALSE, vexpand=FALSE, hexpand-set=FALSE, vexpand-set=FALSE, expand=FALSE, border-width=0, resize-mode=GTK_RESIZE_PARENT, child, label=\"Press me\", image, relief=GTK_RELIEF_NORMAL, use-underline=TRUE, use-stock=FALSE, focus-on-click=TRUE, xalign=0.500000, yalign=0.500000, image-position=GTK_POS_LEFT, ) was clicked!","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"That's quite a lot of output; let's just print the label of the button:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"id2 = signal_connect(b, \"clicked\") do widget\n    println(\"\\\"\", get_gtk_property(widget,:label,String), \"\\\" was clicked!\")\nend","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Now you get something like this:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"julia> GtkButton(action-name=NULL, action-target, related-action, use-action-appearance=TRUE, name=\"\", parent, width-request=-1, height-request=-1, visible=TRUE, sensitive=TRUE, app-paintable=FALSE, can-focus=TRUE, has-focus=TRUE, is-focus=TRUE, can-default=FALSE, has-default=FALSE, receives-default=TRUE, composite-child=FALSE, style, events=0, no-show-all=FALSE, has-tooltip=FALSE, tooltip-markup=NULL, tooltip-text=NULL, window, double-buffered=TRUE, halign=GTK_ALIGN_FILL, valign=GTK_ALIGN_FILL, margin-left=0, margin-right=0, margin-top=0, margin-bottom=0, margin=0, hexpand=FALSE, vexpand=FALSE, hexpand-set=FALSE, vexpand-set=FALSE, expand=FALSE, border-width=0, resize-mode=GTK_RESIZE_PARENT, child, label=\"Press me\", image, relief=GTK_RELIEF_NORMAL, use-underline=TRUE, use-stock=FALSE, focus-on-click=TRUE, xalign=0.500000, yalign=0.500000, image-position=GTK_POS_LEFT, ) was clicked!\n\"Press me\" was clicked!","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Notice that both of the callback functions executed! GTK allows you to define multiple signal handlers for a given object; even the execution order can be specified. Callbacks for some signals require that you return an Int32, with value 0 if you want the next handler to run or 1 if you want to prevent any other handlers from running on this event.","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"The \"clicked\" signal callback should return nothing (void in C parlance), so you can't prevent other callbacks from running. However, we can disconnect the first signal handler:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"signal_handler_disconnect(b, id)","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Now clicking on the button just yields","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"julia> \"Press me\" was clicked!","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"Alternatively, you can temporarily enable or disable individual handlers with signal_handler_block and signal_handler_unblock.","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"The arguments of the callback depend on the signal type. Arguments and their meaning are described along with their corresponding signals. You should omit the final user_data argument described in the GTK documentation; keep in mind that you can always address other variables from inside your function block, or define the callback in terms of an anonymous function:","category":"page"},{"location":"manual/signals/#","page":"Signals and Callbacks","title":"Signals and Callbacks","text":"id = signal_connect((widget, event) -> cb_buttonpressed(widget, event, guistate, drawfunction, ...), b, \"button-press-event\")","category":"page"},{"location":"manual/layout/#Layout-1","page":"Layout","title":"Layout","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"Gtk4 provides many layout widgets for arranging widgets in a window.","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"note: Note\nFor larger projects it might be a good idea to create the layout using Cambalache in combination with GtkBuilder. See Builder.","category":"page"},{"location":"manual/layout/#GtkBox-1","page":"Layout","title":"GtkBox","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The simplest layout widget is the GtkBox. It is one-dimensional and can be either be horizontally or vertical aligned.","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"win = GtkWindow(\"New title\")\nhbox = GtkBox(:h)  # :h makes a horizontal layout, :v a vertical layout\npush!(win, hbox)\ncancel = GtkButton(\"Cancel\")\nok = GtkButton(\"OK\")\npush!(hbox, cancel)\npush!(hbox, ok)","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"This layout may not be exactly what you'd like. Perhaps you'd like the OK button to fill the available space, and to insert some blank space between them:","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"ok.hexpand = true\nhbox.spacing = 10","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The first line sets the hexpand property of the ok button within the hbox container. In GTK4, a separate vexpand property controls whether the widget expands in the vertical direction. The second line sets the spacing property of hbox to 10 pixels.","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"Note that these aren't evenly sized, and that doesn't change if we set the cancel button's hexpand property to true. The homogeneous property of hbox can be used to achieve this.","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"hbox.homogeneous = true","category":"page"},{"location":"manual/layout/#GtkGrid-1","page":"Layout","title":"GtkGrid","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"To create two-dimensional (tabular) layouts of widgets, you can use GtkGrid:","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"win = GtkWindow(\"A new window\")\ng = GtkGrid()\na = GtkEntry()  # a widget for entering text\na.text = \"This is Gtk!\"\nb = GtkCheckButton(\"Check me!\")\nc = GtkScale(:h, 0:10)     # a slider\n\n# Now let's place these graphical elements into the Grid:\ng[1,1] = a    # Cartesian coordinates, g[x,y]\ng[2,1] = b\ng[1:2,2] = c  # spans both columns\ng.column_homogeneous = true # grid forces columns to have the same width\ng.column_spacing = 15  # introduce a 15-pixel gap between columns\npush!(win, g)","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The g[x,y] = obj assigns the location to the indicated x,y positions in the grid (note that indexing is Cartesian rather than row/column; most graphics packages address the screen using Cartesian coordinates where 1,1 is in the upper left). A range is used to indicate a span of grid cells. By default, each row/column will use only as much space as required to contain the objects, but you can force them to be of the same size by setting properties like column_homogeneous.","category":"page"},{"location":"manual/layout/#GtkCenterBox-1","page":"Layout","title":"GtkCenterBox","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The GtkCenterBox widget can hold 3 widgets in a line, either horizontally or vertically oriented. It keeps the middle widget centered. Child widgets can be set and accessed like this:","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"cb = GtkCenterBox(:h)   # :h makes a horizontal layout, :v a vertical layout\ncb[:start] = GtkButton(\"Left\")\ncb[:center] = GtkButton(\"Center\")\ncb[:end] = GtkButton(\"Right\")","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"For vertical orientation, :start refers to the top widget and :end to the bottom widget.","category":"page"},{"location":"manual/layout/#GtkPaned-1","page":"Layout","title":"GtkPaned","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The GtkPaned widget creates two slots separated by a movable divider. Like GtkBox and GtkCenterBox, it can be oriented either vertically or horizontally. To add child widgets, you can use","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"paned = GtkPaned()\npaned[1] = top_or_left_widget\npaned[2] = bottom_or_right_widget","category":"page"},{"location":"manual/layout/#GtkNotebook-1","page":"Layout","title":"GtkNotebook","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The GtkNotebook widget places child widgets in tabs like a browser window. Child widgets can be inserted with a label like this:","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"nb = GtkNotebook()\nvbox = GtkBox(:v)\nhbox = GtkBox(:h)\npush!(nb, vbox, \"Vertical\")  # here \"Vertical\" is the label for the tab\npush!(nb, hbox, \"Horizontal\")","category":"page"},{"location":"manual/layout/#GtkStack-1","page":"Layout","title":"GtkStack","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"The GtkStack widget is a lot like GtkNotebook, but a separate widget GtkStackSwitcher controls what page is shown. An interface very similar to GtkNotebook is defined:","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"s = GtkStack()\nsw = GtkStackSwitcher()\nvbox = GtkBox(:v)\npush!(vbox, sw)\npush!(vbox, s)\npush!(s, GtkLabel(\"First label\"), \"id1\", \"Label 1\")  # first string is an id, second is a label\npush!(s, GtkLabel(\"Second label\"), \"id2\", \"Label 2\") # widget can be retrieved using s[id]","category":"page"},{"location":"manual/layout/#Iterating-over-child-widgets-1","page":"Layout","title":"Iterating over child widgets","text":"","category":"section"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"For any of the widgets described above (or any GtkWidget), you can iterate over all child widgets using","category":"page"},{"location":"manual/layout/#","page":"Layout","title":"Layout","text":"for w in widget\n    myfunc(w)\nend","category":"page"},{"location":"doc/GLib_reference/#GLib-Reference-1","page":"GLib Reference","title":"GLib Reference","text":"","category":"section"},{"location":"doc/GLib_reference/#Public-interface-1","page":"GLib Reference","title":"Public interface","text":"","category":"section"},{"location":"doc/GLib_reference/#","page":"GLib Reference","title":"GLib Reference","text":"Modules = [Gtk4.GLib]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = false","category":"page"},{"location":"doc/GLib_reference/#Gtk4.GLib.bind_property","page":"GLib Reference","title":"Gtk4.GLib.bind_property","text":"bind_property(source::GObject, source_property, target::GObject, target_property, flags = BindingFlags_DEFAULT)\n\nCreates a binding between source_property on source and target_property on target. When source_property is changed, target_property will be updated to the same value. Returns a GBinding object that can be used to release the binding using unbind_property.\n\nSee also unbind_property.\n\nRelated GTK function: g_object_bind_property\n\n\n\n\n\n","category":"function"},{"location":"doc/GLib_reference/#Gtk4.GLib.g_idle_add-Tuple{Function}","page":"GLib Reference","title":"Gtk4.GLib.g_idle_add","text":"g_idle_add(f)\n\nAdd a Julia function f that will be called when there are no higher priority GTK events to be processed. This function can be used from any thread.\n\nSee also @idle_add.\n\nRelated GTK function: g_idle_add()\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.g_timeout_add-Tuple{Function, Integer}","page":"GLib Reference","title":"Gtk4.GLib.g_timeout_add","text":"g_timeout_add(f, interval)\n\nAdd a function f that will be called every interval milliseconds by the GTK main loop. The function is expected to return a Cint. If it returns 0, the function will not be called again. Otherwise it will be called the next time.\n\nRelated GTK function: g_timeout_add()\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.gtk_propertynames-Tuple{Gtk4.GLib.GObject}","page":"GLib Reference","title":"Gtk4.GLib.gtk_propertynames","text":"gtk_propertynames(w::GObject)\n\nPrints a list of property names for the GObject w.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.signal_handler_disconnect-Tuple{Gtk4.GLib.GObject, UInt64}","page":"GLib Reference","title":"Gtk4.GLib.signal_handler_disconnect","text":"signal_handler_disconnect(w::GObject, id)\n\nDisconnect a signal handler from a widget w by its id.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.unbind_property-Tuple{Gtk4.GLib.GBinding}","page":"GLib Reference","title":"Gtk4.GLib.unbind_property","text":"unbind_property(b::GBinding)\n\nReleases a binding created by bind_property.\n\nSee also bind_property.\n\nRelated GTK function: g_binding_unbind\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.@idle_add-Tuple{Any}","page":"GLib Reference","title":"Gtk4.GLib.@idle_add","text":"@idle_add(ex)\n\nCreate a function from an expression ex that will be called when there are no higher priority GTK events to be processed. This function can be used from any thread.\n\nSee also g_idle_add.\n\nRelated GTK function: g_idle_add()\n\n\n\n\n\n","category":"macro"},{"location":"doc/GLib_reference/#Private-methods-1","page":"GLib Reference","title":"Private methods","text":"","category":"section"},{"location":"doc/GLib_reference/#","page":"GLib Reference","title":"GLib Reference","text":"Modules = [Gtk4.GLib]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = false\nPrivate = true","category":"page"},{"location":"doc/GLib_reference/#Gtk4.GLib.g_type-Tuple{UInt64}","page":"GLib Reference","title":"Gtk4.GLib.g_type","text":"g_type(x)\n\nGet the GType corresponding to a Julia type or object. See GLib documentation for more information.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.propertyinfo-Tuple{Gtk4.GLib.GObject, AbstractString}","page":"GLib Reference","title":"Gtk4.GLib.propertyinfo","text":"propertyinfo(w::GObject, name)\n\nPrints information about a property of the GObject w, including a brief description, its type, its default value, and its current value.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.signal_handler_is_connected-Tuple{Gtk4.GLib.GObject, UInt64}","page":"GLib Reference","title":"Gtk4.GLib.signal_handler_is_connected","text":"signal_handler_is_connected(widget, id) -> Bool\n\nReturn true/false depending on whether widget has a connected signal handler with the given id.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.start_main_loop-Tuple{}","page":"GLib Reference","title":"Gtk4.GLib.start_main_loop","text":"start_main_loop()\n\nIf the default GLib main event loop is not already running, start a Julia task that runs it.\n\nSee also stop_main_loop.\n\n\n\n\n\n","category":"method"},{"location":"doc/GLib_reference/#Gtk4.GLib.stop_main_loop-Tuple{}","page":"GLib Reference","title":"Gtk4.GLib.stop_main_loop","text":"stop_main_loop()\n\nStops the default GLib main loop after the next iteration. Does not affect loop operation if GApplication's run() method is being used instead of GLib.startmainloop().\n\nSee also start_main_loop.\n\n\n\n\n\n","category":"method"},{"location":"manual/builder/#Builder-1","page":"Builder","title":"Builder","text":"","category":"section"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"Until now we have created and arranged all widgets entirely using Julia code. While this works fine for small examples, it has the issue that we are tightly coupling the appearance from our application with the logic of our program code.","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"There is an alternative way to design user interfaces that strictly separates the layout from the code. This is done by an XML based file format that allows for describing any arrangement of widgets. In order to use the interface in your Julia Gtk4 application you will need GtkBuilder.","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"For GTK version 3 and earlier, Glade is often used as a GUI tool for creating GtkBuilder XML files in a WYSIWYG (what you see is what you get) manner, but Glade wasn't ported to GTK version 4. Instead Cambalache can be used (or the XML can be created by hand).","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"Once we have created the XML interface the result can be stored in an XML file that usually has the extension .ui. Let's assume we have created a file myapp.ui that looks like","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <requires lib=\"gtk\" version=\"4.0\"/>\n  <object class=\"GtkWindow\" id=\"window1\">\n    <property name=\"child\">\n      <object class=\"GtkButton\" id=\"button1\">\n        <property name=\"label\" translatable=\"yes\">button</property>\n        <property name=\"use_action_appearance\">False</property>\n        <property name=\"focusable\">1</property>\n        <property name=\"receives_default\">1</property>\n        <property name=\"use_action_appearance\">False</property>\n      </object>\n    </property>\n  </object>\n</interface>","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"In order to access the widgets from Julia we first create a GtkBuilder object that will serve as a connector between the XML definition and our Julia code.","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"b = GtkBuilder(filename=\"path/to/myapp.ui\")","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"Alternatively, if we store the above XML definition in a Julia string myapp we can initialize the builder by","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"b = GtkBuilder(buffer=myapp)","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"Now we want to access a widget from the XML file in order to actually display it on the screen. To do so we can call","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"win = b[\"window1\"]","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"for each widget we want to access in our Julia code. Widgets that we don't need to access from Julia, for example layout widgets like GtkBox that are being used only to arrange more interesting widgets for input or display, do not need to be loaded. You can thus see your builder as a kind of a widget store that you use when you need access to your widgets.","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"note: Note\nIf you are developing the code in a package you can get the package directory using the @__DIR__ macro. For instance, if your UI file is located at MyPackage/src/builder/myuifile.ui, you can get the full path using uifile = joinpath(@__DIR__, \"builder\", \"myuifile.ui\").","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"In Gtk4.jl a macro @load_builder is defined that iterates over the GtkWidgets in a GtkBuilder object and automatically assigns them to Julia variables with the same id. For example, if a GtkEntry with an id entry1 and two GtkButtons with id's button1 and button2 are present in myapp.ui, calling","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"@load_builder(GtkBuilder(filename=\"myapp.ui\"))","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"is equivalent to","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"entry1 = b[\"entry1\"]\nbutton1 = b[\"button1\"]\nbutton2 = b[\"button2\"]","category":"page"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"Note that this only works for GtkWidgets that implement the interface GtkBuildable, which excludes some objects often defined in UI files, for example GtkAdjustment. Those objects will have to be fetched using calls to get_object.","category":"page"},{"location":"manual/builder/#Callbacks-1","page":"Builder","title":"Callbacks","text":"","category":"section"},{"location":"manual/builder/#","page":"Builder","title":"Builder","text":"The XML file lets us only describe the visual structure of our widgets and not their behavior when the using is interacting with it. For this reason, we will have to add callbacks to the widgets which we do in Julia code as it was described in Signals and Callbacks.","category":"page"},{"location":"manual/properties/#Properties-1","page":"Properties","title":"Properties","text":"","category":"section"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"If you're following along, you probably noticed that creating win caused quite a lot of output:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Gtk4.GtkWindowLeaf(accessible-role=GTK_ACCESSIBLE_ROLE_WINDOW, name=\"\", parent, root, width-request=-1, height-request=-1, visible=true, sensitive=true, can-focus=true, has-focus=false, can-target=true, focus-on-click=true, focusable=false, has-default=false, receives-default=false, cursor, has-tooltip=false, tooltip-markup=nothing, tooltip-text=nothing, opacity=1.000000, overflow=GTK_OVERFLOW_HIDDEN, halign=GTK_ALIGN_FILL, valign=GTK_ALIGN_FILL, margin-start=0, margin-end=0, margin-top=0, margin-bottom=0, hexpand=false, vexpand=false, hexpand-set=false, vexpand-set=false, scale-factor=1, css-name=\"window\", css-classes, layout-manager, title=nothing, resizable=true, modal=false, default-width=200, default-height=200, destroy-with-parent=false, hide-on-close=false, icon-name=nothing, display, decorated=true, deletable=true, transient-for, application, default-widget, focus-widget, child, titlebar, handle-menubar-accel=true, is-active=false, startup-id, mnemonics-visible=false, focus-visible=false, maximized=false, fullscreened=false)","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"This shows you a list of properties of the object and their current values. All GTK widgets, including windows, are subclasses of GObject, which have various properties that control how the widgets are displayed. For example, notice that the title property is set to \"My window\". In this package, GObject properties are mapped onto Julia properties. We can change the title in the following way:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> win.title = \"New title\"","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"To get the title we can use:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> title = win.title\n\"New title\"","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"We can also use set_gtk_property! and get_gtk_property! to set or get GObject properties:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> set_gtk_property!(win, :title, \"New title\")\njulia> get_gtk_property(win, :title)\n\"New title\"","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"To get the property in a type stable way, you can specify the return type:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> get_gtk_property(win, :title, String)\n\"New title\"","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"To access particular properties using set_gtk_property! or get_gtk_property, you can either use symbols, like :title, or strings, like \"title\". When using symbols, you'll need to convert any Gtk property names that use - into names with _:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> get_gtk_property(win, :default_width)\ntrue","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Properties that are string-valued or GObject-valued can be set to nothing, which is equivalent to setting them to NULL in C (or None in Python). A list of all possible property names for a GObject instance is returned by gtk_propertynames.","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Information about a property, including a description, its GLib type and default value, can be found using propertyinfo:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> propertyinfo(win, :title)\nName: title\nGType name: gchararray\nFlags: Readable Writable\nDescription: The title of the window\nDefault value: nothing\nCurrent value: nothing","category":"page"},{"location":"manual/properties/#Getter-and-setter-methods-1","page":"Properties","title":"Getter and setter methods","text":"","category":"section"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Some properties have corresponding getter and setter C methods that can be accessed in the submodule G_.","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Some of the most important or useful are also pulled into the Gtk4 module. For example the function visible just calls G_.set_visible and G_.get_visible:","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> visible(win)\ntrue\n\njulia> visible(win, false)\n\njulia> visible(win)\nfalse\n\njulia> visible(win, true)","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"This sequence makes the window disappear and then reappear.","category":"page"},{"location":"manual/properties/#Binding-properties-1","page":"Properties","title":"Binding properties","text":"","category":"section"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Properties can be bound to one another through the GObject signal system using the method bind_property. For example, if one wanted the title of a window win2 to automatically track that of another window win1, one could use","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> b = bind_property(win1, \"title\", win2, \"title\")","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"Now if one calls","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"julia> win1.title = \"New title\"","category":"page"},{"location":"manual/properties/#","page":"Properties","title":"Properties","text":"the title of win2 is automatically updated to the same value. The binding can be released using unbind_property(b).","category":"page"},{"location":"doc/GI_reference/#API-Reference-1","page":"-","title":"API Reference","text":"","category":"section"},{"location":"doc/GI_reference/#Public-interface-1","page":"-","title":"Public interface","text":"","category":"section"},{"location":"doc/GI_reference/#","page":"-","title":"-","text":"Modules = [GI]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = true\nPrivate = false","category":"page"},{"location":"doc/GI_reference/#Private-methods-1","page":"-","title":"Private methods","text":"","category":"section"},{"location":"doc/GI_reference/#","page":"-","title":"-","text":"Modules = [GI]\nOrder   = [:module, :constant, :type, :function, :macro]\nPublic  = false\nPrivate = true","category":"page"},{"location":"manual/textwidgets/#Text-Widgets-1","page":"Text Widgets","title":"Text Widgets","text":"","category":"section"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"There are two basic widgets available for rendering simple text. The one is for displaying non-editable text GtkLabel the other is for editable text GtkEntry.","category":"page"},{"location":"manual/textwidgets/#Label-1","page":"Text Widgets","title":"Label","text":"","category":"section"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"A GtkLabel is the most basic text widget that has already been used behind the scene in any previous example involving a GtkButton. A GtkLabel is constructed by calling","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"label = GtkLabel(\"My text\")","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"The text of a label can be changed using the label property or G_.set_text","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"G_.set_text(label,\"My other text\")\nlabel.label = \"My final text\"","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"Furthermore, a label has limited support for adding formatted text. This is done using the G_.set_markup function:","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"G_.set_markup(label,\"\"\"<b>My bold text</b>\\n\n                          <a href=\\\"https://www.gtk.org\\\"\n                          title=\\\"Our website\\\">GTK+ website</a>\"\"\")","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"The syntax for this markup text is borrowed from HTML and explained here.","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"A label can be made selectable using","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"G_.set_selectable(label,true)","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"This can be used if the user should be allowed to copy the text.","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"The justification of a label can be changed in the following way:","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"G_.set_justify(label,Gtk4.Justification_RIGHT)","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"Possible values of the enum Justification are LEFT,RIGHT,CENTER, and FILL.","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"Automatic line wrapping can be enabled using","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"G_.set_text(label,repeat(\"Very long text! \",20))\nG_.set_wrap(label,true)","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"Note that wrapping will only occur if the size of the widget is limited using layout constraints.","category":"page"},{"location":"manual/textwidgets/#Entry-1","page":"Text Widgets","title":"Entry","text":"","category":"section"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"The entry widget allows the user to enter text. The entered text can be read and write using","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"ent = GtkEntry()\nent.text = \"My String\"\nstr = ent.text","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"The maximum number of characters can be limited using ent.max_length = 10.","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"Sometimes you might want to make the widget non-editable. This can be done by the call","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"# using the accessor methods\nG_.set_editable(GtkEditable(ent),false)\n# using the property system\nent.editable = false","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"If you want to use the entry to retrieve passwords you can hide the visibility of the entered text. This can be achieve by calling","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"ent.visibility = false","category":"page"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"To get notified by changes to the entry one can listen the \"changed\" event.","category":"page"},{"location":"manual/textwidgets/#Search-Entry-1","page":"Text Widgets","title":"Search Entry","text":"","category":"section"},{"location":"manual/textwidgets/#","page":"Text Widgets","title":"Text Widgets","text":"A special variant of the entry that can be used as a search box is GtkSearchEntry. It is equipped with a button to clear the entry.","category":"page"},{"location":"#Gtk4.jl-1","page":"Home","title":"Gtk4.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Julia Bindings for Gtk version 4.x.","category":"page"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gtk4.jl is a Julia package providing bindings for the Gtk library: https://www.gtk.org/","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Complete Gtk documentation is available at https://www.gtk.org/docs/","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See Getting Started for an introduction to using the package, adapted from the Gtk.jl manual.\nSee Differences between Gtk.jl and Gtk4.jl for a summary of the differences between this package and Gtk.jl","category":"page"},{"location":"#History-1","page":"Home","title":"History","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package was adapted from Gtk.jl, which was written by Jameson Nash and others and supported GTK versions 2 and 3. With version 4 there were so many changes to the GTK API that it would have been messy to try to support it and previous versions in the same package. I also wanted to support more (ideally all) GTK types and functions using GObject introspection. Note that much of the GLib/GObject functionality that underlies GTK is largely the same code as in Gtk.jl. Some changes were made to try to take better advantage of GObject introspection or to remove old code that was no longer necessary in recent versions of Julia.","category":"page"}]
}
